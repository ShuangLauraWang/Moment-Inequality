function Main_Inequalities_Part1%==============================% This function generates lines 1-5 and 13-14 in Table 2 of "Alternative% Models for Moment Inequalities" utilizing sets of 1385 markets created% from Main_GenerateDraws.m.% Parts 1-3 correspond to lines 1-3% Parts 4-5 correspond to lines 4-5 (but are reversed)% Parts 6-7 correspond to lines 13-14%==============================thisparm=getenv('SGE_TASK_ID');TaskNumber=str2num(thisparm);code=['load DataChunk_072709_' thisparm];eval(code);nMonteDraws=10;nMonteDraws = ChunkSize;%============================================================NumHosp = 2;NumHMO = 2;gamma=.075;SegmentSize=5540;nObs = SegmentSize;nMkts = SegmentSize/4;RedrawMeasErrors = 1;RedrawNu2s = 1;for i=1:13    BETA(i).B = [];end;SDMultipleCost = .25^.5;SDMultiplePop = .05^.5;SD1 = 9;SD2 = 300;SD_HospMeasurementErrors = SDMultipleCost*SD1;SD_NBarMeasurementErrors = SDMultiplePop*SD2;                  nSetsOfErrors=50; %was 100Min=16.0;Max=18.0;Grid=10;        HospMeasurementErrorsAll = normrnd(0,SD_HospMeasurementErrors, nObs/2, nMonteDraws);        NBarMeasurementErrorsAll = normrnd(0,SD_NBarMeasurementErrors, nObs/4, nMonteDraws);        for iMonteDraw = 1:nMonteDraws                disp(iMonteDraw);                                if ~RedrawMeasErrors                    HospMeasurementErrorsAll(:,1) = XALL(iMonteDraw).HospMeas(:,1);                    NBarMeasurementErrorsAll(:,1) = XALL(iMonteDraw).NBarMeas(:,1);                            end;                x1 = XALL(iMonteDraw).x1;                x2 = XALL(iMonteDraw).x2;                if doParts1to5                %============================================================                %PART 1                %============================================================                            %Flags                            RobustIneq=0;                            IgnoreStructErrors = 0;         %Mis-specifies error by not subtracting it out                            doVar = 0;                      %Calculate 95 conf interval                            doTestStatistic=0;                            DimBeta=1;                            nConfInterval_Iterations=200;                            ConfInterval = .95;                            %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                            useConstINST = 1;                            usemeaserrorsINST = 0;                            useNoCostINST = 1;                            %MEASUREMENT ERROR                            usemeaserrors = 1;              %Add Measurement Noise to Moments                            nMeasErrorIter = 1;                            SDMultipleCost = .25^.5;                            SDMultiplePop = .05^.5;                            SDMultiplePop = 0;                            %Probability Parameters                            doProbabilities=0;                            doProbBootstrap=0;                            doProbVar=1;                            doProbMeasErrors=1;                            doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                            nBetaProbIterations=1;                            nMeasErrorIterProb=1;                            %Measurement Errors                            SD1 = 9;                            SD2 = 300;                            SD_HospMeasurementErrors = SDMultipleCost*SD1;                            SD_NBarMeasurementErrors = SDMultiplePop*SD2;                            if ~RobustIneq                                NumMoments = 5;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                            else                                NumMoments = 2;                            end;                            lb_temp=-100;                            ub_temp=10000;                            lb=lb_temp*ones(DimBeta,1);                            ub=ub_temp*ones(DimBeta,1);                            options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                            %Starting Points for Search Routines                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                            x1 = XALL(iMonteDraw).x1;                            x2 = XALL(iMonteDraw).x2;                                                        NumHosp = 2;                            NumHMO = 2;                            gamma=.075;                            % Import Data %                            x = [x1];                            nObs = size(x,[1]);                            x = [zeros(nObs,1) x];                            % Prepare Data Matrices %                            ID_RunID = x(:,1);                            ID_Iter = x(:,2);                            ID_HMO = x(:,3);                            ID_Hosp = x(:,4);                            NBar = x(:,5);                            ISCONT = x(:,6);                            HospCost_j = x(:,7);                            HospCost_j2 = x(:,8);                            ISCAP_j = x(:,9);                            ISCAP_j2 = x(:,10);                            HospCap_j = x(:,11);                            HospCap_j2 = x(:,12);                            HospChar = x(:,13);                            Tjk = x(:,14);                            Tjk2 = x(:,15);                            Tj2k = x(:,16);                            Njk = x(:,17);                            Njk2 = x(:,18);                            Nj2k = x(:,19);                            HospRealProf = x(:,20);                            HospRealCosts = x(:,21);                            HospNewRealProf = x(:,22);                            HospNewRealCosts = x(:,23);                            HMONewPrem = x(:,24);                            N2jk = x(:,25);                            N2jk2 = x(:,26);                            HMOChar = x(:,27);                            HMOPrem = x(:,28);                            HMOCost = x(:,29);                            HMORealProf = x(:,30);                            SigmaM_k = x(:,31);                            SigmaM_k2 = x(:,32);                            HMONewProf = x(:,33);                            Sigma2M_k = x(:,34);                            Sigma2M_k2 = x(:,35);                            N2jk_temp = x(:,36);                            N2j2k = x(:,37);                            MktStd_k = x(:,38);                            MktStd_k2 = x(:,39);                            HospCap_Mkt = HospCap_j+ HospCap_j2;                            HospCost_j_Wtd = HospCost_j.*(HospCap_j./HospCap_Mkt);                            HospCost_j2_Wtd = HospCost_j2.*(HospCap_j2./HospCap_Mkt);                            HospCost_MktAvg_Wtd = (HospCost_j_Wtd +HospCost_j2_Wtd)/2;                            HospCost_MktAvg = (HospCost_j + HospCost_j2)/2;                            HospCost_DiffAvg = HospCost_j - HospCost_MktAvg;                            HospCost_DiffAvgWts = HospCost_j - HospCost_MktAvg_Wtd;                            HospCost_DiffAvgWts_j2 = HospCost_j2 - HospCost_MktAvg_Wtd;                            %PopPerBed = NBar./(HospCap_j + HospCap_j2);                            SigmaH_jk = zeros(nObs,1);                            SigmaH_j2k = zeros(nObs,1);                            SigmaH_jk2 = zeros(nObs,1);                            Sigma2H_jk = zeros(nObs,1);                            Sigma2H_j2k = zeros(nObs,1);                            Sigma2H_jk2 = zeros(nObs,1);                            for idx=1:nObs                                SigmaH_jk(idx,1) = Njk(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_j2k(idx,1) = Nj2k(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_jk2(idx,1) = Njk2(idx,1)/(SigmaM_k2(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk(idx,1) = N2jk(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_j2k(idx,1) = N2j2k(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk2(idx,1) = N2jk2(idx,1)/(Sigma2M_k2(idx,1)*NBar(idx,1)*gamma);                            end;                            DeltaNjk = Njk-N2jk;                            DeltaNj2k = Nj2k-N2j2k;                            DeltaNjk2 = Njk2-N2jk2;                            nMkts = nObs / 4;                            nContracts = 0;                            for i=1:size(ISCONT,[1])                                if ISCONT(i,1)==1                                    nContracts = nContracts+1;                                end;                            end;                            HClassTemp = [1;1;2;2;];                            HospClass = kron(nMkts,HClassTemp);                            ISCONTj2 = ISCONT;                            ISCONTk2 = ISCONT;                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2(idx,1) = ISCONT(idx+2,1);                                else                                    ISCONTj2(idx,1) = ISCONT(idx-2,1);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2(idx,1) = ISCONT(idx+1,1);                                else                                    ISCONTk2(idx,1) = ISCONT(idx-1,1);                                end;                                end;                            DeltaISCONT = zeros(nObs,1);                            for i=1:nObs                                DeltaISCONT(i,1) = (-1)^(ISCONT(i,1)+1);                                DeltaISCONTj2(i,1) = (-1)^(ISCONTj2(i,1)+1);                                DeltaISCONTk2(i,1) = (-1)^(ISCONTk2(i,1)+1);                            end;                            HospCostPerPatient = zeros(nObs,1);                            HospCostPerPatient2 = zeros(nObs,1);                            for i=1:nObs                                if (Njk(i,1) + Njk2(i,1))>0                                    HospCostPerPatient(i,1) = HospRealCosts(i,1) / (Njk(i,1) + Njk2(i,1));                                end;                                if (N2jk(i,1) + N2jk2(i,1))>0                                        HospCostPerPatient2(i,1) = HospNewRealCosts(i,1) / (N2jk(i,1) + N2jk2(i,1));                                end;                            end;                            %TEMP = (Njk+Njk2).*HospCostsPerPatient - (N2jk+N2jk2) .* HospCostsPerPatient2;                            %AAA=  TEMP-DeltaHospCosts;                            %==========================================================================                            %INSTRUMENTS =========================                            %==========================================================================                            NormInst = [ones(nObs,1) Njk NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                            NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*HospCost_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                            Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*HospCost_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                            MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*HospCost_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                            ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCap_j ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                            CostInteraction = [HospCost_j.*NBar HospCost_j.*HospCap_j HospCost_j.*HospCost_j HospCost_j.*(HospCap_j+HospCap_j2) HospCost_j.*HMOChar HospCost_j.*HospChar];                            SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                            CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                            HospCostsWtd = [HospCost_j_Wtd HospCost_j2_Wtd HospCost_MktAvg HospCost_MktAvg_Wtd];                                                        INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                                                        UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                                                                                    ALLINST_NoNjk = INST;                            ALLINST_NoNjk(:,2) = [];                            NBarMkt = zeros(nMkts,1);                            SumCapMkt = zeros(nMkts,1);                            SumCostMkt = zeros(nMkts,1);                            SumISCAPMkt = zeros(nMkts,1);                            for iMkt=1:nMkts                                idx = (iMkt-1)*4+1;                                NBarMkt(iMkt,1) = NBar(idx,1);                                SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                                SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                                SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                                end;                            MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                            if ~(SDMultiplePop == 0)                                MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                            end;                            if usemeaserrorsINST                                PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                                ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                            end;                            if useConstINST                                INST = [ones(nObs,1) ];                                INST_NoContract = [ones(nObs,1)];                                MktINST = [ones(nMkts,1)];                                MktINSTmeas = [ones(nMkts,1)];                            end;                            if useNoCostINST                                NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                                NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                                Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                                MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                                ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                            end;                            nInst = size(INST,2);                            nInstNoContract = size(INST_NoContract,2);                            %==========================================================================                            %ERROR CALCULATIONS========================================================                            %==========================================================================                            useTotalTransfers = 1;                            %Calculate distribution of errors using total transfers (need to account                            %for Njk/N2jk issue                            if useTotalTransfers                                NNjk=Njk+N2jk;                                NNj2k=NNjk;                                NNjk2=NNjk;                                NN2jk=NNjk;                                NN2j2k=NNjk;                                NN2jk2=NNjk;                                for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        NNj2k(idx,1) = NNjk(idx+2,1);                                    else                                        NNj2k(idx,1) = NNjk(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        NNjk2(idx,1) = NNjk(idx+1,1);                                    else                                        NNjk2(idx,1) = NNjk(idx-1,1);                                    end;                                    end;                                X = [NNjk ALLINST_NoNjk];%                                 Beta = (inv(X'*X)*(X'*(NNjk.*Tjk)));%                                Beta_0 = Beta(1);                                Beta_0 = TrueBeta0;                                Beta = TrueBeta;                                %                                Tjk_NEW = (NNjk.*Tjk - X*Beta + NNjk*Beta_0)./NNjk;                                Tjk_NEW = (NNjk.*Tjk - X*TrueBeta + NNjk*TrueBeta0)./NNjk;                                Tj2k_NEW = Tjk_NEW;                                Tjk2_NEW = Tjk_NEW;                                 Tjk_Residual = Tjk - Tjk_NEW;                                Tj2k_Residual = Tjk_Residual;                                Tjk2_Residual = Tjk_Residual;                                    for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx+2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx+2,1);                                    else                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx-2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx+1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx+1,1);                                    else                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx-1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx-1,1);                                    end;                                    end;                                  Ejk = Njk.* Tjk_NEW - Njk * Beta_0;                                    Ej2k = Nj2k.*Tj2k_NEW - Nj2k * Beta_0;                                    Ejk2 = Njk2.*Tjk2_NEW - Njk2 * Beta_0;                                EjkALL = NNjk.* Tjk_NEW - NNjk * Beta_0;                                                                                                    E2jk = N2jk.*Tjk_NEW - N2jk * Beta_0;                                E2j2k = N2j2k.*Tj2k_NEW - N2j2k * Beta_0;                                    E2jk2 = N2jk2.*Tjk2_NEW - N2jk2 * Beta_0;                                   Delta_Ejk = Ejk - E2jk;                                Delta_Ej2k = Ej2k - E2j2k;                                Delta_Ejk2 = Ejk2 - E2jk2;                            else                                cons = ones(nObs,1);                                Beta_0 = (inv(cons'*cons)*(cons'*(Tjk)));                                        Ejk = Tjk - Beta_0;                                  Ej2k = Tj2k - Beta_0;                                Ejk2 = Tjk2 - Beta_0;                            end;                            Err2=zeros(nMkts,4);                % Residuals in nMkts x 4 form. Reshaped Err.                            for i=0:nMkts-1                                for j=1:4                                    Err2(i+1,j) = EjkALL(i*4+j);                                end;                            end;                            ErrMean = mean(Err2)';                            VarErr=zeros(4,4);                            for n=1:nMkts                                SSample = Err2(n,:)';                                VarErr = VarErr + ((SSample-ErrMean)*(SSample-ErrMean)');                            end;                            VarErr = VarErr / (nMkts);                            CholVarErr = chol(VarErr);                                    %display(Beta_0);                            Beta_Start = [Beta_Start Beta_0];                            NumBetaStart = size(Beta_Start,2);                               %==========================================================================                            %PRELIMINARY MOMENT CONSTRUCTIONS====================================================                            %==========================================================================                                DeltaHospCosts = HospRealCosts - HospNewRealCosts;                                DeltaHMOPrem = ( SigmaM_k.*(HMOPrem-HMOCost) - Sigma2M_k.*(HMONewPrem-HMOCost)) .*NBar;                                AbsDeltaNjkInv = abs(ones(nObs,1) ./ DeltaNjk);                                A_Hosp = DeltaNjk + DeltaNjk2;                                A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                C_Hosp = DeltaHospCosts - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                C_HMO = (-1)*(DeltaHMOPrem - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual - Delta_Ej2k);                                if (~IgnoreStructErrors)                                    C_Hosp = C_Hosp - Delta_Ejk;                                    C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                end;                                A_HMO_Orig = A_HMO;                                A_Hosp_Orig = A_Hosp;                                C_HMO_Orig = C_HMO;                                C_Hosp_Orig = C_Hosp;                                DeltaHospTransReal = DeltaNjk.*Tjk+DeltaNjk2.*Tjk2;                                DeltaHMOTransReal =  DeltaNjk.*Tjk+DeltaNj2k.*Tj2k;                                DeltaHospTransPredicted = (DeltaNjk+DeltaNjk2)*Beta_0;                                DeltaHMOTransPredicted =  (DeltaNjk+DeltaNj2k)*Beta_0;                            %==========================================================================                            %BEGIN CONSTRUCTION OF MOMENTS====================================================                            %==========================================================================                            if usemeaserrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                                MeasErrorSinglePoints=0;                            else                                nMeasErrorIter = 1;                            end;                            for idxMeasError=1:nMeasErrorIter                                if usemeaserrors                                    if RedrawMeasErrors                                        iErrorUse = iMonteDraw;                                    else                                        iErrorUse = 1;                                    end;                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                    Etaj = kron(HospMeasurementErrors,ones(2,1));                                    if SDMultiplePop > 0                                        NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                    else                                        NBarMeasurementErrors = zeros(nObs/4, 1);                                    end;                                    Omega = kron(NBarMeasurementErrors,ones(4,1));                                        Psijk_A = gamma * (SigmaM_k.*SigmaH_jk);                                    Psijk_B = gamma * (Sigma2M_k.*Sigma2H_jk);                                    Psijk = Psijk_A-Psijk_B;                                    Psij2k_A = gamma * (SigmaM_k.*SigmaH_j2k);                                    Psij2k_B = gamma * (Sigma2M_k.*Sigma2H_j2k);                                    Psij2k = Psij2k_A-Psij2k_B;                                            Psijk2_A = gamma * (SigmaM_k2.*SigmaH_jk2);                                    Psijk2_B = gamma * (Sigma2M_k2.*Sigma2H_jk2);                                    Psijk2 = Psijk2_A-Psijk2_B;                                            PsiHosp_A = Psijk_A + Psijk2_A;                                    PsiHosp_B = Psijk_B + Psijk2_B;                                    DeltaNjkErr = DeltaNjk + Omega.*Psijk;                                    AbsDeltaNjkErrInv = abs(ones(nObs,1) ./ DeltaNjkErr);                                    DeltaNjk2Err = DeltaNjk2 + Omega.*Psijk2;                                    DeltaNj2kErr = DeltaNj2k + Omega.*Psij2k;                                            A_Hosp = DeltaNjk + DeltaNjk2;                                    A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                    C_Hosp = (Njk+Njk2+Omega.*PsiHosp_A).*(HospCostPerPatient+Etaj) - (N2jk+N2jk2+Omega.*PsiHosp_B).*(HospCostPerPatient2+Etaj) - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                    C_HMO = (-1)*(   ( SigmaM_k.*(HMOPrem-HMOCost)-Sigma2M_k.*(HMONewPrem-HMOCost) ).*(NBar+Omega) - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual- Delta_Ej2k );                                    if (~IgnoreStructErrors)                                        C_Hosp = C_Hosp - Delta_Ejk;                                        C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                    end;                                end;                                %Create Moment Matrices (normal case)=======================================================================                                if ~RobustIneq                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    for MomentID=1:NumMoments                                        % Moments for HMO: If HMO Accepts, should be better off. Moment                                        % A1 for larger hospital; Moment A2 for smaller hospital.                                        if (MomentID<3)                                            for j=1:nMkts                                                for k=1:NumHMO                                                    idx = (j-1)*(NumHosp*NumHMO) + (MomentID-1)*(NumHosp) + k;                                                    hTemp = INST(idx,:)';                                                    hTempNoContract = INST_NoContract(idx,:)';                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_HMO(idx,:) , hTemp);                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_HMO(idx,:) , hTemp);                                                end;                                                Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ 4;                                                W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ 4;                                            end;                                        else                                            % Moments for Hospitals: Hospitals that do contract should be                                            % better off than if they did not contract                                            if (MomentID==3)                                                for j=1:nMkts                                                    Count = 0;                                                    for k=1:(NumHosp*NumHMO)                                                        idx = (j-1)*(NumHosp*NumHMO) + k;                                                        hTemp = INST(idx,:)';                                                        if ISCONT(idx,1)==1                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_Hosp(idx,:) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_Hosp(idx,:) , hTemp);                                                            Count = Count + 1;                                                        end;                                                    end;                                                    if Count==0                                                        Count = 1;                                                    end;                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                    end;                                                end;%ifMomentID==5                                        end;%ifMomentID<5                                                 if (MomentID > 3)                                            if (MomentID==4)                                                for j=1:nMkts                                                    for k=1:(NumHosp*NumHMO)                                                       idx = (j-1)*(NumHosp*NumHMO) + k;                                                       hTemp = INST(idx,:)';                                                       Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                       W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                    end;                                                end;                                            end;                                            if MomentID==5                                                if NumMoments >= 2                                                        % Sum of Proift changes if contract should be positive if they                                                    % do contract                                                    for j=1:nMkts                                                        Count = 0;                                                        for k=1:(NumHosp*NumHMO)                                                            idx = (j-1)*(NumHosp*NumHMO) + k;                                                            hTemp = INST(idx,:)';                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                            if ISCONT(idx,1)==1                                                                 Count = Count + 1;                                                            end;                                                        end;                                                        if Count==0                                                            Count = 1;                                                        end;                                                        Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                        W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                           end;                                                end;                                               end;                                        end;                                                                                                           end;%forMomentID=1:NumMoments                                else    %==========================================COMPUTE ROBUST INEQUALITIES: ===========================                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    % Adding change in profits for hospital if do contract and                                     % change in profits for HMO if don't contract                                    for j=1:nMkts                                        for k=1:(NumHosp*NumHMO)                                           idx = (j-1)*(NumHosp*NumHMO) + k;                                           hTemp = INST(idx,:)';                                           Z_AB(:,:,j,1) = Z_AB(:,:,j,1) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                           W_AB(:,:,j,1) = W_AB(:,:,j,1) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                        end;                                    end;                                    if NumMoments >= 2                                            % Sum of Proift changes if contract should be positive if they                                        % do contract                                        for j=1:nMkts                                            Count = 0;                                            for k=1:(NumHosp*NumHMO)                                                idx = (j-1)*(NumHosp*NumHMO) + k;                                                hTemp = INST(idx,:)';                                                Z_AB(:,:,j,2) = Z_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                W_AB(:,:,j,2) = W_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                if ISCONT(idx,1)==1                                                     Count = Count + 1;                                                end;                                            end;                                            if Count==0                                                Count = 1;                                            end;                                            Z_AB(:,:,j,2) = Z_AB(:,:,j,2)/ Count;                                            W_AB(:,:,j,2) = W_AB(:,:,j,2)/ Count;                                                               end;                                    end;                                end;    %if RobustIneq                                %==========================================================================                                ZJtempAB = zeros(nInst,DimBeta,NumMoments);                                WJtempAB = zeros(nInst,1,NumMoments);                                for j=1:nMkts                                    for MomentID=1:NumMoments                                        ZJtempAB(:,:,MomentID) = ZJtempAB(:,:,MomentID) + Z_AB(:,:,j,MomentID)/nMkts;                                        WJtempAB(:,1,MomentID) = WJtempAB(:,1,MomentID) + W_AB(:,1,j,MomentID)/nMkts;                                    end;                                end;                                ZJ =[];                                WJ =[];                                for n=1:NumMoments                                    ZJ = [ZJ;ZJtempAB(:,:,n)];                                    WJ = [WJ;WJtempAB(:,:,n)];                                end;                                %Testing====================================================================================================                                    SinglePoint = 0;                                Beta_S1=Beta_0;                                [BetaMin BetaMax ErrorFlag] = f_fmincon_092605(ZJ,WJ,lb,ub,options,Beta_Start);                                if (ErrorFlag == 0)                                    TEMP = [Beta_0 BetaMin BetaMax];                                else                                    [BetaPoint fval ErrorFlag2] = f_fminconsingle(ZJ,WJ,lb,ub,options,Beta_Start);                                    TEMP = [Beta_0 BetaPoint BetaPoint];                                    display(fval);                                    TJTestStatistic = (nMkts^.5) * (fval);                                    SinglePoint=1;                                end;                                %display(idxMeasError);                                display(TEMP);                            end; %END MEASUREMENT ERROR ITERATIONS                            BETA(1).B = [BETA(1).B; TEMP];                %============================================================                %PART 2                %============================================================                            %Flags                            RobustIneq=0;                            IgnoreStructErrors = 0;         %Mis-specifies error by not subtracting it out                            doVar = 0;                      %Calculate 95 conf interval                            doTestStatistic=0;                            DimBeta=1;                            nConfInterval_Iterations=200;                            ConfInterval = .95;                            %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                            useConstINST = 1;                            usemeaserrorsINST = 1;                            useNoCostINST = 0;                            %MEASUREMENT ERROR                            usemeaserrors = 1;              %Add Measurement Noise to Moments                            nMeasErrorIter = 1;                            SDMultipleCost = .25^.5;                            SDMultiplePop = .05^.5;                            %SDMultiplePop = 0;                            %Probability Parameters                            doProbabilities=0;                            doProbBootstrap=0;                            doProbVar=1;                            doProbMeasErrors=1;                            doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                            nBetaProbIterations=1;                            nMeasErrorIterProb=1;                            %Measurement Errors                            SD1 = 9;                            SD2 = 300;                            SD_HospMeasurementErrors = SDMultipleCost*SD1;                            SD_NBarMeasurementErrors = SDMultiplePop*SD2;                            if ~RobustIneq                                NumMoments = 5;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                            else                                NumMoments = 2;                            end;                            INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                               ALLINST_NoNjk = INST;                            ALLINST_NoNjk(:,2) = [];                            NBarMkt = zeros(nMkts,1);                            SumCapMkt = zeros(nMkts,1);                            SumCostMkt = zeros(nMkts,1);                            SumISCAPMkt = zeros(nMkts,1);                            for iMkt=1:nMkts                                idx = (iMkt-1)*4+1;                                NBarMkt(iMkt,1) = NBar(idx,1);                                SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                                SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                                SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                                end;                            MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                            if ~(SDMultiplePop == 0)                                MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                            end;                            if usemeaserrorsINST                                PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                                ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                            end;                            if useConstINST                                INST = [ones(nObs,1) ];                                INST_NoContract = [ones(nObs,1)];                                MktINST = [ones(nMkts,1)];                                MktINSTmeas = [ones(nMkts,1)];                            end;                            if useNoCostINST                                NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                                NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                                Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                                MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                                ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                            end;                            nInst = size(INST,2);                            nInstNoContract = size(INST_NoContract,2);                            %==========================================================================                            %PRELIMINARY MOMENT CONSTRUCTIONS====================================================                            %==========================================================================                                DeltaHospCosts = HospRealCosts - HospNewRealCosts;                                DeltaHMOPrem = ( SigmaM_k.*(HMOPrem-HMOCost) - Sigma2M_k.*(HMONewPrem-HMOCost)) .*NBar;                                AbsDeltaNjkInv = abs(ones(nObs,1) ./ DeltaNjk);                                A_Hosp = DeltaNjk + DeltaNjk2;                                A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                C_Hosp = DeltaHospCosts - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                C_HMO = (-1)*(DeltaHMOPrem - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual - Delta_Ej2k);                                if (~IgnoreStructErrors)                                    C_Hosp = C_Hosp - Delta_Ejk;                                    C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                end;                                A_HMO_Orig = A_HMO;                                A_Hosp_Orig = A_Hosp;                                C_HMO_Orig = C_HMO;                                C_Hosp_Orig = C_Hosp;                                DeltaHospTransReal = DeltaNjk.*Tjk+DeltaNjk2.*Tjk2;                                DeltaHMOTransReal =  DeltaNjk.*Tjk+DeltaNj2k.*Tj2k;                                DeltaHospTransPredicted = (DeltaNjk+DeltaNjk2)*Beta_0;                                DeltaHMOTransPredicted =  (DeltaNjk+DeltaNj2k)*Beta_0;                            %==========================================================================                            %BEGIN CONSTRUCTION OF MOMENTS====================================================                            %==========================================================================                            if usemeaserrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                                MeasErrorSinglePoints=0;                            else                                nMeasErrorIter = 1;                            end;                            for idxMeasError=1:nMeasErrorIter                                if usemeaserrors                                    if RedrawMeasErrors                                        iErrorUse = iMonteDraw;                                    else                                        iErrorUse = 1;                                    end;                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                    Etaj = kron(HospMeasurementErrors,ones(2,1));                                    if SDMultiplePop > 0                                        NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                    else                                        NBarMeasurementErrors = zeros(nObs/4, 1);                                    end;                                    Omega = kron(NBarMeasurementErrors,ones(4,1));                                        Psijk_A = gamma * (SigmaM_k.*SigmaH_jk);                                    Psijk_B = gamma * (Sigma2M_k.*Sigma2H_jk);                                    Psijk = Psijk_A-Psijk_B;                                    Psij2k_A = gamma * (SigmaM_k.*SigmaH_j2k);                                    Psij2k_B = gamma * (Sigma2M_k.*Sigma2H_j2k);                                    Psij2k = Psij2k_A-Psij2k_B;                                            Psijk2_A = gamma * (SigmaM_k2.*SigmaH_jk2);                                    Psijk2_B = gamma * (Sigma2M_k2.*Sigma2H_jk2);                                    Psijk2 = Psijk2_A-Psijk2_B;                                            PsiHosp_A = Psijk_A + Psijk2_A;                                    PsiHosp_B = Psijk_B + Psijk2_B;                                    DeltaNjkErr = DeltaNjk + Omega.*Psijk;                                    AbsDeltaNjkErrInv = abs(ones(nObs,1) ./ DeltaNjkErr);                                    DeltaNjk2Err = DeltaNjk2 + Omega.*Psijk2;                                    DeltaNj2kErr = DeltaNj2k + Omega.*Psij2k;                                            A_Hosp = DeltaNjk + DeltaNjk2;                                    A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                    C_Hosp = (Njk+Njk2+Omega.*PsiHosp_A).*(HospCostPerPatient+Etaj) - (N2jk+N2jk2+Omega.*PsiHosp_B).*(HospCostPerPatient2+Etaj) - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                    C_HMO = (-1)*(   ( SigmaM_k.*(HMOPrem-HMOCost)-Sigma2M_k.*(HMONewPrem-HMOCost) ).*(NBar+Omega) - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual- Delta_Ej2k );                                    if (~IgnoreStructErrors)                                        C_Hosp = C_Hosp - Delta_Ejk;                                        C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                    end;                                end;                                %Create Moment Matrices (normal case)=======================================================================                                if ~RobustIneq                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    for MomentID=1:NumMoments                                        % Moments for HMO: If HMO Accepts, should be better off. Moment                                        % A1 for larger hospital; Moment A2 for smaller hospital.                                        if (MomentID<3)                                            for j=1:nMkts                                                for k=1:NumHMO                                                    idx = (j-1)*(NumHosp*NumHMO) + (MomentID-1)*(NumHosp) + k;                                                    hTemp = INST(idx,:)';                                                    hTempNoContract = INST_NoContract(idx,:)';                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_HMO(idx,:) , hTemp);                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_HMO(idx,:) , hTemp);                                                end;                                                Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ 4;                                                W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ 4;                                            end;                                        else                                            % Moments for Hospitals: Hospitals that do contract should be                                            % better off than if they did not contract                                            if (MomentID==3)                                                for j=1:nMkts                                                    Count = 0;                                                    for k=1:(NumHosp*NumHMO)                                                        idx = (j-1)*(NumHosp*NumHMO) + k;                                                        hTemp = INST(idx,:)';                                                        if ISCONT(idx,1)==1                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_Hosp(idx,:) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_Hosp(idx,:) , hTemp);                                                            Count = Count + 1;                                                        end;                                                    end;                                                    if Count==0                                                        Count = 1;                                                    end;                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                    end;                                                end;%ifMomentID==5                                        end;%ifMomentID<5                                                  if (MomentID > 3)                                            if (MomentID==4)                                                for j=1:nMkts                                                    for k=1:(NumHosp*NumHMO)                                                       idx = (j-1)*(NumHosp*NumHMO) + k;                                                       hTemp = INST(idx,:)';                                                       Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                       W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                    end;                                                end;                                            end;                                            if MomentID==5                                                if NumMoments >= 2                                                        % Sum of Proift changes if contract should be positive if they                                                    % do contract                                                    for j=1:nMkts                                                        Count = 0;                                                        for k=1:(NumHosp*NumHMO)                                                            idx = (j-1)*(NumHosp*NumHMO) + k;                                                            hTemp = INST(idx,:)';                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                            if ISCONT(idx,1)==1                                                                 Count = Count + 1;                                                            end;                                                        end;                                                        if Count==0                                                            Count = 1;                                                        end;                                                        Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                        W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                           end;                                                end;                                               end;                                        end;                                                                                                           end;%forMomentID=1:NumMoments                                else    %==========================================COMPUTE ROBUST INEQUALITIES: ===========================                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    % Adding change in profits for hospital if do contract and                                     % change in profits for HMO if don't contract                                    for j=1:nMkts                                        for k=1:(NumHosp*NumHMO)                                           idx = (j-1)*(NumHosp*NumHMO) + k;                                           hTemp = INST(idx,:)';                                           Z_AB(:,:,j,1) = Z_AB(:,:,j,1) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                           W_AB(:,:,j,1) = W_AB(:,:,j,1) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                        end;                                    end;                                    if NumMoments >= 2                                            % Sum of Proift changes if contract should be positive if they                                        % do contract                                        for j=1:nMkts                                            Count = 0;                                            for k=1:(NumHosp*NumHMO)                                                idx = (j-1)*(NumHosp*NumHMO) + k;                                                hTemp = INST(idx,:)';                                                Z_AB(:,:,j,2) = Z_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                W_AB(:,:,j,2) = W_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                if ISCONT(idx,1)==1                                                     Count = Count + 1;                                                end;                                            end;                                            if Count==0                                                Count = 1;                                            end;                                            Z_AB(:,:,j,2) = Z_AB(:,:,j,2)/ Count;                                            W_AB(:,:,j,2) = W_AB(:,:,j,2)/ Count;                                                               end;                                    end;                                end;    %if RobustIneq                                %==========================================================================                                ZJtempAB = zeros(nInst,DimBeta,NumMoments);                                WJtempAB = zeros(nInst,1,NumMoments);                                for j=1:nMkts                                    for MomentID=1:NumMoments                                        ZJtempAB(:,:,MomentID) = ZJtempAB(:,:,MomentID) + Z_AB(:,:,j,MomentID)/nMkts;                                        WJtempAB(:,1,MomentID) = WJtempAB(:,1,MomentID) + W_AB(:,1,j,MomentID)/nMkts;                                    end;                                end;                                ZJ =[];                                WJ =[];                                for n=1:NumMoments                                    ZJ = [ZJ;ZJtempAB(:,:,n)];                                    WJ = [WJ;WJtempAB(:,:,n)];                                end;                                %Testing====================================================================================================                                    SinglePoint = 0;                                Beta_S1=Beta_0;                                [BetaMin BetaMax ErrorFlag] = f_fmincon_092605(ZJ,WJ,lb,ub,options,Beta_Start);                                if (ErrorFlag == 0)                                    TEMP = [Beta_0 BetaMin BetaMax];                                else                                    [BetaPoint fval ErrorFlag2] = f_fminconsingle(ZJ,WJ,lb,ub,options,Beta_Start);                                    TEMP = [Beta_0 BetaPoint BetaPoint];                                    display(fval);                                    TJTestStatistic = (nMkts^.5) * (fval);                                    SinglePoint=1;                                end;                                %display(idxMeasError);                                display(TEMP);                            end; %END MEASUREMENT ERROR ITERATIONS                            BETA(2).B = [BETA(2).B; TEMP];                %============================================================                %PART 3                %============================================================                            %Flags                            RobustIneq=0;                            IgnoreStructErrors = 0;         %Mis-specifies error by not subtracting it out                            doVar = 0;                      %Calculate 95 conf interval                            doTestStatistic=0;                            DimBeta=1;                            nConfInterval_Iterations=200;                            ConfInterval = .95;                            %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                            useConstINST = 1;                            usemeaserrorsINST = 0;                            useNoCostINST = 1;                            %MEASUREMENT ERROR                            usemeaserrors = 1;              %Add Measurement Noise to Moments                            nMeasErrorIter = 1;                            SDMultipleCost = .25^.5;                            SDMultiplePop = .05^.5;                            %SDMultiplePop = 0;                            %Probability Parameters                            doProbabilities=0;                            doProbBootstrap=0;                            doProbVar=1;                            doProbMeasErrors=1;                            doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                            nBetaProbIterations=1;                            nMeasErrorIterProb=1;                            %Measurement Errors                            SD1 = 9;                            SD2 = 300;                            SD_HospMeasurementErrors = SDMultipleCost*SD1;                            SD_NBarMeasurementErrors = SDMultiplePop*SD2;                            if ~RobustIneq                                NumMoments = 5;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                            else                                NumMoments = 2;                            end;                            lb_temp=-100;                            ub_temp=10000;                            lb=lb_temp*ones(DimBeta,1);                            ub=ub_temp*ones(DimBeta,1);                            options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                            %Starting Points for Search Routines                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                            INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                               ALLINST_NoNjk = INST;                            ALLINST_NoNjk(:,2) = [];                            NBarMkt = zeros(nMkts,1);                            SumCapMkt = zeros(nMkts,1);                            SumCostMkt = zeros(nMkts,1);                            SumISCAPMkt = zeros(nMkts,1);                            for iMkt=1:nMkts                                idx = (iMkt-1)*4+1;                                NBarMkt(iMkt,1) = NBar(idx,1);                                SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                                SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                                SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                                end;                            MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                            if ~(SDMultiplePop == 0)                                MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                            end;                            if usemeaserrorsINST                                PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                                ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                            end;                            if useConstINST                                INST = [ones(nObs,1) ];                                INST_NoContract = [ones(nObs,1)];                                MktINST = [ones(nMkts,1)];                                MktINSTmeas = [ones(nMkts,1)];                            end;                            if useNoCostINST                                NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                                NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                                Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                                MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                                ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                            end;                            nInst = size(INST,2);                            nInstNoContract = size(INST_NoContract,2);                        %==========================================================================                            %PRELIMINARY MOMENT CONSTRUCTIONS====================================================                            %==========================================================================                                DeltaHospCosts = HospRealCosts - HospNewRealCosts;                                DeltaHMOPrem = ( SigmaM_k.*(HMOPrem-HMOCost) - Sigma2M_k.*(HMONewPrem-HMOCost)) .*NBar;                                AbsDeltaNjkInv = abs(ones(nObs,1) ./ DeltaNjk);                                A_Hosp = DeltaNjk + DeltaNjk2;                                A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                C_Hosp = DeltaHospCosts - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                C_HMO = (-1)*(DeltaHMOPrem - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual - Delta_Ej2k);                                if (~IgnoreStructErrors)                                    C_Hosp = C_Hosp - Delta_Ejk;                                    C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                end;                                A_HMO_Orig = A_HMO;                                A_Hosp_Orig = A_Hosp;                                C_HMO_Orig = C_HMO;                                C_Hosp_Orig = C_Hosp;                                DeltaHospTransReal = DeltaNjk.*Tjk+DeltaNjk2.*Tjk2;                                DeltaHMOTransReal =  DeltaNjk.*Tjk+DeltaNj2k.*Tj2k;                                DeltaHospTransPredicted = (DeltaNjk+DeltaNjk2)*Beta_0;                                DeltaHMOTransPredicted =  (DeltaNjk+DeltaNj2k)*Beta_0;                            %==========================================================================                            %BEGIN CONSTRUCTION OF MOMENTS====================================================                            %==========================================================================                            if usemeaserrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                                MeasErrorSinglePoints=0;                            else                                nMeasErrorIter = 1;                            end;                            for idxMeasError=1:nMeasErrorIter                                if usemeaserrors                                    if RedrawMeasErrors                                        iErrorUse = iMonteDraw;                                    else                                        iErrorUse = 1;                                    end;                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                    Etaj = kron(HospMeasurementErrors,ones(2,1));                                    if SDMultiplePop > 0                                        NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                    else                                        NBarMeasurementErrors = zeros(nObs/4, 1);                                    end;                                    Omega = kron(NBarMeasurementErrors,ones(4,1));                                        Psijk_A = gamma * (SigmaM_k.*SigmaH_jk);                                    Psijk_B = gamma * (Sigma2M_k.*Sigma2H_jk);                                    Psijk = Psijk_A-Psijk_B;                                    Psij2k_A = gamma * (SigmaM_k.*SigmaH_j2k);                                    Psij2k_B = gamma * (Sigma2M_k.*Sigma2H_j2k);                                    Psij2k = Psij2k_A-Psij2k_B;                                            Psijk2_A = gamma * (SigmaM_k2.*SigmaH_jk2);                                    Psijk2_B = gamma * (Sigma2M_k2.*Sigma2H_jk2);                                    Psijk2 = Psijk2_A-Psijk2_B;                                            PsiHosp_A = Psijk_A + Psijk2_A;                                    PsiHosp_B = Psijk_B + Psijk2_B;                                    DeltaNjkErr = DeltaNjk + Omega.*Psijk;                                    AbsDeltaNjkErrInv = abs(ones(nObs,1) ./ DeltaNjkErr);                                    DeltaNjk2Err = DeltaNjk2 + Omega.*Psijk2;                                    DeltaNj2kErr = DeltaNj2k + Omega.*Psij2k;                                            A_Hosp = DeltaNjk + DeltaNjk2;                                    A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                    C_Hosp = (Njk+Njk2+Omega.*PsiHosp_A).*(HospCostPerPatient+Etaj) - (N2jk+N2jk2+Omega.*PsiHosp_B).*(HospCostPerPatient2+Etaj) - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                    C_HMO = (-1)*(   ( SigmaM_k.*(HMOPrem-HMOCost)-Sigma2M_k.*(HMONewPrem-HMOCost) ).*(NBar+Omega) - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual- Delta_Ej2k );                                    if (~IgnoreStructErrors)                                        C_Hosp = C_Hosp - Delta_Ejk;                                        C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                    end;                                end;                                %Create Moment Matrices (normal case)=======================================================================                                if ~RobustIneq                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    for MomentID=1:NumMoments                                        % Moments for HMO: If HMO Accepts, should be better off. Moment                                        % A1 for larger hospital; Moment A2 for smaller hospital.                                        if (MomentID<3)                                            for j=1:nMkts                                                for k=1:NumHMO                                                    idx = (j-1)*(NumHosp*NumHMO) + (MomentID-1)*(NumHosp) + k;                                                    hTemp = INST(idx,:)';                                                    hTempNoContract = INST_NoContract(idx,:)';                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_HMO(idx,:) , hTemp);                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_HMO(idx,:) , hTemp);                                                end;                                                Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ 4;                                                W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ 4;                                            end;                                        else                                            % Moments for Hospitals: Hospitals that do contract should be                                            % better off than if they did not contract                                            if (MomentID==3)                                                for j=1:nMkts                                                    Count = 0;                                                    for k=1:(NumHosp*NumHMO)                                                        idx = (j-1)*(NumHosp*NumHMO) + k;                                                        hTemp = INST(idx,:)';                                                        if ISCONT(idx,1)==1                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_Hosp(idx,:) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_Hosp(idx,:) , hTemp);                                                            Count = Count + 1;                                                        end;                                                    end;                                                    if Count==0                                                        Count = 1;                                                    end;                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                    end;                                                end;%ifMomentID==5                                        end;%ifMomentID<5                                             if (MomentID > 3)                                            if (MomentID==4)                                                for j=1:nMkts                                                    for k=1:(NumHosp*NumHMO)                                                       idx = (j-1)*(NumHosp*NumHMO) + k;                                                       hTemp = INST(idx,:)';                                                       Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                       W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                    end;                                                end;                                            end;                                            if MomentID==5                                                if NumMoments >= 2                                                        % Sum of Proift changes if contract should be positive if they                                                    % do contract                                                    for j=1:nMkts                                                        Count = 0;                                                        for k=1:(NumHosp*NumHMO)                                                            idx = (j-1)*(NumHosp*NumHMO) + k;                                                            hTemp = INST(idx,:)';                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                            if ISCONT(idx,1)==1                                                                 Count = Count + 1;                                                            end;                                                        end;                                                        if Count==0                                                            Count = 1;                                                        end;                                                        Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                        W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                           end;                                                end;                                               end;                                        end;                                                                                                           end;%forMomentID=1:NumMoments                                else    %==========================================COMPUTE ROBUST INEQUALITIES: ===========================                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    % Adding change in profits for hospital if do contract and                                     % change in profits for HMO if don't contract                                    for j=1:nMkts                                        for k=1:(NumHosp*NumHMO)                                           idx = (j-1)*(NumHosp*NumHMO) + k;                                           hTemp = INST(idx,:)';                                           Z_AB(:,:,j,1) = Z_AB(:,:,j,1) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                           W_AB(:,:,j,1) = W_AB(:,:,j,1) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                        end;                                    end;                                    if NumMoments >= 2                                            % Sum of Proift changes if contract should be positive if they                                        % do contract                                        for j=1:nMkts                                            Count = 0;                                            for k=1:(NumHosp*NumHMO)                                                idx = (j-1)*(NumHosp*NumHMO) + k;                                                hTemp = INST(idx,:)';                                                Z_AB(:,:,j,2) = Z_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                W_AB(:,:,j,2) = W_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                if ISCONT(idx,1)==1                                                     Count = Count + 1;                                                end;                                            end;                                            if Count==0                                                Count = 1;                                            end;                                            Z_AB(:,:,j,2) = Z_AB(:,:,j,2)/ Count;                                            W_AB(:,:,j,2) = W_AB(:,:,j,2)/ Count;                                                               end;                                    end;                                end;    %if RobustIneq                                %==========================================================================                                ZJtempAB = zeros(nInst,DimBeta,NumMoments);                                WJtempAB = zeros(nInst,1,NumMoments);                                for j=1:nMkts                                    for MomentID=1:NumMoments                                        ZJtempAB(:,:,MomentID) = ZJtempAB(:,:,MomentID) + Z_AB(:,:,j,MomentID)/nMkts;                                        WJtempAB(:,1,MomentID) = WJtempAB(:,1,MomentID) + W_AB(:,1,j,MomentID)/nMkts;                                    end;                                end;                                ZJ =[];                                WJ =[];                                for n=1:NumMoments                                    ZJ = [ZJ;ZJtempAB(:,:,n)];                                    WJ = [WJ;WJtempAB(:,:,n)];                                end;                                %Testing====================================================================================================                                    SinglePoint = 0;                                Beta_S1=Beta_0;                                [BetaMin BetaMax ErrorFlag] = f_fmincon_092605(ZJ,WJ,lb,ub,options,Beta_Start);                                if (ErrorFlag == 0)                                    TEMP = [Beta_0 BetaMin BetaMax];                                else                                    [BetaPoint fval ErrorFlag2] = f_fminconsingle(ZJ,WJ,lb,ub,options,Beta_Start);                                    TEMP = [Beta_0 BetaPoint BetaPoint];                                    display(fval);                                    TJTestStatistic = (nMkts^.5) * (fval);                                    SinglePoint=1;                                end;                                %display(idxMeasError);                                display(TEMP);        %                         if usemeaserrors        %                             MeasErrorBetas(idxMeasError,1) = TEMP(1,2);        %                             MeasErrorBetas(idxMeasError,2) = TEMP(1,3);            %                             if SinglePoint        %                                 MeasErrorSinglePoints = MeasErrorSinglePoints+1;        %                             end;        %                         end;                            end; %END MEASUREMENT ERROR ITERATIONS                            BETA(3).B = [BETA(3).B; TEMP];                %============================================================                %PART 4                %============================================================                            %Flags                            RobustIneq=0;                            IgnoreStructErrors =1;         %Mis-specifies error by not subtracting it out                            doVar = 0;                      %Calculate 95 conf interval                            doTestStatistic=0;                            DimBeta=1;                            nConfInterval_Iterations=200;                            ConfInterval = .95;                            %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                            useConstINST = 1;                            usemeaserrorsINST = 1;                            useNoCostINST = 0;                            %MEASUREMENT ERROR                            usemeaserrors = 1;              %Add Measurement Noise to Moments                            nMeasErrorIter = 1;                            SDMultipleCost = .25^.5;                            SDMultiplePop = .05^.5;                            %SDMultiplePop = 0;                            %Probability Parameters                            doProbabilities=0;                            doProbBootstrap=0;                            doProbVar=1;                            doProbMeasErrors=1;                            doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                            nBetaProbIterations=1;                            nMeasErrorIterProb=1;                            %Measurement Errors                            SD1 = 9;                            SD2 = 300;                            SD_HospMeasurementErrors = SDMultipleCost*SD1;                            SD_NBarMeasurementErrors = SDMultiplePop*SD2;                            if ~RobustIneq                                NumMoments = 5;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                            else                                NumMoments = 2;                            end;                            lb_temp=-100;                            ub_temp=10000;                            lb=lb_temp*ones(DimBeta,1);                            ub=ub_temp*ones(DimBeta,1);                            options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                            %Starting Points for Search Routines                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                            x1 = XALL(iMonteDraw).x1;                            x2 = XALL(iMonteDraw).x2;                                                        NumHosp = 2;                            NumHMO = 2;                            gamma=.075;                            % Import Data %                            x = [x1];                            nObs = size(x,[1]);                            x = [zeros(nObs,1) x];                            % Prepare Data Matrices %                            ID_RunID = x(:,1);                            ID_Iter = x(:,2);                            ID_HMO = x(:,3);                            ID_Hosp = x(:,4);                            NBar = x(:,5);                            ISCONT = x(:,6);                            HospCost_j = x(:,7);                            HospCost_j2 = x(:,8);                            ISCAP_j = x(:,9);                            ISCAP_j2 = x(:,10);                            HospCap_j = x(:,11);                            HospCap_j2 = x(:,12);                            HospChar = x(:,13);                            Tjk = x(:,14);                            Tjk2 = x(:,15);                            Tj2k = x(:,16);                            Njk = x(:,17);                            Njk2 = x(:,18);                            Nj2k = x(:,19);                            HospRealProf = x(:,20);                            HospRealCosts = x(:,21);                            HospNewRealProf = x(:,22);                            HospNewRealCosts = x(:,23);                            HMONewPrem = x(:,24);                            N2jk = x(:,25);                            N2jk2 = x(:,26);                            HMOChar = x(:,27);                            HMOPrem = x(:,28);                            HMOCost = x(:,29);                            HMORealProf = x(:,30);                            SigmaM_k = x(:,31);                            SigmaM_k2 = x(:,32);                            HMONewProf = x(:,33);                            Sigma2M_k = x(:,34);                            Sigma2M_k2 = x(:,35);                            N2jk_temp = x(:,36);                            N2j2k = x(:,37);                            MktStd_k = x(:,38);                            MktStd_k2 = x(:,39);                            HospCap_Mkt = HospCap_j+ HospCap_j2;                            HospCost_j_Wtd = HospCost_j.*(HospCap_j./HospCap_Mkt);                            HospCost_j2_Wtd = HospCost_j2.*(HospCap_j2./HospCap_Mkt);                            HospCost_MktAvg_Wtd = (HospCost_j_Wtd +HospCost_j2_Wtd)/2;                            HospCost_MktAvg = (HospCost_j + HospCost_j2)/2;                            HospCost_DiffAvg = HospCost_j - HospCost_MktAvg;                            HospCost_DiffAvgWts = HospCost_j - HospCost_MktAvg_Wtd;                            HospCost_DiffAvgWts_j2 = HospCost_j2 - HospCost_MktAvg_Wtd;                            %PopPerBed = NBar./(HospCap_j + HospCap_j2);                            SigmaH_jk = zeros(nObs,1);                            SigmaH_j2k = zeros(nObs,1);                            SigmaH_jk2 = zeros(nObs,1);                            Sigma2H_jk = zeros(nObs,1);                            Sigma2H_j2k = zeros(nObs,1);                            Sigma2H_jk2 = zeros(nObs,1);                            for idx=1:nObs                                SigmaH_jk(idx,1) = Njk(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_j2k(idx,1) = Nj2k(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_jk2(idx,1) = Njk2(idx,1)/(SigmaM_k2(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk(idx,1) = N2jk(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_j2k(idx,1) = N2j2k(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk2(idx,1) = N2jk2(idx,1)/(Sigma2M_k2(idx,1)*NBar(idx,1)*gamma);                            end;                            DeltaNjk = Njk-N2jk;                            DeltaNj2k = Nj2k-N2j2k;                            DeltaNjk2 = Njk2-N2jk2;                            nMkts = nObs / 4;                            nContracts = 0;                            for i=1:size(ISCONT,[1])                                if ISCONT(i,1)==1                                    nContracts = nContracts+1;                                end;                            end;                            HClassTemp = [1;1;2;2;];                            HospClass = kron(nMkts,HClassTemp);                            ISCONTj2 = ISCONT;                            ISCONTk2 = ISCONT;                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2(idx,1) = ISCONT(idx+2,1);                                else                                    ISCONTj2(idx,1) = ISCONT(idx-2,1);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2(idx,1) = ISCONT(idx+1,1);                                else                                    ISCONTk2(idx,1) = ISCONT(idx-1,1);                                end;                                end;                            DeltaISCONT = zeros(nObs,1);                            for i=1:nObs                                DeltaISCONT(i,1) = (-1)^(ISCONT(i,1)+1);                                DeltaISCONTj2(i,1) = (-1)^(ISCONTj2(i,1)+1);                                DeltaISCONTk2(i,1) = (-1)^(ISCONTk2(i,1)+1);                            end;                            HospCostPerPatient = zeros(nObs,1);                            HospCostPerPatient2 = zeros(nObs,1);                            for i=1:nObs                                if (Njk(i,1) + Njk2(i,1))>0                                    HospCostPerPatient(i,1) = HospRealCosts(i,1) / (Njk(i,1) + Njk2(i,1));                                end;                                if (N2jk(i,1) + N2jk2(i,1))>0                                        HospCostPerPatient2(i,1) = HospNewRealCosts(i,1) / (N2jk(i,1) + N2jk2(i,1));                                end;                            end;                            %TEMP = (Njk+Njk2).*HospCostsPerPatient - (N2jk+N2jk2) .* HospCostsPerPatient2;                            %AAA=  TEMP-DeltaHospCosts;                            %==========================================================================                            %INSTRUMENTS =========================                            %==========================================================================                            NormInst = [ones(nObs,1) Njk NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                            NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*HospCost_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                            Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*HospCost_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                            MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*HospCost_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                            ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCap_j ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                            CostInteraction = [HospCost_j.*NBar HospCost_j.*HospCap_j HospCost_j.*HospCost_j HospCost_j.*(HospCap_j+HospCap_j2) HospCost_j.*HMOChar HospCost_j.*HospChar];                            SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                            CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                            HospCostsWtd = [HospCost_j_Wtd HospCost_j2_Wtd HospCost_MktAvg HospCost_MktAvg_Wtd];                            INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                               ALLINST_NoNjk = INST;                            ALLINST_NoNjk(:,2) = [];                            NBarMkt = zeros(nMkts,1);                            SumCapMkt = zeros(nMkts,1);                            SumCostMkt = zeros(nMkts,1);                            SumISCAPMkt = zeros(nMkts,1);                            for iMkt=1:nMkts                                idx = (iMkt-1)*4+1;                                NBarMkt(iMkt,1) = NBar(idx,1);                                SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                                SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                                SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                                end;                            MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                            if ~(SDMultiplePop == 0)                                MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                            end;                            if usemeaserrorsINST                                PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                                ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                            end;                            if useConstINST                                INST = [ones(nObs,1) ];                                INST_NoContract = [ones(nObs,1)];                                MktINST = [ones(nMkts,1)];                                MktINSTmeas = [ones(nMkts,1)];                            end;                            if useNoCostINST                                NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                                NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                                Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                                MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                                ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                            end;                            nInst = size(INST,2);                            nInstNoContract = size(INST_NoContract,2);                                                        %==========================================================================                            %PRELIMINARY MOMENT CONSTRUCTIONS====================================================                            %==========================================================================                                DeltaHospCosts = HospRealCosts - HospNewRealCosts;                                DeltaHMOPrem = ( SigmaM_k.*(HMOPrem-HMOCost) - Sigma2M_k.*(HMONewPrem-HMOCost)) .*NBar;                                AbsDeltaNjkInv = abs(ones(nObs,1) ./ DeltaNjk);                                A_Hosp = DeltaNjk + DeltaNjk2;                                A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                C_Hosp = DeltaHospCosts - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                C_HMO = (-1)*(DeltaHMOPrem - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual - Delta_Ej2k);                                if (~IgnoreStructErrors)                                    C_Hosp = C_Hosp - Delta_Ejk;                                    C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                end;                                A_HMO_Orig = A_HMO;                                A_Hosp_Orig = A_Hosp;                                C_HMO_Orig = C_HMO;                                C_Hosp_Orig = C_Hosp;                                DeltaHospTransReal = DeltaNjk.*Tjk+DeltaNjk2.*Tjk2;                                DeltaHMOTransReal =  DeltaNjk.*Tjk+DeltaNj2k.*Tj2k;                                DeltaHospTransPredicted = (DeltaNjk+DeltaNjk2)*Beta_0;                                DeltaHMOTransPredicted =  (DeltaNjk+DeltaNj2k)*Beta_0;                            %==========================================================================                            %BEGIN CONSTRUCTION OF MOMENTS====================================================                            %==========================================================================                            if usemeaserrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                                MeasErrorSinglePoints=0;                            else                                nMeasErrorIter = 1;                            end;                            for idxMeasError=1:nMeasErrorIter                                if usemeaserrors                                    if RedrawMeasErrors                                        iErrorUse = iMonteDraw                                    else                                        iErrorUse = 1;                                    end;                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                    Etaj = kron(HospMeasurementErrors,ones(2,1));                                    if SDMultiplePop > 0                                        NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                    else                                        NBarMeasurementErrors = zeros(nObs/4, 1);                                    end;                                    Omega = kron(NBarMeasurementErrors,ones(4,1));                                        Psijk_A = gamma * (SigmaM_k.*SigmaH_jk);                                    Psijk_B = gamma * (Sigma2M_k.*Sigma2H_jk);                                    Psijk = Psijk_A-Psijk_B;                                    Psij2k_A = gamma * (SigmaM_k.*SigmaH_j2k);                                    Psij2k_B = gamma * (Sigma2M_k.*Sigma2H_j2k);                                    Psij2k = Psij2k_A-Psij2k_B;                                            Psijk2_A = gamma * (SigmaM_k2.*SigmaH_jk2);                                    Psijk2_B = gamma * (Sigma2M_k2.*Sigma2H_jk2);                                    Psijk2 = Psijk2_A-Psijk2_B;                                            PsiHosp_A = Psijk_A + Psijk2_A;                                    PsiHosp_B = Psijk_B + Psijk2_B;                                    DeltaNjkErr = DeltaNjk + Omega.*Psijk;                                    AbsDeltaNjkErrInv = abs(ones(nObs,1) ./ DeltaNjkErr);                                    DeltaNjk2Err = DeltaNjk2 + Omega.*Psijk2;                                    DeltaNj2kErr = DeltaNj2k + Omega.*Psij2k;                                            A_Hosp = DeltaNjk + DeltaNjk2;                                    A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                    C_Hosp = (Njk+Njk2+Omega.*PsiHosp_A).*(HospCostPerPatient+Etaj) - (N2jk+N2jk2+Omega.*PsiHosp_B).*(HospCostPerPatient2+Etaj) - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                    C_HMO = (-1)*(   ( SigmaM_k.*(HMOPrem-HMOCost)-Sigma2M_k.*(HMONewPrem-HMOCost) ).*(NBar+Omega) - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual- Delta_Ej2k );                                    if (~IgnoreStructErrors)                                        C_Hosp = C_Hosp - Delta_Ejk;                                        C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                    end;                                end;                                %Create Moment Matrices (normal case)=======================================================================                                if ~RobustIneq                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    for MomentID=1:NumMoments                                        % Moments for HMO: If HMO Accepts, should be better off. Moment                                        % A1 for larger hospital; Moment A2 for smaller hospital.                                        if (MomentID<3)                                            for j=1:nMkts                                                for k=1:NumHMO                                                    idx = (j-1)*(NumHosp*NumHMO) + (MomentID-1)*(NumHosp) + k;                                                    hTemp = INST(idx,:)';                                                    hTempNoContract = INST_NoContract(idx,:)';                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_HMO(idx,:) , hTemp);                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_HMO(idx,:) , hTemp);                                                end;                                                Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ 4;                                                W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ 4;                                            end;                                        else                                            % Moments for Hospitals: Hospitals that do contract should be                                            % better off than if they did not contract                                            if (MomentID==3)                                                for j=1:nMkts                                                    Count = 0;                                                    for k=1:(NumHosp*NumHMO)                                                        idx = (j-1)*(NumHosp*NumHMO) + k;                                                        hTemp = INST(idx,:)';                                                        if ISCONT(idx,1)==1                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_Hosp(idx,:) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_Hosp(idx,:) , hTemp);                                                            Count = Count + 1;                                                        end;                                                    end;                                                    if Count==0                                                        Count = 1;                                                    end;                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                    end;                                                end;%ifMomentID==5                                        end;%ifMomentID<5                                               if (MomentID > 3)                                            if (MomentID==4)                                                for j=1:nMkts                                                    for k=1:(NumHosp*NumHMO)                                                       idx = (j-1)*(NumHosp*NumHMO) + k;                                                       hTemp = INST(idx,:)';                                                       Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                       W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                    end;                                                end;                                            end;                                            if MomentID==5                                                if NumMoments >= 2                                                        % Sum of Proift changes if contract should be positive if they                                                    % do contract                                                    for j=1:nMkts                                                        Count = 0;                                                        for k=1:(NumHosp*NumHMO)                                                            idx = (j-1)*(NumHosp*NumHMO) + k;                                                            hTemp = INST(idx,:)';                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                            if ISCONT(idx,1)==1                                                                 Count = Count + 1;                                                            end;                                                        end;                                                        if Count==0                                                            Count = 1;                                                        end;                                                        Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                        W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                           end;                                                end;                                               end;                                        end;                                                                                                           end;%forMomentID=1:NumMoments                                else    %==========================================COMPUTE ROBUST INEQUALITIES: ===========================                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    % Adding change in profits for hospital if do contract and                                     % change in profits for HMO if don't contract                                    for j=1:nMkts                                        for k=1:(NumHosp*NumHMO)                                           idx = (j-1)*(NumHosp*NumHMO) + k;                                           hTemp = INST(idx,:)';                                           Z_AB(:,:,j,1) = Z_AB(:,:,j,1) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                           W_AB(:,:,j,1) = W_AB(:,:,j,1) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                        end;                                    end;                                    if NumMoments >= 2                                            % Sum of Proift changes if contract should be positive if they                                        % do contract                                        for j=1:nMkts                                            Count = 0;                                            for k=1:(NumHosp*NumHMO)                                                idx = (j-1)*(NumHosp*NumHMO) + k;                                                hTemp = INST(idx,:)';                                                Z_AB(:,:,j,2) = Z_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                W_AB(:,:,j,2) = W_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                if ISCONT(idx,1)==1                                                     Count = Count + 1;                                                end;                                            end;                                            if Count==0                                                Count = 1;                                            end;                                            Z_AB(:,:,j,2) = Z_AB(:,:,j,2)/ Count;                                            W_AB(:,:,j,2) = W_AB(:,:,j,2)/ Count;                                                               end;                                    end;                                end;    %if RobustIneq                                %==========================================================================                                ZJtempAB = zeros(nInst,DimBeta,NumMoments);                                WJtempAB = zeros(nInst,1,NumMoments);                                for j=1:nMkts                                    for MomentID=1:NumMoments                                        ZJtempAB(:,:,MomentID) = ZJtempAB(:,:,MomentID) + Z_AB(:,:,j,MomentID)/nMkts;                                        WJtempAB(:,1,MomentID) = WJtempAB(:,1,MomentID) + W_AB(:,1,j,MomentID)/nMkts;                                    end;                                end;                                ZJ =[];                                WJ =[];                                for n=1:NumMoments                                    ZJ = [ZJ;ZJtempAB(:,:,n)];                                    WJ = [WJ;WJtempAB(:,:,n)];                                end;                                %Testing====================================================================================================                                    SinglePoint = 0;                                Beta_S1=Beta_0;                                [BetaMin BetaMax ErrorFlag] = f_fmincon_092605(ZJ,WJ,lb,ub,options,Beta_Start);                                if (ErrorFlag == 0)                                    TEMP = [Beta_0 BetaMin BetaMax];                                else                                    [BetaPoint fval ErrorFlag2] = f_fminconsingle(ZJ,WJ,lb,ub,options,Beta_Start);                                    TEMP = [Beta_0 BetaPoint BetaPoint];                                    display(fval);                                    TJTestStatistic = (nMkts^.5) * (fval);                                    SinglePoint=1;                                end;                                %display(idxMeasError);                                display(TEMP);                            end; %END MEASUREMENT ERROR ITERATIONS                            BETA(4).B = [BETA(4).B; TEMP];                        %============================================================                %PART 5                %============================================================                            %Flags                            RobustIneq=0;                            IgnoreStructErrors =1;         %Mis-specifies error by not subtracting it out                            doVar = 0;                      %Calculate 95 conf interval                            doTestStatistic=0;                            DimBeta=1;                            nConfInterval_Iterations=200;                            ConfInterval = .95;                            %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                            useConstINST = 1;                            usemeaserrorsINST = 0;                            useNoCostINST = 1;                            %MEASUREMENT ERROR                            usemeaserrors = 1;              %Add Measurement Noise to Moments                            nMeasErrorIter = 1;                            SDMultipleCost = .25^.5;                            SDMultiplePop = .05^.5;                            SDMultiplePop = 0;                            %Probability Parameters                            doProbabilities=0;                            doProbBootstrap=0;                            doProbVar=1;                            doProbMeasErrors=1;                            doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                            nBetaProbIterations=1;                            nMeasErrorIterProb=1;                            %Measurement Errors                            SD1 = 9;                            SD2 = 300;                            SD_HospMeasurementErrors = SDMultipleCost*SD1;                            SD_NBarMeasurementErrors = SDMultiplePop*SD2;                            if ~RobustIneq                                NumMoments = 5;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                            else                                NumMoments = 2;                            end;                            lb_temp=-100;                            ub_temp=10000;                            lb=lb_temp*ones(DimBeta,1);                            ub=ub_temp*ones(DimBeta,1);                            options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                            %Starting Points for Search Routines                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                                        INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                               ALLINST_NoNjk = INST;                            ALLINST_NoNjk(:,2) = [];                            NBarMkt = zeros(nMkts,1);                            SumCapMkt = zeros(nMkts,1);                            SumCostMkt = zeros(nMkts,1);                            SumISCAPMkt = zeros(nMkts,1);                            for iMkt=1:nMkts                                idx = (iMkt-1)*4+1;                                NBarMkt(iMkt,1) = NBar(idx,1);                                SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                                SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                                SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                                end;                            MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                            if ~(SDMultiplePop == 0)                                MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                            end;                            if usemeaserrorsINST                                PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                                ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                            end;                            if useConstINST                                INST = [ones(nObs,1) ];                                INST_NoContract = [ones(nObs,1)];                                MktINST = [ones(nMkts,1)];                                MktINSTmeas = [ones(nMkts,1)];                            end;                            if useNoCostINST                                NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                                NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                                Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                                MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                                ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                            end;                            nInst = size(INST,2);                            nInstNoContract = size(INST_NoContract,2);                                                                          %====================================================================                            %PRELIMINARY MOMENT CONSTRUCTIONS====================================================                            %==========================================================================                                DeltaHospCosts = HospRealCosts - HospNewRealCosts;                                DeltaHMOPrem = ( SigmaM_k.*(HMOPrem-HMOCost) - Sigma2M_k.*(HMONewPrem-HMOCost)) .*NBar;                                AbsDeltaNjkInv = abs(ones(nObs,1) ./ DeltaNjk);                                A_Hosp = DeltaNjk + DeltaNjk2;                                A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                C_Hosp = DeltaHospCosts - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                C_HMO = (-1)*(DeltaHMOPrem - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual - Delta_Ej2k);                                if (~IgnoreStructErrors)                                    C_Hosp = C_Hosp - Delta_Ejk;                                    C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                end;                                A_HMO_Orig = A_HMO;                                A_Hosp_Orig = A_Hosp;                                C_HMO_Orig = C_HMO;                                C_Hosp_Orig = C_Hosp;                                DeltaHospTransReal = DeltaNjk.*Tjk+DeltaNjk2.*Tjk2;                                DeltaHMOTransReal =  DeltaNjk.*Tjk+DeltaNj2k.*Tj2k;                                DeltaHospTransPredicted = (DeltaNjk+DeltaNjk2)*Beta_0;                                DeltaHMOTransPredicted =  (DeltaNjk+DeltaNj2k)*Beta_0;                            %==========================================================================                            %BEGIN CONSTRUCTION OF MOMENTS====================================================                            %==========================================================================                            if usemeaserrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                                MeasErrorSinglePoints=0;                            else                                nMeasErrorIter = 1;                            end;                            for idxMeasError=1:nMeasErrorIter                                if usemeaserrors                                    if RedrawMeasErrors                                        iErrorUse = iMonteDraw;                                    else                                        iErrorUse = 1;                                    end;                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                    Etaj = kron(HospMeasurementErrors,ones(2,1));                                    if SDMultiplePop > 0                                        NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                    else                                        NBarMeasurementErrors = zeros(nObs/4, 1);                                    end;                                    Omega = kron(NBarMeasurementErrors,ones(4,1));                                        Psijk_A = gamma * (SigmaM_k.*SigmaH_jk);                                    Psijk_B = gamma * (Sigma2M_k.*Sigma2H_jk);                                    Psijk = Psijk_A-Psijk_B;                                    Psij2k_A = gamma * (SigmaM_k.*SigmaH_j2k);                                    Psij2k_B = gamma * (Sigma2M_k.*Sigma2H_j2k);                                    Psij2k = Psij2k_A-Psij2k_B;                                            Psijk2_A = gamma * (SigmaM_k2.*SigmaH_jk2);                                    Psijk2_B = gamma * (Sigma2M_k2.*Sigma2H_jk2);                                    Psijk2 = Psijk2_A-Psijk2_B;                                            PsiHosp_A = Psijk_A + Psijk2_A;                                    PsiHosp_B = Psijk_B + Psijk2_B;                                    DeltaNjkErr = DeltaNjk + Omega.*Psijk;                                    AbsDeltaNjkErrInv = abs(ones(nObs,1) ./ DeltaNjkErr);                                    DeltaNjk2Err = DeltaNjk2 + Omega.*Psijk2;                                    DeltaNj2kErr = DeltaNj2k + Omega.*Psij2k;                                            A_Hosp = DeltaNjk + DeltaNjk2;                                    A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                    C_Hosp = (Njk+Njk2+Omega.*PsiHosp_A).*(HospCostPerPatient+Etaj) - (N2jk+N2jk2+Omega.*PsiHosp_B).*(HospCostPerPatient2+Etaj) - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                    C_HMO = (-1)*(   ( SigmaM_k.*(HMOPrem-HMOCost)-Sigma2M_k.*(HMONewPrem-HMOCost) ).*(NBar+Omega) - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual- Delta_Ej2k );                                    if (~IgnoreStructErrors)                                        C_Hosp = C_Hosp - Delta_Ejk;                                        C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                    end;                                end;                                %Create Moment Matrices (normal case)=======================================================================                                if ~RobustIneq                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    for MomentID=1:NumMoments                                        % Moments for HMO: If HMO Accepts, should be better off. Moment                                        % A1 for larger hospital; Moment A2 for smaller hospital.                                        if (MomentID<3)                                            for j=1:nMkts                                                for k=1:NumHMO                                                    idx = (j-1)*(NumHosp*NumHMO) + (MomentID-1)*(NumHosp) + k;                                                    hTemp = INST(idx,:)';                                                    hTempNoContract = INST_NoContract(idx,:)';                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_HMO(idx,:) , hTemp);                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_HMO(idx,:) , hTemp);                                                end;                                                Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ 4;                                                W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ 4;                                            end;                                        else                                            % Moments for Hospitals: Hospitals that do contract should be                                            % better off than if they did not contract                                            if (MomentID==3)                                                for j=1:nMkts                                                    Count = 0;                                                    for k=1:(NumHosp*NumHMO)                                                        idx = (j-1)*(NumHosp*NumHMO) + k;                                                        hTemp = INST(idx,:)';                                                        if ISCONT(idx,1)==1                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_Hosp(idx,:) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_Hosp(idx,:) , hTemp);                                                            Count = Count + 1;                                                        end;                                                    end;                                                    if Count==0                                                        Count = 1;                                                    end;                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                    end;                                                end;%ifMomentID==5                                        end;%ifMomentID<5                                                  if (MomentID > 3)                                            if (MomentID==4)                                                for j=1:nMkts                                                    for k=1:(NumHosp*NumHMO)                                                       idx = (j-1)*(NumHosp*NumHMO) + k;                                                       hTemp = INST(idx,:)';                                                       Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                       W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                    end;                                                end;                                            end;                                            if MomentID==5                                                if NumMoments >= 2                                                        % Sum of Proift changes if contract should be positive if they                                                    % do contract                                                    for j=1:nMkts                                                        Count = 0;                                                        for k=1:(NumHosp*NumHMO)                                                            idx = (j-1)*(NumHosp*NumHMO) + k;                                                            hTemp = INST(idx,:)';                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                            if ISCONT(idx,1)==1                                                                 Count = Count + 1;                                                            end;                                                        end;                                                        if Count==0                                                            Count = 1;                                                        end;                                                        Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                        W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                           end;                                                end;                                               end;                                        end;                                                                                                           end;%forMomentID=1:NumMoments                                else    %==========================================COMPUTE ROBUST INEQUALITIES: ===========================                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    % Adding change in profits for hospital if do contract and                                     % change in profits for HMO if don't contract                                    for j=1:nMkts                                        for k=1:(NumHosp*NumHMO)                                           idx = (j-1)*(NumHosp*NumHMO) + k;                                           hTemp = INST(idx,:)';                                           Z_AB(:,:,j,1) = Z_AB(:,:,j,1) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                           W_AB(:,:,j,1) = W_AB(:,:,j,1) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                        end;                                    end;                                    if NumMoments >= 2                                            % Sum of Proift changes if contract should be positive if they                                        % do contract                                        for j=1:nMkts                                            Count = 0;                                            for k=1:(NumHosp*NumHMO)                                                idx = (j-1)*(NumHosp*NumHMO) + k;                                                hTemp = INST(idx,:)';                                                Z_AB(:,:,j,2) = Z_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                W_AB(:,:,j,2) = W_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                if ISCONT(idx,1)==1                                                     Count = Count + 1;                                                end;                                            end;                                            if Count==0                                                Count = 1;                                            end;                                            Z_AB(:,:,j,2) = Z_AB(:,:,j,2)/ Count;                                            W_AB(:,:,j,2) = W_AB(:,:,j,2)/ Count;                                                               end;                                    end;                                end;    %if RobustIneq                                %==========================================================================                                ZJtempAB = zeros(nInst,DimBeta,NumMoments);                                WJtempAB = zeros(nInst,1,NumMoments);                                for j=1:nMkts                                    for MomentID=1:NumMoments                                        ZJtempAB(:,:,MomentID) = ZJtempAB(:,:,MomentID) + Z_AB(:,:,j,MomentID)/nMkts;                                        WJtempAB(:,1,MomentID) = WJtempAB(:,1,MomentID) + W_AB(:,1,j,MomentID)/nMkts;                                    end;                                end;                                ZJ =[];                                WJ =[];                                for n=1:NumMoments                                    ZJ = [ZJ;ZJtempAB(:,:,n)];                                    WJ = [WJ;WJtempAB(:,:,n)];                                end;                                %Testing====================================================================================================                                    SinglePoint = 0;                                Beta_S1=Beta_0;                                [BetaMin BetaMax ErrorFlag] = f_fmincon_092605(ZJ,WJ,lb,ub,options,Beta_Start);                                if (ErrorFlag == 0)                                    TEMP = [Beta_0 BetaMin BetaMax];                                else                                    [BetaPoint fval ErrorFlag2] = f_fminconsingle(ZJ,WJ,lb,ub,options,Beta_Start);                                    TEMP = [Beta_0 BetaPoint BetaPoint];                                    display(fval);                                    TJTestStatistic = (nMkts^.5) * (fval);                                    SinglePoint=1;                                end;                                %display(idxMeasError);                                display(TEMP);        %                         if usemeaserrors        %                             MeasErrorBetas(idxMeasError,1) = TEMP(1,2);        %                             MeasErrorBetas(idxMeasError,2) = TEMP(1,3);            %                             if SinglePoint        %                                 MeasErrorSinglePoints = MeasErrorSinglePoints+1;        %                             end;        %                         end;                            end; %END MEASUREMENT ERROR ITERATIONS                            BETA(5).B = [BETA(5).B; TEMP];                                                        end; %doParts1to5                %============================================================                %PART 6                %============================================================                            %Flags                            RobustIneq=1;                            IgnoreStructErrors =1;         %Mis-specifies error by not subtracting it out                            doVar = 0;                      %Calculate 95 conf interval                            doTestStatistic=0;                            DimBeta=1;                            nConfInterval_Iterations=200;                            ConfInterval = .95;                            %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                            useConstINST = 1;                            usemeaserrorsINST = 0;                            useNoCostINST = 1;                            %MEASUREMENT ERROR                            usemeaserrors = 1;              %Add Measurement Noise to Moments                            nMeasErrorIter = 1;                            SDMultipleCost = .25^.5;                            SDMultiplePop = .05^.5;                            SDMultiplePop = 0;                            %Probability Parameters                            doProbabilities=0;                            doProbBootstrap=0;                            doProbVar=1;                            doProbMeasErrors=1;                            doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                            nBetaProbIterations=1;                            nMeasErrorIterProb=1;                            %Measurement Errors                            SD1 = 9;                            SD2 = 300;                            SD_HospMeasurementErrors = SDMultipleCost*SD1;                            SD_NBarMeasurementErrors = SDMultiplePop*SD2;                            if ~RobustIneq                                NumMoments = 5;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                            else                                NumMoments = 2;                            end;                            lb_temp=-100;                            ub_temp=10000;                            lb=lb_temp*ones(DimBeta,1);                            ub=ub_temp*ones(DimBeta,1);                            options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                            %Starting Points for Search Routines                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                            x1 = XALL(iMonteDraw).x1;                            x2 = XALL(iMonteDraw).x2;                                                        NumHosp = 2;                            NumHMO = 2;                            gamma=.075;                            % Import Data %                            x = [x1];                            nObs = size(x,[1]);                            x = [zeros(nObs,1) x];                            % Prepare Data Matrices %                            ID_RunID = x(:,1);                            ID_Iter = x(:,2);                            ID_HMO = x(:,3);                            ID_Hosp = x(:,4);                            NBar = x(:,5);                            ISCONT = x(:,6);                            HospCost_j = x(:,7);                            HospCost_j2 = x(:,8);                            ISCAP_j = x(:,9);                            ISCAP_j2 = x(:,10);                            HospCap_j = x(:,11);                            HospCap_j2 = x(:,12);                            HospChar = x(:,13);                            Tjk = x(:,14);                            Tjk2 = x(:,15);                            Tj2k = x(:,16);                            Njk = x(:,17);                            Njk2 = x(:,18);                            Nj2k = x(:,19);                            HospRealProf = x(:,20);                            HospRealCosts = x(:,21);                            HospNewRealProf = x(:,22);                            HospNewRealCosts = x(:,23);                            HMONewPrem = x(:,24);                            N2jk = x(:,25);                            N2jk2 = x(:,26);                            HMOChar = x(:,27);                            HMOPrem = x(:,28);                            HMOCost = x(:,29);                            HMORealProf = x(:,30);                            SigmaM_k = x(:,31);                            SigmaM_k2 = x(:,32);                            HMONewProf = x(:,33);                            Sigma2M_k = x(:,34);                            Sigma2M_k2 = x(:,35);                            N2jk_temp = x(:,36);                            N2j2k = x(:,37);                            MktStd_k = x(:,38);                            MktStd_k2 = x(:,39);                            HospCap_Mkt = HospCap_j+ HospCap_j2;                            HospCost_j_Wtd = HospCost_j.*(HospCap_j./HospCap_Mkt);                            HospCost_j2_Wtd = HospCost_j2.*(HospCap_j2./HospCap_Mkt);                            HospCost_MktAvg_Wtd = (HospCost_j_Wtd +HospCost_j2_Wtd)/2;                            HospCost_MktAvg = (HospCost_j + HospCost_j2)/2;                            HospCost_DiffAvg = HospCost_j - HospCost_MktAvg;                            HospCost_DiffAvgWts = HospCost_j - HospCost_MktAvg_Wtd;                            HospCost_DiffAvgWts_j2 = HospCost_j2 - HospCost_MktAvg_Wtd;                            %PopPerBed = NBar./(HospCap_j + HospCap_j2);                            SigmaH_jk = zeros(nObs,1);                            SigmaH_j2k = zeros(nObs,1);                            SigmaH_jk2 = zeros(nObs,1);                            Sigma2H_jk = zeros(nObs,1);                            Sigma2H_j2k = zeros(nObs,1);                            Sigma2H_jk2 = zeros(nObs,1);                            for idx=1:nObs                                SigmaH_jk(idx,1) = Njk(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_j2k(idx,1) = Nj2k(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_jk2(idx,1) = Njk2(idx,1)/(SigmaM_k2(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk(idx,1) = N2jk(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_j2k(idx,1) = N2j2k(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk2(idx,1) = N2jk2(idx,1)/(Sigma2M_k2(idx,1)*NBar(idx,1)*gamma);                            end;                            DeltaNjk = Njk-N2jk;                            DeltaNj2k = Nj2k-N2j2k;                            DeltaNjk2 = Njk2-N2jk2;                            nMkts = nObs / 4;                            nContracts = 0;                            for i=1:size(ISCONT,[1])                                if ISCONT(i,1)==1                                    nContracts = nContracts+1;                                end;                            end;                            HClassTemp = [1;1;2;2;];                            HospClass = kron(nMkts,HClassTemp);                            ISCONTj2 = ISCONT;                            ISCONTk2 = ISCONT;                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2(idx,1) = ISCONT(idx+2,1);                                else                                    ISCONTj2(idx,1) = ISCONT(idx-2,1);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2(idx,1) = ISCONT(idx+1,1);                                else                                    ISCONTk2(idx,1) = ISCONT(idx-1,1);                                end;                                end;                            DeltaISCONT = zeros(nObs,1);                            for i=1:nObs                                DeltaISCONT(i,1) = (-1)^(ISCONT(i,1)+1);                                DeltaISCONTj2(i,1) = (-1)^(ISCONTj2(i,1)+1);                                DeltaISCONTk2(i,1) = (-1)^(ISCONTk2(i,1)+1);                            end;                            HospCostPerPatient = zeros(nObs,1);                            HospCostPerPatient2 = zeros(nObs,1);                            for i=1:nObs                                if (Njk(i,1) + Njk2(i,1))>0                                    HospCostPerPatient(i,1) = HospRealCosts(i,1) / (Njk(i,1) + Njk2(i,1));                                end;                                if (N2jk(i,1) + N2jk2(i,1))>0                                        HospCostPerPatient2(i,1) = HospNewRealCosts(i,1) / (N2jk(i,1) + N2jk2(i,1));                                end;                            end;                            %TEMP = (Njk+Njk2).*HospCostsPerPatient - (N2jk+N2jk2) .* HospCostsPerPatient2;                            %AAA=  TEMP-DeltaHospCosts;                            %==========================================================================                            %INSTRUMENTS =========================                            %==========================================================================                            NormInst = [ones(nObs,1) Njk NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                            NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*HospCost_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                            Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*HospCost_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                            MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*HospCost_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                            ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCap_j ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                            CostInteraction = [HospCost_j.*NBar HospCost_j.*HospCap_j HospCost_j.*HospCost_j HospCost_j.*(HospCap_j+HospCap_j2) HospCost_j.*HMOChar HospCost_j.*HospChar];                            SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                            CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                            HospCostsWtd = [HospCost_j_Wtd HospCost_j2_Wtd HospCost_MktAvg HospCost_MktAvg_Wtd];                                                                                    INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                               ALLINST_NoNjk = INST;                            ALLINST_NoNjk(:,2) = [];                            NBarMkt = zeros(nMkts,1);                            SumCapMkt = zeros(nMkts,1);                            SumCostMkt = zeros(nMkts,1);                            SumISCAPMkt = zeros(nMkts,1);                            for iMkt=1:nMkts                                idx = (iMkt-1)*4+1;                                NBarMkt(iMkt,1) = NBar(idx,1);                                SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                                SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                                SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                                end;                            MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                            if ~(SDMultiplePop == 0)                                MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                            end;                            if usemeaserrorsINST                                PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                                ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                            end;                            if useConstINST                                INST = [ones(nObs,1) ];                                INST_NoContract = [ones(nObs,1)];                                MktINST = [ones(nMkts,1)];                                MktINSTmeas = [ones(nMkts,1)];                            end;                            if useNoCostINST                                NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                                NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                                Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                                MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                                ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                            end;                            nInst = size(INST,2);                            nInstNoContract = size(INST_NoContract,2);                            %==========================================================================                            %ERROR CALCULATIONS========================================================                            %==========================================================================                            useTotalTransfers = 1;                            %Calculate distribution of errors using total transfers (need to account                            %for Njk/N2jk issue                            if useTotalTransfers                                NNjk=Njk+N2jk;                                NNj2k=NNjk;                                NNjk2=NNjk;                                NN2jk=NNjk;                                NN2j2k=NNjk;                                NN2jk2=NNjk;                                for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        NNj2k(idx,1) = NNjk(idx+2,1);                                    else                                        NNj2k(idx,1) = NNjk(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        NNjk2(idx,1) = NNjk(idx+1,1);                                    else                                        NNjk2(idx,1) = NNjk(idx-1,1);                                    end;                                    end;                                Beta_0 = TrueBeta0;                                Beta = TrueBeta;                                %                                Tjk_NEW = (NNjk.*Tjk - X*Beta + NNjk*Beta_0)./NNjk;                                Tjk_NEW = (NNjk.*Tjk - X*TrueBeta + NNjk*TrueBeta0)./NNjk;                                Tj2k_NEW = Tjk_NEW;                                Tjk2_NEW = Tjk_NEW;                                 Tjk_Residual = Tjk - Tjk_NEW;                                Tj2k_Residual = Tjk_Residual;                                Tjk2_Residual = Tjk_Residual;                                    for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx+2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx+2,1);                                    else                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx-2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx+1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx+1,1);                                    else                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx-1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx-1,1);                                    end;                                    end;                                  Ejk = Njk.* Tjk_NEW - Njk * Beta_0;                                    Ej2k = Nj2k.*Tj2k_NEW - Nj2k * Beta_0;                                    Ejk2 = Njk2.*Tjk2_NEW - Njk2 * Beta_0;                                EjkALL = NNjk.* Tjk_NEW - NNjk * Beta_0;                                                                                                    E2jk = N2jk.*Tjk_NEW - N2jk * Beta_0;                                E2j2k = N2j2k.*Tj2k_NEW - N2j2k * Beta_0;                                    E2jk2 = N2jk2.*Tjk2_NEW - N2jk2 * Beta_0;                                   Delta_Ejk = Ejk - E2jk;                                Delta_Ej2k = Ej2k - E2j2k;                                Delta_Ejk2 = Ejk2 - E2jk2;                            else                                cons = ones(nObs,1);                                Beta_0 = (inv(cons'*cons)*(cons'*(Tjk)));                                        Ejk = Tjk - Beta_0;                                  Ej2k = Tj2k - Beta_0;                                Ejk2 = Tjk2 - Beta_0;                            end;                            Err2=zeros(nMkts,4);                % Residuals in nMkts x 4 form. Reshaped Err.                            for i=0:nMkts-1                                for j=1:4                                    Err2(i+1,j) = EjkALL(i*4+j);                                end;                            end;                            ErrMean = mean(Err2)';                            VarErr=zeros(4,4);                            for n=1:nMkts                                SSample = Err2(n,:)';                                VarErr = VarErr + ((SSample-ErrMean)*(SSample-ErrMean)');                            end;                            VarErr = VarErr / (nMkts);                            CholVarErr = chol(VarErr);                                    %display(Beta_0);                            Beta_Start = [Beta_Start Beta_0];                            NumBetaStart = size(Beta_Start,2);                                                          %==========================================================================                            %PRELIMINARY MOMENT CONSTRUCTIONS====================================================                            %==========================================================================                                DeltaHospCosts = HospRealCosts - HospNewRealCosts;                                DeltaHMOPrem = ( SigmaM_k.*(HMOPrem-HMOCost) - Sigma2M_k.*(HMONewPrem-HMOCost)) .*NBar;                                AbsDeltaNjkInv = abs(ones(nObs,1) ./ DeltaNjk);                                A_Hosp = DeltaNjk + DeltaNjk2;                                A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                C_Hosp = DeltaHospCosts - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                C_HMO = (-1)*(DeltaHMOPrem - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual - Delta_Ej2k);                                if (~IgnoreStructErrors)                                    C_Hosp = C_Hosp - Delta_Ejk;                                    C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                end;                                A_HMO_Orig = A_HMO;                                A_Hosp_Orig = A_Hosp;                                C_HMO_Orig = C_HMO;                                C_Hosp_Orig = C_Hosp;                                DeltaHospTransReal = DeltaNjk.*Tjk+DeltaNjk2.*Tjk2;                                DeltaHMOTransReal =  DeltaNjk.*Tjk+DeltaNj2k.*Tj2k;                                DeltaHospTransPredicted = (DeltaNjk+DeltaNjk2)*Beta_0;                                DeltaHMOTransPredicted =  (DeltaNjk+DeltaNj2k)*Beta_0;                            %==========================================================================                            %BEGIN CONSTRUCTION OF MOMENTS====================================================                            %==========================================================================                            if usemeaserrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                                MeasErrorSinglePoints=0;                            else                                nMeasErrorIter = 1;                            end;                            for idxMeasError=1:nMeasErrorIter                                if usemeaserrors                                    if RedrawMeasErrors                                        iErrorUse = iMonteDraw;                                    else                                        iErrorUse = 1;                                    end;                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                    Etaj = kron(HospMeasurementErrors,ones(2,1));                                    if SDMultiplePop > 0                                        NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                    else                                        NBarMeasurementErrors = zeros(nObs/4, 1);                                    end;                                    Omega = kron(NBarMeasurementErrors,ones(4,1));                                        Psijk_A = gamma * (SigmaM_k.*SigmaH_jk);                                    Psijk_B = gamma * (Sigma2M_k.*Sigma2H_jk);                                    Psijk = Psijk_A-Psijk_B;                                    Psij2k_A = gamma * (SigmaM_k.*SigmaH_j2k);                                    Psij2k_B = gamma * (Sigma2M_k.*Sigma2H_j2k);                                    Psij2k = Psij2k_A-Psij2k_B;                                            Psijk2_A = gamma * (SigmaM_k2.*SigmaH_jk2);                                    Psijk2_B = gamma * (Sigma2M_k2.*Sigma2H_jk2);                                    Psijk2 = Psijk2_A-Psijk2_B;                                            PsiHosp_A = Psijk_A + Psijk2_A;                                    PsiHosp_B = Psijk_B + Psijk2_B;                                    DeltaNjkErr = DeltaNjk + Omega.*Psijk;                                    AbsDeltaNjkErrInv = abs(ones(nObs,1) ./ DeltaNjkErr);                                    DeltaNjk2Err = DeltaNjk2 + Omega.*Psijk2;                                    DeltaNj2kErr = DeltaNj2k + Omega.*Psij2k;                                            A_Hosp = DeltaNjk + DeltaNjk2;                                    A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                    C_Hosp = (Njk+Njk2+Omega.*PsiHosp_A).*(HospCostPerPatient+Etaj) - (N2jk+N2jk2+Omega.*PsiHosp_B).*(HospCostPerPatient2+Etaj) - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                    C_HMO = (-1)*(   ( SigmaM_k.*(HMOPrem-HMOCost)-Sigma2M_k.*(HMONewPrem-HMOCost) ).*(NBar+Omega) - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual- Delta_Ej2k );                                    if (~IgnoreStructErrors)                                        C_Hosp = C_Hosp - Delta_Ejk;                                        C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                    end;                                end;                                %Create Moment Matrices (normal case)=======================================================================                                if ~RobustIneq                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    for MomentID=1:NumMoments                                        % Moments for HMO: If HMO Accepts, should be better off. Moment                                        % A1 for larger hospital; Moment A2 for smaller hospital.                                        if (MomentID<3)                                            for j=1:nMkts                                                for k=1:NumHMO                                                    idx = (j-1)*(NumHosp*NumHMO) + (MomentID-1)*(NumHosp) + k;                                                    hTemp = INST(idx,:)';                                                    hTempNoContract = INST_NoContract(idx,:)';                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_HMO(idx,:) , hTemp);                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_HMO(idx,:) , hTemp);                                                end;                                                Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ 4;                                                W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ 4;                                            end;                                        else                                            % Moments for Hospitals: Hospitals that do contract should be                                            % better off than if they did not contract                                            if (MomentID==3)                                                for j=1:nMkts                                                    Count = 0;                                                    for k=1:(NumHosp*NumHMO)                                                        idx = (j-1)*(NumHosp*NumHMO) + k;                                                        hTemp = INST(idx,:)';                                                        if ISCONT(idx,1)==1                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_Hosp(idx,:) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_Hosp(idx,:) , hTemp);                                                            Count = Count + 1;                                                        end;                                                    end;                                                    if Count==0                                                        Count = 1;                                                    end;                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                    end;                                                end;%ifMomentID==3                                        end;%ifMomentID<3                                             if (MomentID > 3)                                            if (MomentID==4)                                                for j=1:nMkts                                                    for k=1:(NumHosp*NumHMO)                                                       idx = (j-1)*(NumHosp*NumHMO) + k;                                                       hTemp = INST(idx,:)';                                                       Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                       W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                    end;                                                end;                                            end;                                            if MomentID==5                                                if NumMoments >= 2                                                        % Sum of Proift changes if contract should be positive if they                                                    % do contract                                                    for j=1:nMkts                                                        Count = 0;                                                        for k=1:(NumHosp*NumHMO)                                                            idx = (j-1)*(NumHosp*NumHMO) + k;                                                            hTemp = INST(idx,:)';                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                            if ISCONT(idx,1)==1                                                                 Count = Count + 1;                                                            end;                                                        end;                                                        if Count==0                                                            Count = 1;                                                        end;                                                        Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                        W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                           end;                                                end;                                               end;                                        end;                                                                            end;%forMomentID=1:NumMoments                                else    %==========================================COMPUTE ROBUST INEQUALITIES: ===========================                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    % Adding change in profits for hospital if do contract and                                     % change in profits for HMO if don't contract                                    for j=1:nMkts                                        for k=1:(NumHosp*NumHMO)                                           idx = (j-1)*(NumHosp*NumHMO) + k;                                           hTemp = INST(idx,:)';                                           Z_AB(:,:,j,1) = Z_AB(:,:,j,1) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                           W_AB(:,:,j,1) = W_AB(:,:,j,1) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                        end;                                    end;                                    if NumMoments >= 2                                            % Sum of Proift changes if contract should be positive if they                                        % do contract                                        for j=1:nMkts                                            Count = 0;                                            for k=1:(NumHosp*NumHMO)                                                idx = (j-1)*(NumHosp*NumHMO) + k;                                                hTemp = INST(idx,:)';                                                Z_AB(:,:,j,2) = Z_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                W_AB(:,:,j,2) = W_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                if ISCONT(idx,1)==1                                                     Count = Count + 1;                                                end;                                            end;                                            if Count==0                                                Count = 1;                                            end;                                            Z_AB(:,:,j,2) = Z_AB(:,:,j,2)/ Count;                                            W_AB(:,:,j,2) = W_AB(:,:,j,2)/ Count;                                                               end;                                    end;                                end;    %if RobustIneq                                %==========================================================================                                ZJtempAB = zeros(nInst,DimBeta,NumMoments);                                WJtempAB = zeros(nInst,1,NumMoments);                                for j=1:nMkts                                    for MomentID=1:NumMoments                                        ZJtempAB(:,:,MomentID) = ZJtempAB(:,:,MomentID) + Z_AB(:,:,j,MomentID)/nMkts;                                        WJtempAB(:,1,MomentID) = WJtempAB(:,1,MomentID) + W_AB(:,1,j,MomentID)/nMkts;                                    end;                                end;                                ZJ =[];                                WJ =[];                                for n=1:NumMoments                                    ZJ = [ZJ;ZJtempAB(:,:,n)];                                    WJ = [WJ;WJtempAB(:,:,n)];                                end;                                %Testing====================================================================================================                                    SinglePoint = 0;                                Beta_S1=Beta_0;                                [BetaMin BetaMax ErrorFlag] = f_fmincon_092605(ZJ,WJ,lb,ub,options,Beta_Start);                                if (ErrorFlag == 0)                                    TEMP = [Beta_0 BetaMin 0];                                else                                    [BetaPoint fval ErrorFlag2] = f_fminconsingle(ZJ,WJ,lb,ub,options,Beta_Start);                                    TEMP = [Beta_0 BetaPoint BetaPoint];                                    display(fval);                                    TJTestStatistic = (nMkts^.5) * (fval);                                    SinglePoint=1;                                end;                                %display(idxMeasError);                                display(TEMP);                            end; %END MEASUREMENT ERROR ITERATIONS                            BETA(6).B = [BETA(6).B; TEMP];                                            %============================================================                %PART 7                %============================================================                            %Flags                            RobustIneq=1;                            IgnoreStructErrors =1;         %Mis-specifies error by not subtracting it out                            doVar = 0;                      %Calculate 95 conf interval                            doTestStatistic=0;                            DimBeta=1;                            nConfInterval_Iterations=200;                            ConfInterval = .95;                            %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                            useConstINST = 1;                            usemeaserrorsINST = 1;                            useNoCostINST = 0;                            %MEASUREMENT ERROR                            usemeaserrors = 1;              %Add Measurement Noise to Moments                            nMeasErrorIter = 1;                            SDMultipleCost = .25^.5;                            SDMultiplePop = .05^.5;                            %SDMultiplePop = 0;                            %Probability Parameters                            doProbabilities=0;                            doProbBootstrap=0;                            doProbVar=1;                            doProbMeasErrors=1;                            doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                            nBetaProbIterations=1;                            nMeasErrorIterProb=1;                            %Measurement Errors                            SD1 = 9;                            SD2 = 300;                            SD_HospMeasurementErrors = SDMultipleCost*SD1;                            SD_NBarMeasurementErrors = SDMultiplePop*SD2;                            if ~RobustIneq                                NumMoments = 5;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                            else                                NumMoments = 2;                            end;                            lb_temp=-100;                            ub_temp=10000;                            lb=lb_temp*ones(DimBeta,1);                            ub=ub_temp*ones(DimBeta,1);                            options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                            %Starting Points for Search Routines                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                                                      INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                               ALLINST_NoNjk = INST;                            ALLINST_NoNjk(:,2) = [];                            NBarMkt = zeros(nMkts,1);                            SumCapMkt = zeros(nMkts,1);                            SumCostMkt = zeros(nMkts,1);                            SumISCAPMkt = zeros(nMkts,1);                            for iMkt=1:nMkts                                idx = (iMkt-1)*4+1;                                NBarMkt(iMkt,1) = NBar(idx,1);                                SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                                SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                                SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                                end;                            MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                            if ~(SDMultiplePop == 0)                                MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                            end;                            if usemeaserrorsINST                                PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                                ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                            end;                            if useConstINST                                INST = [ones(nObs,1) ];                                INST_NoContract = [ones(nObs,1)];                                MktINST = [ones(nMkts,1)];                                MktINSTmeas = [ones(nMkts,1)];                            end;                            if useNoCostINST                                NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                                NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                                Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                                MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                                ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                                SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                                CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                                INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                                INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                            end;                            nInst = size(INST,2);                            nInstNoContract = size(INST_NoContract,2);                         %=================================================================                            %PRELIMINARY MOMENT CONSTRUCTIONS====================================================                            %==========================================================================                                DeltaHospCosts = HospRealCosts - HospNewRealCosts;                                DeltaHMOPrem = ( SigmaM_k.*(HMOPrem-HMOCost) - Sigma2M_k.*(HMONewPrem-HMOCost)) .*NBar;                                AbsDeltaNjkInv = abs(ones(nObs,1) ./ DeltaNjk);                                A_Hosp = DeltaNjk + DeltaNjk2;                                A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                C_Hosp = DeltaHospCosts - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                C_HMO = (-1)*(DeltaHMOPrem - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual - Delta_Ej2k);                                if (~IgnoreStructErrors)                                    C_Hosp = C_Hosp - Delta_Ejk;                                    C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                end;                                A_HMO_Orig = A_HMO;                                A_Hosp_Orig = A_Hosp;                                C_HMO_Orig = C_HMO;                                C_Hosp_Orig = C_Hosp;                                DeltaHospTransReal = DeltaNjk.*Tjk+DeltaNjk2.*Tjk2;                                DeltaHMOTransReal =  DeltaNjk.*Tjk+DeltaNj2k.*Tj2k;                                DeltaHospTransPredicted = (DeltaNjk+DeltaNjk2)*Beta_0;                                DeltaHMOTransPredicted =  (DeltaNjk+DeltaNj2k)*Beta_0;                            %==========================================================================                            %BEGIN CONSTRUCTION OF MOMENTS====================================================                            %==========================================================================                            if usemeaserrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                                MeasErrorSinglePoints=0;                            else                                nMeasErrorIter = 1;                            end;                            for idxMeasError=1:nMeasErrorIter                                if usemeaserrors                                    if RedrawMeasErrors                                        iErrorUse = iMonteDraw                                    else                                        iErrorUse = 1;                                    end;                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                    Etaj = kron(HospMeasurementErrors,ones(2,1));                                    if SDMultiplePop > 0                                        NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                    else                                        NBarMeasurementErrors = zeros(nObs/4, 1);                                    end;                                    Omega = kron(NBarMeasurementErrors,ones(4,1));                                        Psijk_A = gamma * (SigmaM_k.*SigmaH_jk);                                    Psijk_B = gamma * (Sigma2M_k.*Sigma2H_jk);                                    Psijk = Psijk_A-Psijk_B;                                    Psij2k_A = gamma * (SigmaM_k.*SigmaH_j2k);                                    Psij2k_B = gamma * (Sigma2M_k.*Sigma2H_j2k);                                    Psij2k = Psij2k_A-Psij2k_B;                                            Psijk2_A = gamma * (SigmaM_k2.*SigmaH_jk2);                                    Psijk2_B = gamma * (Sigma2M_k2.*Sigma2H_jk2);                                    Psijk2 = Psijk2_A-Psijk2_B;                                            PsiHosp_A = Psijk_A + Psijk2_A;                                    PsiHosp_B = Psijk_B + Psijk2_B;                                    DeltaNjkErr = DeltaNjk + Omega.*Psijk;                                    AbsDeltaNjkErrInv = abs(ones(nObs,1) ./ DeltaNjkErr);                                    DeltaNjk2Err = DeltaNjk2 + Omega.*Psijk2;                                    DeltaNj2kErr = DeltaNj2k + Omega.*Psij2k;                                            A_Hosp = DeltaNjk + DeltaNjk2;                                    A_HMO = (-1) * (DeltaNjk + DeltaNj2k);                                    C_Hosp = (Njk+Njk2+Omega.*PsiHosp_A).*(HospCostPerPatient+Etaj) - (N2jk+N2jk2+Omega.*PsiHosp_B).*(HospCostPerPatient2+Etaj) - DeltaNjk.*Tjk_Residual - DeltaNjk2.*Tjk2_Residual - Delta_Ejk2;                                    C_HMO = (-1)*(   ( SigmaM_k.*(HMOPrem-HMOCost)-Sigma2M_k.*(HMONewPrem-HMOCost) ).*(NBar+Omega) - DeltaNjk.*Tjk_Residual - DeltaNj2k.*Tj2k_Residual- Delta_Ej2k );                                    if (~IgnoreStructErrors)                                        C_Hosp = C_Hosp - Delta_Ejk;                                        C_HMO = C_HMO - (-1)*(Delta_Ejk);          %Error term is "added" to C_HMO, which is subtracted from profits                                    end;                                end;                                %Create Moment Matrices (normal case)=======================================================================                                if ~RobustIneq                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    for MomentID=1:NumMoments                                        % Moments for HMO: If HMO Accepts, should be better off. Moment                                        % A1 for larger hospital; Moment A2 for smaller hospital.                                        if (MomentID<3)                                            for j=1:nMkts                                                for k=1:NumHMO                                                    idx = (j-1)*(NumHosp*NumHMO) + (MomentID-1)*(NumHosp) + k;                                                    hTemp = INST(idx,:)';                                                    hTempNoContract = INST_NoContract(idx,:)';                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_HMO(idx,:) , hTemp);                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_HMO(idx,:) , hTemp);                                                end;                                                Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ 4;                                                W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ 4;                                            end;                                        else                                            % Moments for Hospitals: Hospitals that do contract should be                                            % better off than if they did not contract                                            if (MomentID==3)                                                for j=1:nMkts                                                    Count = 0;                                                    for k=1:(NumHosp*NumHMO)                                                        idx = (j-1)*(NumHosp*NumHMO) + k;                                                        hTemp = INST(idx,:)';                                                        if ISCONT(idx,1)==1                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( A_Hosp(idx,:) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( C_Hosp(idx,:) , hTemp);                                                            Count = Count + 1;                                                        end;                                                    end;                                                    if Count==0                                                        Count = 1;                                                    end;                                                    Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                    W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                    end;                                                end;%ifMomentID==3                                        end;%ifMomentID<3                                              if (MomentID > 3)                                            if (MomentID==4)                                                for j=1:nMkts                                                    for k=1:(NumHosp*NumHMO)                                                       idx = (j-1)*(NumHosp*NumHMO) + k;                                                       hTemp = INST(idx,:)';                                                       Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                       W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                                    end;                                                end;                                            end;                                            if MomentID==5                                                if NumMoments >= 2                                                        % Sum of Proift changes if contract should be positive if they                                                    % do contract                                                    for j=1:nMkts                                                        Count = 0;                                                        for k=1:(NumHosp*NumHMO)                                                            idx = (j-1)*(NumHosp*NumHMO) + k;                                                            hTemp = INST(idx,:)';                                                            Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                            W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                            if ISCONT(idx,1)==1                                                                 Count = Count + 1;                                                            end;                                                        end;                                                        if Count==0                                                            Count = 1;                                                        end;                                                        Z_AB(:,:,j,MomentID) = Z_AB(:,:,j,MomentID)/ Count;                                                        W_AB(:,:,j,MomentID) = W_AB(:,:,j,MomentID)/ Count;                                                                           end;                                                end;                                               end;                                        end;                                    end;%forMomentID=1:NumMoments                                else    %==========================================COMPUTE ROBUST INEQUALITIES: ===========================                                    Z_AB = zeros(nInst,DimBeta,nMkts,NumMoments);                                    W_AB = zeros(nInst,1,nMkts,NumMoments);                                    % Adding change in profits for hospital if do contract and                                     % change in profits for HMO if don't contract                                    for j=1:nMkts                                        for k=1:(NumHosp*NumHMO)                                           idx = (j-1)*(NumHosp*NumHMO) + k;                                           hTemp = INST(idx,:)';                                           Z_AB(:,:,j,1) = Z_AB(:,:,j,1) + kron( ISCONT(idx,1)*A_Hosp(idx,:) + (1-ISCONT(idx,1))*A_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                           W_AB(:,:,j,1) = W_AB(:,:,j,1) + kron( ISCONT(idx,1)*C_Hosp(idx,:) + (1-ISCONT(idx,1))*C_HMO(idx,:) , hTemp) / (NumHosp*NumHMO);                                        end;                                    end;                                    if NumMoments >= 2                                            % Sum of Proift changes if contract should be positive if they                                        % do contract                                        for j=1:nMkts                                            Count = 0;                                            for k=1:(NumHosp*NumHMO)                                                idx = (j-1)*(NumHosp*NumHMO) + k;                                                hTemp = INST(idx,:)';                                                Z_AB(:,:,j,2) = Z_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(A_Hosp(idx,:)+A_HMO(idx,:)) , hTemp);                                                W_AB(:,:,j,2) = W_AB(:,:,j,2) + kron( (ISCONT(idx,1)).*(C_Hosp(idx,:)+C_HMO(idx,:)) , hTemp);                                                if ISCONT(idx,1)==1                                                     Count = Count + 1;                                                end;                                            end;                                            if Count==0                                                Count = 1;                                            end;                                            Z_AB(:,:,j,2) = Z_AB(:,:,j,2)/ Count;                                            W_AB(:,:,j,2) = W_AB(:,:,j,2)/ Count;                                                               end;                                    end;                                end;    %if RobustIneq                                %==========================================================================                                ZJtempAB = zeros(nInst,DimBeta,NumMoments);                                WJtempAB = zeros(nInst,1,NumMoments);                                for j=1:nMkts                                    for MomentID=1:NumMoments                                        ZJtempAB(:,:,MomentID) = ZJtempAB(:,:,MomentID) + Z_AB(:,:,j,MomentID)/nMkts;                                        WJtempAB(:,1,MomentID) = WJtempAB(:,1,MomentID) + W_AB(:,1,j,MomentID)/nMkts;                                    end;                                end;                                ZJ =[];                                WJ =[];                                for n=1:NumMoments                                    ZJ = [ZJ;ZJtempAB(:,:,n)];                                    WJ = [WJ;WJtempAB(:,:,n)];                                end;                                %Testing====================================================================================================                                    SinglePoint = 0;                                Beta_S1=Beta_0;                                [BetaMin BetaMax ErrorFlag] = f_fmincon_092605(ZJ,WJ,lb,ub,options,Beta_Start);                                if (ErrorFlag == 0)                                    TEMP = [Beta_0 BetaMin 0];                                else                                    [BetaPoint fval ErrorFlag2] = f_fminconsingle(ZJ,WJ,lb,ub,options,Beta_Start);                                    TEMP = [Beta_0 BetaPoint BetaPoint];                                    display(fval);                                    TJTestStatistic = (nMkts^.5) * (fval);                                    SinglePoint=1;                                end;                                %display(idxMeasError);                                display(TEMP);                            end; %END MEASUREMENT ERROR ITERATIONS                            BETA(7).B = [BETA(7).B; TEMP];                              end; %end MonteDraws        code = ['save MonteResults_PART1_' thisparm ' BETA'];        eval(code);