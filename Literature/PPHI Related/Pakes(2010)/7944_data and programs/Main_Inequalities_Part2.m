function Main_Inequalities_Part2%==============================% This function generates lines 6-11 in Table 2 of "Alternative% Models for Moment Inequalities" utilizing sets of 1385 markets created% from Main_GenerateDraws.m.% Parts 8-11 correspond to lines 8-11% Parts 12-13 correspond to lines 6-7%==============================thisparm=getenv('SGE_TASK_ID');TaskNumber=str2num(thisparm);code=['load DataChunk_072709_' thisparm];eval(code);ChunkSize=10;nMonteDraws=10;nMonteDraws = ChunkSize;%============================================================NumHosp = 2;NumHMO = 2;gamma=.075;%SegmentSize=size(XALL(1).x1,1);SegmentSize=5540;nObs = SegmentSize;nMkts = SegmentSize/4;RedrawMeasErrors = 1;RedrawNu2s = 1;for i=1:17    BETA(i).B = [];end;SDMultipleCost = .25^.5;SDMultiplePop = .05^.5;SD1 = 9;SD2 = 300;SD_HospMeasurementErrors = SDMultipleCost*SD1;SD_NBarMeasurementErrors = SDMultiplePop*SD2;                  nSetsOfErrors=50; %was 100Min=16.4;Max=19;Grid=20;doPart2 = 1;doPart8 = 1;doPart9 = 1;doPart9a = 1;doPart9b = 1;doPart10 = 1;doPart11 = 1;doPart12 = 1;doPart13 = 1;doPart14 = 1;doPart15 = 1;%=======================%=======================%=======================%==%=====================%=======================%=======================%====%===================%=======================%=======================%======%=================%=======================%=======================%========%===============%=======================%=======================%==========%=============%=======================%=======================%============%===========%=======================%=======================%==============%=========%=======================%=======================%================%=======%=======================%=======================%==================%=====%=======================%=======================%====================%===%=======================%=======================%======================if doPart2%        nMonteDraws = 120;            load Estimates_TrueBetaNu2s_072709.mat;        TotalMkts = size(RealNu2s,1);        Nu2sAllBoot = zeros(4, nSetsOfErrors, nMonteDraws);        Nu2sAllDraw = zeros(4, nSetsOfErrors, nMonteDraws);                %Draw Errors that are used in the calculation of probabilities for all        %Betas        Nu2Mean = mean(RealNu2s)';        VarNu2=zeros(4,4);        for n=1:nMkts            SSample = RealNu2s(n,:)';            VarNu2 = VarNu2 + ((SSample-Nu2Mean)*(SSample-Nu2Mean)');        end;        VarNu2 = VarNu2 / (nMkts);        CholVarNu2 = chol(VarNu2);        for iMonteDraw = 1:nMonteDraws            for n=1:nSetsOfErrors                    Nu2Draw = normrnd(0,1, 4, 1);                    Nu2sAllDraw(:,n,iMonteDraw) = Nu2Mean + CholVarNu2' * Nu2Draw;                    %Nu2s(:,n) = kron(EjkMean,ones(4,1)) + EjkVar * Nu2Draw;                    RandMktIdx = ceil(rand*(TotalMkts));                    Nu2sAllBoot(:,n,iMonteDraw) = RealNu2s(RandMktIdx,:)';                        %for idxEjk = 1:4                        %Nu2s(idxEjk,n)=Ejk(ceil(nObs*rand),1);                        %end;            end;                    end;                HospMeasurementErrorsAll = normrnd(0,SD_HospMeasurementErrors, nObs/2, nMonteDraws);        NBarMeasurementErrorsAll = normrnd(0,SD_NBarMeasurementErrors, nObs/4, nMonteDraws);                for iMonteDraw = 1:nMonteDraws                           if ~RedrawMeasErrors                    HospMeasurementErrorsAll(:,1) = XALL(iMonteDraw).HospMeas(:,1);                    NBarMeasurementErrorsAll(:,1) = XALL(iMonteDraw).NBarMeas(:,1);                            end;                                        if RedrawMeasErrors                    iErrorUse = iMonteDraw;                else                    iErrorUse = 1;                end;                                if RedrawNu2s                    iNu2ErrorUse = iMonteDraw;                else                    iNu2ErrorUse = 1;                end;                                disp(iMonteDraw);                x1 = XALL(iMonteDraw).x1;                x2 = XALL(iMonteDraw).x2;                   RealNu2s=XALL(iMonteDraw).RealNu2s_MktDraws;                                                if doPart8                    %============================================================                    %PART 8                    %============================================================                    %Flags                    RobustIneq=0;                    IgnoreStructErrors = 1;         %Mis-specifies error by not subtracting it out                    doVar = 0;                      %Calculate 95 conf interval                    doTestStatistic=0;                    DimBeta=1;                    nConfInterval_Iterations=200;                    ConfInterval = .95;                                        %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                    useConstINST = 0;                    usemeaserrorsINST = 0;                    useNoCostINST = 0;                                        %MEASUREMENT ERROR                    usemeaserrors = 0;              %Add Measurement Noise to Moments                    nMeasErrorIter = 0;                          SDMultipleCost = 0;                                        SDMultiplePop = 0;                                                            %Probability Parameters                    doProbabilities=1;                    doProbBootstrap=1;                    doProbVar=1;                    doProbMeasErrors=1;                    doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                    nBetaProbIterations=1;                    nMeasErrorIterProb=1;                                        %Measurement Errors                    SD1 = 9;                    SD2 = 300;                    SD_HospMeasurementErrors = SDMultipleCost*SD1;                    SD_NBarMeasurementErrors = SDMultiplePop*SD2;                                        if ~RobustIneq                        NumMoments = 3;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                    else                        NumMoments = 2;                    end;                                        lb_temp=-100;                    ub_temp=10000;                    lb=lb_temp*ones(DimBeta,1);                    ub=ub_temp*ones(DimBeta,1);                                        options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                                                 x1 = XALL(iMonteDraw).x1;                            x2 = XALL(iMonteDraw).x2;                                                        NumHosp = 2;                            NumHMO = 2;                            gamma=.075;                            % Import Data %                            x = [x1];                            nObs = size(x,[1]);                            x = [zeros(nObs,1) x];                            % Prepare Data Matrices %                            ID_RunID = x(:,1);                            ID_Iter = x(:,2);                            ID_HMO = x(:,3);                            ID_Hosp = x(:,4);                            NBar = x(:,5);                            ISCONT = x(:,6);                            HospCost_j = x(:,7);                            HospCost_j2 = x(:,8);                            ISCAP_j = x(:,9);                            ISCAP_j2 = x(:,10);                            HospCap_j = x(:,11);                            HospCap_j2 = x(:,12);                            HospChar = x(:,13);                            Tjk = x(:,14);                            Tjk2 = x(:,15);                            Tj2k = x(:,16);                            Njk = x(:,17);                            Njk2 = x(:,18);                            Nj2k = x(:,19);                            HospRealProf = x(:,20);                            HospRealCosts = x(:,21);                            HospNewRealProf = x(:,22);                            HospNewRealCosts = x(:,23);                            HMONewPrem = x(:,24);                            N2jk = x(:,25);                            N2jk2 = x(:,26);                            HMOChar = x(:,27);                            HMOPrem = x(:,28);                            HMOCost = x(:,29);                            HMORealProf = x(:,30);                            SigmaM_k = x(:,31);                            SigmaM_k2 = x(:,32);                            HMONewProf = x(:,33);                            Sigma2M_k = x(:,34);                            Sigma2M_k2 = x(:,35);                            N2jk_temp = x(:,36);                            N2j2k = x(:,37);                            MktStd_k = x(:,38);                            MktStd_k2 = x(:,39);                            HospCap_Mkt = HospCap_j+ HospCap_j2;                            HospCost_j_Wtd = HospCost_j.*(HospCap_j./HospCap_Mkt);                            HospCost_j2_Wtd = HospCost_j2.*(HospCap_j2./HospCap_Mkt);                            HospCost_MktAvg_Wtd = (HospCost_j_Wtd +HospCost_j2_Wtd)/2;                            HospCost_MktAvg = (HospCost_j + HospCost_j2)/2;                            HospCost_DiffAvg = HospCost_j - HospCost_MktAvg;                            HospCost_DiffAvgWts = HospCost_j - HospCost_MktAvg_Wtd;                            HospCost_DiffAvgWts_j2 = HospCost_j2 - HospCost_MktAvg_Wtd;                            %PopPerBed = NBar./(HospCap_j + HospCap_j2);                            SigmaH_jk = zeros(nObs,1);                            SigmaH_j2k = zeros(nObs,1);                            SigmaH_jk2 = zeros(nObs,1);                            Sigma2H_jk = zeros(nObs,1);                            Sigma2H_j2k = zeros(nObs,1);                            Sigma2H_jk2 = zeros(nObs,1);                            for idx=1:nObs                                SigmaH_jk(idx,1) = Njk(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_j2k(idx,1) = Nj2k(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_jk2(idx,1) = Njk2(idx,1)/(SigmaM_k2(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk(idx,1) = N2jk(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_j2k(idx,1) = N2j2k(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk2(idx,1) = N2jk2(idx,1)/(Sigma2M_k2(idx,1)*NBar(idx,1)*gamma);                            end;                            DeltaNjk = Njk-N2jk;                            DeltaNj2k = Nj2k-N2j2k;                            DeltaNjk2 = Njk2-N2jk2;                            nMkts = nObs / 4;                            nContracts = 0;                            for i=1:size(ISCONT,[1])                                if ISCONT(i,1)==1                                    nContracts = nContracts+1;                                end;                            end;                            HClassTemp = [1;1;2;2;];                            HospClass = kron(nMkts,HClassTemp);                            ISCONTj2 = ISCONT;                            ISCONTk2 = ISCONT;                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2(idx,1) = ISCONT(idx+2,1);                                else                                    ISCONTj2(idx,1) = ISCONT(idx-2,1);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2(idx,1) = ISCONT(idx+1,1);                                else                                    ISCONTk2(idx,1) = ISCONT(idx-1,1);                                end;                                end;                            DeltaISCONT = zeros(nObs,1);                            for i=1:nObs                                DeltaISCONT(i,1) = (-1)^(ISCONT(i,1)+1);                                DeltaISCONTj2(i,1) = (-1)^(ISCONTj2(i,1)+1);                                DeltaISCONTk2(i,1) = (-1)^(ISCONTk2(i,1)+1);                            end;                            HospCostPerPatient = zeros(nObs,1);                            HospCostPerPatient2 = zeros(nObs,1);                            for i=1:nObs                                if (Njk(i,1) + Njk2(i,1))>0                                    HospCostPerPatient(i,1) = HospRealCosts(i,1) / (Njk(i,1) + Njk2(i,1));                                end;                                if (N2jk(i,1) + N2jk2(i,1))>0                                        HospCostPerPatient2(i,1) = HospNewRealCosts(i,1) / (N2jk(i,1) + N2jk2(i,1));                                end;                            end;                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                            %==========================================================================                            %INSTRUMENTS =========================                            %==========================================================================                            NormInst = [ones(nObs,1) Njk NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                            NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*HospCost_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                            Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*HospCost_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                            MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*HospCost_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                            ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCap_j ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                            CostInteraction = [HospCost_j.*NBar HospCost_j.*HospCap_j HospCost_j.*HospCost_j HospCost_j.*(HospCap_j+HospCap_j2) HospCost_j.*HMOChar HospCost_j.*HospChar];                            SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                            CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                            HospCostsWtd = [HospCost_j_Wtd HospCost_j2_Wtd HospCost_MktAvg HospCost_MktAvg_Wtd];                    INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                    INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                                           ALLINST_NoNjk = INST;                    ALLINST_NoNjk(:,2) = [];                                        NBarMkt = zeros(nMkts,1);                    SumCapMkt = zeros(nMkts,1);                    SumCostMkt = zeros(nMkts,1);                    SumISCAPMkt = zeros(nMkts,1);                    for iMkt=1:nMkts                        idx = (iMkt-1)*4+1;                        NBarMkt(iMkt,1) = NBar(idx,1);                        SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                        SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                        SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                        end;                                        MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                    MktINSTmeas = MktINST;                    if ~(SDMultiplePop + SDMultipleCost == 0)                        if (SDMultiplePop>0) && (SDMultipleCost>0)                            %pop and cost measurement error                            MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                        else                            %Cost only measurement error                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                        end;                    end;                                                                 if usemeaserrorsINST                        PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                        ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                    end;                                        if useConstINST                        INST = [ones(nObs,1) ];                        INST_NoContract = [ones(nObs,1)];                        MktINSTmeas= [ones(nMkts,1)];                    end;                                        if useNoCostINST                        NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                        NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                        Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                        MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                        ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                    end;                                                            nInst = size(INST,2);                    nInstNoContract = size(INST_NoContract,2);                                             %==========================================================================                            %ERROR CALCULATIONS========================================================                            %==========================================================================                            useTotalTransfers = 1;                            %Calculate distribution of errors using total transfers (need to account                            %for Njk/N2jk issue                            if useTotalTransfers                                NNjk=Njk+N2jk;                                NNj2k=NNjk;                                NNjk2=NNjk;                                NN2jk=NNjk;                                NN2j2k=NNjk;                                NN2jk2=NNjk;                                for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        NNj2k(idx,1) = NNjk(idx+2,1);                                    else                                        NNj2k(idx,1) = NNjk(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        NNjk2(idx,1) = NNjk(idx+1,1);                                    else                                        NNjk2(idx,1) = NNjk(idx-1,1);                                    end;                                    end;                                X = [NNjk ALLINST_NoNjk];                                                    Beta_0 = TrueBeta0;                                Beta = TrueBeta;                                                                Tjk_NEW = (NNjk.*Tjk - X*TrueBeta + NNjk*TrueBeta0)./NNjk;                                Tj2k_NEW = Tjk_NEW;                                Tjk2_NEW = Tjk_NEW;                                 Tjk_Residual = Tjk - Tjk_NEW;                                Tj2k_Residual = Tjk_Residual;                                Tjk2_Residual = Tjk_Residual;                                    for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx+2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx+2,1);                                    else                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx-2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx+1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx+1,1);                                    else                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx-1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx-1,1);                                    end;                                    end;                                  Ejk = Njk.* Tjk_NEW - Njk * Beta_0;                                    Ej2k = Nj2k.*Tj2k_NEW - Nj2k * Beta_0;                                    Ejk2 = Njk2.*Tjk2_NEW - Njk2 * Beta_0;                                EjkALL = NNjk.* Tjk_NEW - NNjk * Beta_0;                                E2jk = N2jk.*Tjk_NEW - N2jk * Beta_0;                                E2j2k = N2j2k.*Tj2k_NEW - N2j2k * Beta_0;                                    E2jk2 = N2jk2.*Tjk2_NEW - N2jk2 * Beta_0;                                   Delta_Ejk = Ejk - E2jk;                                Delta_Ej2k = Ej2k - E2j2k;                                Delta_Ejk2 = Ejk2 - E2jk2;                            else                                cons = ones(nObs,1);                                Beta_0 = (inv(cons'*cons)*(cons'*(Tjk)));                                        Ejk = Tjk - Beta_0;                                  Ej2k = Tj2k - Beta_0;                                Ejk2 = Tjk2 - Beta_0;                            end;                            Err2=zeros(nMkts,4);                % Residuals in nMkts x 4 form. Reshaped Err.                            for i=0:nMkts-1                                for j=1:4                                    Err2(i+1,j) = EjkALL(i*4+j);                                end;                            end;                            ErrMean = mean(Err2)';                            VarErr=zeros(4,4);                            for n=1:nMkts                                SSample = Err2(n,:)';                                VarErr = VarErr + ((SSample-ErrMean)*(SSample-ErrMean)');                            end;                            VarErr = VarErr / (nMkts);                            CholVarErr = chol(VarErr);                                    %display(Beta_0);                            Beta_Start = [Beta_Start Beta_0];                            NumBetaStart = size(Beta_Start,2);                                           %==========================================================================                    %==========================================================================                    %==========================================================================                    % PROBABILITIES                    %==========================================================================                    %==========================================================================                    %==========================================================================                    if doProbabilities                        %x2 = importdata ('data_AllNetworkStructures.txt');                                              ISCONT_All = zeros(nObs,16);                        Njk_All = zeros(nObs,16);                        Njk2_All = zeros(nObs,16);                        Nj2k_All = zeros(nObs,16);                        N2jk_All = zeros(nObs,16);                        N2jk2_All = zeros(nObs,16);                        N2j2k2_All = zeros(nObs,16);                        Prem_All = zeros(nObs,16);                        Prem2_All = zeros(nObs,16);                        HospCost_All = zeros(nObs,16);                        HospCost2_All = zeros(nObs,16);                        SigmaM_k_All = zeros(nObs,16);                            SigmaM_k2_All = zeros(nObs,16);                             SigmaM2_k_All = zeros(nObs,16);                        SigmaM2_k2_All = zeros(nObs,16);                            HospCost_j_All =  zeros(nObs,16);                            HospCost_j2_All =  zeros(nObs,16);                                RealHospProf_All = zeros(nObs,16);                            RealHospProf2_All = zeros(nObs,16);                        RealHospCost_All = zeros(nObs,16);                        RealHospCost2_All = zeros(nObs,16);                        RealHMOProf_all = zeros(nObs,16);                        RealHMOProf2_all = zeros(nObs,16);                                            DeltaNjk_All = zeros(nObs,16);                            DeltaNj2k_All = zeros(nObs,16);                            DeltaNjk2_All = zeros(nObs,16);                                DeltaNjkInv_All = zeros(nObs,16);                                                        ISCONTj2_All = zeros(nObs,16);                        ISCONTk2_All = zeros(nObs,16);                        DeltaISCONT_All = zeros(nObs,16);                        DeltaISCONTj2_All = zeros(nObs,16);                        DeltaISCONTk2_All = zeros(nObs,16);                                                SigmaH_jk_All = zeros(nObs,16);                        SigmaH_j2k_All = zeros(nObs,16);                        SigmaH_jk2_All = zeros(nObs,16);                        Sigma2H_jk_All = zeros(nObs,16);                        Sigma2H_j2k_All = zeros(nObs,16);                        Sigma2H_jk2_All = zeros(nObs,16);                                                DeltaHMOPremTemp_All = zeros(nObs,16);                           EqNetwork = x2(:,4);                        x2Idx=9; %where alternative network structure data begins                        for i = 1:16                            ISCONT_All(:,i) = x2(:,x2Idx);                            Njk_All(:,i) = x2(:,x2Idx+1);                            Njk2_All(:,i) = x2(:,x2Idx+2);                            Nj2k_All(:,i) = x2(:,x2Idx+3);                                    N2jk_All(:,i) = x2(:,x2Idx+4);                            N2jk2_All(:,i) = x2(:,x2Idx+5);                            N2j2k_All(:,i) = x2(:,x2Idx+6);                                            Prem_All(:,i) = x2(:,x2Idx+7);                            Prem2_All(:,i) = x2(:,x2Idx+8);                            SigmaM_k_All(:,i) = x2(:,x2Idx+9);                            SigmaM_k2_All(:,i) = x2(:,x2Idx+10);                            SigmaM2_k_All(:,i) = x2(:,x2Idx+11);                            SigmaM2_k2_All(:,i) = x2(:,x2Idx+12);                            HospCost_j_All(:,i) = x2(:,x2Idx+13);                            HospCost_j2_All(:,i) = x2(:,x2Idx+14);                                    RealHospProf_All(:,i) = x2(:,x2Idx+15);                            RealHospProf2_All(:,i) = x2(:,x2Idx+16);                            RealHospCost_All(:,i) = x2(:,x2Idx+17);                            RealHospCost2_All(:,i) = x2(:,x2Idx+18);                            RealHMOProf_All(:,i) = x2(:,x2Idx+19);                            RealHMOProf_All(:,i) = x2(:,x2Idx+20);                                    x2Idx = x2Idx + 22;                                                DeltaNjk_All(:,i) = Njk_All(:,i)-N2jk_All(:,i);                            DeltaNj2k_All(:,i) = Nj2k_All(:,i)-N2j2k_All(:,i);                            DeltaNjk2_All(:,i) = Njk2_All(:,i)-N2jk2_All(:,i);                            AbsDeltaNjkInv_All(:,i) = abs(ones(nObs,1) ./ DeltaNjk_All(:,i));                                                        ISCONTj2_All(:,i) = ISCONT_All(:,i);                            ISCONTk2_All(:,i) = ISCONT_All(:,i);                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2_All(idx,i) = ISCONT_All(idx+2,i);                                else                                    ISCONTj2_All(idx,i) = ISCONT_All(idx-2,i);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2_All(idx,i) = ISCONT_All(idx+1,i);                                else                                    ISCONTk2_All(idx,i) = ISCONT_All(idx-1,i);                                end;                            end;                            DeltaISCONT_All(:,i) = zeros(nObs,1);                            for idx=1:nObs                                DeltaISCONT_All(idx,i) = (-1)^(ISCONT_All(idx,i)+1);                                DeltaISCONTj2_All(idx,i) = (-1)^(ISCONTj2_All(idx,i)+1);                                DeltaISCONTk2_All(idx,i) = (-1)^(ISCONTk2_All(idx,i)+1);                                                    SigmaH_jk_All(idx,i) = Njk_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_j2k_All(idx,i) = Nj2k_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_jk2_All(idx,i) = Njk2_All(idx,i)/(SigmaM_k2_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk_All(idx,i) = N2jk_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_j2k_All(idx,i) = N2j2k_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk2_All(idx,i) = N2jk2_All(idx,i)/(SigmaM2_k2_All(idx,i)*NBar(idx,1)*gamma);                            end;                            HospCostPerPatient_All = zeros(nObs,16);                            HospCostPerPatient2_All = zeros(nObs,16);                            for idxStruct=1:16                                for idxObs=1:nObs                                    if ( (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct))>0 )                                        HospCostPerPatient_All(idxObs,idxStruct) = RealHospCost_All(idxObs,idxStruct) / (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct));                                    end;                                    if ( (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct))>0 )                                        HospCostPerPatient2_All(idxObs,idxStruct) = RealHospCost2_All(idxObs,idxStruct) / (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct));                                    end;                                end;                            end;                            DeltaHospCosts = HospRealCosts - HospNewRealCosts;                            DeltaHMOPremTemp_All(:,i) = ( SigmaM_k_All(:,i).*(Prem_All(:,i)-HMOCost) - SigmaM2_k_All(:,i).*(Prem2_All(:,i)-HMOCost) ).*NBar;                        end; %for i=1:16                                                                        A_Hosp_All = DeltaNjk_All + DeltaNjk2_All;                        A_HMO_All = (-1) * (DeltaNjk_All + DeltaNj2k_All);                        C_Hosp_All = RealHospCost_All - RealHospCost2_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                        C_HMO_All = (-1)*(DeltaHMOPremTemp_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                % 10 Cases to consider: 1-NoContracts; 2 LHosp(1),S(0); 3 L(2),S(0);                        % 4-L(0),S(1); 5-L(0),S(2); 6-L1S1 Same; 7-L1S1Diff; 8-L1S2; 9-L2S1;                        % 10-AllContract                        Struct_Indicator = zeros(nMkts,10);                        for idxMkt = 1:nMkts                            idxObs = (idxMkt-1)*4+1;                            if ( EqNetwork(idxObs,1) == 0 ) Struct_Indicator(idxMkt,1) = 1; end;                            if ( (EqNetwork(idxObs,1) == 1)||(EqNetwork(idxObs,1) == 4) ) Struct_Indicator(idxMkt,2) = 1; end;                            if ( EqNetwork(idxObs,1) == 5 ) Struct_Indicator(idxMkt,3) = 1; end;                            if ( (EqNetwork(idxObs,1) == 2)||(EqNetwork(idxObs,1) == 8) ) Struct_Indicator(idxMkt,4) = 1; end;                                    if ( EqNetwork(idxObs,1) == 10 ) Struct_Indicator(idxMkt,5) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 3)||(EqNetwork(idxObs,1) == 12) ) Struct_Indicator(idxMkt,6) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 6)||(EqNetwork(idxObs,1) == 9) ) Struct_Indicator(idxMkt,7) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 11)||(EqNetwork(idxObs,1) == 14) ) Struct_Indicator(idxMkt,8) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 7)||(EqNetwork(idxObs,1) == 13) ) Struct_Indicator(idxMkt,9) = 1; end;                                            if ( EqNetwork(idxObs,1) == 15 ) Struct_Indicator(idxMkt,10) = 1; end;                                        end;                                            % Form what Structures look like in ALL NETWORK STRUCTURS                        ISCONT_AllNetworks = zeros(nObs,16);                        DeltaISCONT_AllNetworks = zeros(nObs,16);                        for idxObs = 1:nObs                            if (mod(idxObs,4)==1)                                ISCONT_AllNetworks(idxObs,5) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                            if (mod(idxObs,4)==2)                                ISCONT_AllNetworks(idxObs,2) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                            end;                                if (mod(idxObs,4)==3)                                ISCONT_AllNetworks(idxObs,9) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                if (mod(idxObs,4)==0)                                ISCONT_AllNetworks(idxObs,3) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                for idxStruct = 1:16                                        DeltaISCONT_AllNetworks(idxObs,idxStruct) = (-1)^(ISCONT_AllNetworks(idxObs,idxStruct)+1);                            end;                        end;                                            Struct_Indicator_Sum = zeros(1,10);                        for iCase=1:10                            Struct_Indicator_Sum(1,iCase) = sum(Struct_Indicator(:,iCase));                        end;                                                                         nBetas = (Max-Min)*Grid+1;                                              %======================================================================                        %BEGIN PROBABILITY TESTING                        %======================================================================                        BetaPredictionAll = zeros(nBetaProbIterations,2);                        BetaPredictionAllMeas = zeros(nBetaProbIterations,2);                      if (~doProbMeasErrors)                                                for idxIter=1:nBetaProbIterations                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                            MomentsPerNetworkStructure = size(MktINST,2);                            ZMoments_AllNetworks = zeros(MomentsPerNetworkStructure,10,nBetas);                            SMoments_AllNetworks = zeros(MomentsPerNetworkStructure,nMkts,10,nBetas);                            [BetaPredictionAll(idxIter,:), ZMoments_AllNetworks, SMomentsAll_AllNetworks, fvalProb]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All,C_HMO_All,A_Hosp_All,C_Hosp_All,MktINST,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                            TJTestStatisticProb = fvalProb * nMkts^.5;                            display(BetaPredictionAll);                        end;                        BetaPredMins = sortrows(BetaPredictionAll(:,1));                        BetaPredMaxs = sortrows(BetaPredictionAll(:,2));                                                   end;                        if doProbMeasErrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                            MeasErrorSinglePoints=0;                                                for idxMeasError=1:nMeasErrorIterProb                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                            if SDMultipleCost>0                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                else                                    HospMeasurementErrors = zeros(nObs/2,1);                                end;                                if SDMultiplePop > 0                                    NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                else                                    NBarMeasurementErrors = zeros(nObs/4, 1);                                end;                                Etaj = kron(HospMeasurementErrors,ones(2,16));                                Omega = kron(NBarMeasurementErrors,ones(4,16));                                                                    Psijk_A_All = gamma * (SigmaM_k_All.*SigmaH_jk_All);                                Psijk_B_All = gamma * (SigmaM2_k_All.*Sigma2H_jk_All);                                Psijk_All = Psijk_A_All-Psijk_B_All;                                Psij2k_A_All = gamma * (SigmaM_k_All.*SigmaH_j2k_All);                                Psij2k_B_All = gamma * (SigmaM2_k_All.*Sigma2H_j2k_All);                                Psij2k_All = Psij2k_A_All-Psij2k_B_All;                                        Psijk2_A_All = gamma * (SigmaM_k2_All.*SigmaH_jk2_All);                                Psijk2_B_All = gamma * (SigmaM2_k2_All.*Sigma2H_jk2_All);                                Psijk2_All = Psijk2_A_All-Psijk2_B_All;                                                                        PsiHosp_A_All = Psijk_A_All + Psijk2_A_All;                                PsiHosp_B_All = Psijk_B_All + Psijk2_B_All;                                                                DeltaNjkErr_All = DeltaNjk_All + Omega.*Psijk_All;                                AbsDeltaNjkErrInv_All = abs(ones(nObs,16) ./ DeltaNjkErr_All);                                DeltaNjk2Err_All = DeltaNjk2_All + Omega.*Psijk2_All;                                DeltaNj2kErr_All = DeltaNj2k_All + Omega.*Psij2k_All;                                                                        A_Hosp_All_Meas = DeltaNjkErr_All + DeltaNjk2Err_All;                                A_HMO_All_Meas = (-1) * (DeltaNjkErr_All + DeltaNj2kErr_All);                                C_Hosp_All_Meas = (Njk_All+Njk2_All+Omega.*PsiHosp_A_All).*(HospCostPerPatient_All+Etaj) - (N2jk_All+N2jk2_All+Omega.*PsiHosp_B_All).*(HospCostPerPatient2_All+Etaj) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                                C_HMO_All_Meas = (-1)*( ( SigmaM_k_All.*(Prem_All-kron(HMOCost,ones(1,16)))-SigmaM2_k_All.*(Prem2_All-kron(HMOCost,ones(1,16))) ).*(  kron(NBar,ones(1,16)) + Omega) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                                MomentsPerNetworkStructureMeas= size(MktINSTmeas,2);                                ZMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,10,nBetas);                                SMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,nMkts,10,nBetas);                                [BetaPredictionAllMeas(idxMeasError,:), ZMoments_AllNetworksMeas, SMomentsAll_AllNetworksMeas, fvalProbMeas]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All_Meas,C_HMO_All_Meas,A_Hosp_All_Meas,C_Hosp_All_Meas,MktINSTmeas,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                                TJTestStatisticProbMeas = fvalProbMeas * nMkts^.5;                                display(BetaPredictionAllMeas);                            end; %foridxMeas                                end; %ifUseMeasures                    end; %Do Probabilities                        BETA(8).B = [BETA(8).B; BetaPredictionAllMeas];                end;                                                                                                if doPart9                    %============================================================                    %PART 9                    %============================================================                    %Flags                    RobustIneq=0;                    IgnoreStructErrors = 1;         %Mis-specifies error by not subtracting it out                    doVar = 0;                      %Calculate 95 conf interval                    doTestStatistic=0;                    DimBeta=1;                    nConfInterval_Iterations=200;                    ConfInterval = .95;                                        %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                    useConstINST = 0;                    usemeaserrorsINST = 0;                    useNoCostINST = 0;                                        %MEASUREMENT ERROR                    usemeaserrors = 0;              %Add Measurement Noise to Moments                    nMeasErrorIter = 0;                    SDMultipleCost = .25^.5;                    SDMultiplePop = .05^.5;                    SDMultiplePop = 0;                    SDMultipleCost = 0;                                        %Probability Parameters                    doProbabilities=1;                    doProbBootstrap=0;                    doProbVar=1;                    doProbMeasErrors=1;                    doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                    nBetaProbIterations=1;                    nMeasErrorIterProb=1;                                        %Measurement Errors                    SD1 = 9;                    SD2 = 300;                    SD_HospMeasurementErrors = SDMultipleCost*SD1;                    SD_NBarMeasurementErrors = SDMultiplePop*SD2;                                        if ~RobustIneq                        NumMoments = 3;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                    else                        NumMoments = 2;                    end;                                        lb_temp=-100;                    ub_temp=10000;                    lb=lb_temp*ones(DimBeta,1);                    ub=ub_temp*ones(DimBeta,1);                                        options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                                                 x1 = XALL(iMonteDraw).x1;                            x2 = XALL(iMonteDraw).x2;                                                        NumHosp = 2;                            NumHMO = 2;                            gamma=.075;                            % Import Data %                            x = [x1];                            nObs = size(x,[1]);                            x = [zeros(nObs,1) x];                            % Prepare Data Matrices %                            ID_RunID = x(:,1);                            ID_Iter = x(:,2);                            ID_HMO = x(:,3);                            ID_Hosp = x(:,4);                            NBar = x(:,5);                            ISCONT = x(:,6);                            HospCost_j = x(:,7);                            HospCost_j2 = x(:,8);                            ISCAP_j = x(:,9);                            ISCAP_j2 = x(:,10);                            HospCap_j = x(:,11);                            HospCap_j2 = x(:,12);                            HospChar = x(:,13);                            Tjk = x(:,14);                            Tjk2 = x(:,15);                            Tj2k = x(:,16);                            Njk = x(:,17);                            Njk2 = x(:,18);                            Nj2k = x(:,19);                            HospRealProf = x(:,20);                            HospRealCosts = x(:,21);                            HospNewRealProf = x(:,22);                            HospNewRealCosts = x(:,23);                            HMONewPrem = x(:,24);                            N2jk = x(:,25);                            N2jk2 = x(:,26);                            HMOChar = x(:,27);                            HMOPrem = x(:,28);                            HMOCost = x(:,29);                            HMORealProf = x(:,30);                            SigmaM_k = x(:,31);                            SigmaM_k2 = x(:,32);                            HMONewProf = x(:,33);                            Sigma2M_k = x(:,34);                            Sigma2M_k2 = x(:,35);                            N2jk_temp = x(:,36);                            N2j2k = x(:,37);                            MktStd_k = x(:,38);                            MktStd_k2 = x(:,39);                            HospCap_Mkt = HospCap_j+ HospCap_j2;                            HospCost_j_Wtd = HospCost_j.*(HospCap_j./HospCap_Mkt);                            HospCost_j2_Wtd = HospCost_j2.*(HospCap_j2./HospCap_Mkt);                            HospCost_MktAvg_Wtd = (HospCost_j_Wtd +HospCost_j2_Wtd)/2;                            HospCost_MktAvg = (HospCost_j + HospCost_j2)/2;                            HospCost_DiffAvg = HospCost_j - HospCost_MktAvg;                            HospCost_DiffAvgWts = HospCost_j - HospCost_MktAvg_Wtd;                            HospCost_DiffAvgWts_j2 = HospCost_j2 - HospCost_MktAvg_Wtd;                            %PopPerBed = NBar./(HospCap_j + HospCap_j2);                            SigmaH_jk = zeros(nObs,1);                            SigmaH_j2k = zeros(nObs,1);                            SigmaH_jk2 = zeros(nObs,1);                            Sigma2H_jk = zeros(nObs,1);                            Sigma2H_j2k = zeros(nObs,1);                            Sigma2H_jk2 = zeros(nObs,1);                            for idx=1:nObs                                SigmaH_jk(idx,1) = Njk(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_j2k(idx,1) = Nj2k(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_jk2(idx,1) = Njk2(idx,1)/(SigmaM_k2(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk(idx,1) = N2jk(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_j2k(idx,1) = N2j2k(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk2(idx,1) = N2jk2(idx,1)/(Sigma2M_k2(idx,1)*NBar(idx,1)*gamma);                            end;                            DeltaNjk = Njk-N2jk;                            DeltaNj2k = Nj2k-N2j2k;                            DeltaNjk2 = Njk2-N2jk2;                            nMkts = nObs / 4;                            nContracts = 0;                            for i=1:size(ISCONT,[1])                                if ISCONT(i,1)==1                                    nContracts = nContracts+1;                                end;                            end;                            HClassTemp = [1;1;2;2;];                            HospClass = kron(nMkts,HClassTemp);                            ISCONTj2 = ISCONT;                            ISCONTk2 = ISCONT;                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2(idx,1) = ISCONT(idx+2,1);                                else                                    ISCONTj2(idx,1) = ISCONT(idx-2,1);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2(idx,1) = ISCONT(idx+1,1);                                else                                    ISCONTk2(idx,1) = ISCONT(idx-1,1);                                end;                                end;                            DeltaISCONT = zeros(nObs,1);                            for i=1:nObs                                DeltaISCONT(i,1) = (-1)^(ISCONT(i,1)+1);                                DeltaISCONTj2(i,1) = (-1)^(ISCONTj2(i,1)+1);                                DeltaISCONTk2(i,1) = (-1)^(ISCONTk2(i,1)+1);                            end;                            HospCostPerPatient = zeros(nObs,1);                            HospCostPerPatient2 = zeros(nObs,1);                            for i=1:nObs                                if (Njk(i,1) + Njk2(i,1))>0                                    HospCostPerPatient(i,1) = HospRealCosts(i,1) / (Njk(i,1) + Njk2(i,1));                                end;                                if (N2jk(i,1) + N2jk2(i,1))>0                                        HospCostPerPatient2(i,1) = HospNewRealCosts(i,1) / (N2jk(i,1) + N2jk2(i,1));                                end;                            end;                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                            %==========================================================================                            %INSTRUMENTS =========================                            %==========================================================================                            NormInst = [ones(nObs,1) Njk NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                            NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*HospCost_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                            Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*HospCost_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                            MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*HospCost_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                            ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCap_j ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                            CostInteraction = [HospCost_j.*NBar HospCost_j.*HospCap_j HospCost_j.*HospCost_j HospCost_j.*(HospCap_j+HospCap_j2) HospCost_j.*HMOChar HospCost_j.*HospChar];                            SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                            CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                            HospCostsWtd = [HospCost_j_Wtd HospCost_j2_Wtd HospCost_MktAvg HospCost_MktAvg_Wtd];                    INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                    INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                                           ALLINST_NoNjk = INST;                    ALLINST_NoNjk(:,2) = [];                                        NBarMkt = zeros(nMkts,1);                    SumCapMkt = zeros(nMkts,1);                    SumCostMkt = zeros(nMkts,1);                    SumISCAPMkt = zeros(nMkts,1);                    for iMkt=1:nMkts                        idx = (iMkt-1)*4+1;                        NBarMkt(iMkt,1) = NBar(idx,1);                        SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                        SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                        SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                        end;                                        MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                    MktINSTmeas = MktINST;                    if ~(SDMultiplePop + SDMultipleCost == 0)                        if (SDMultiplePop>0) && (SDMultipleCost>0)                            MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                        else                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                        end;                    end;                                         if usemeaserrorsINST                        PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                        ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                    end;                                        if useConstINST                        INST = [ones(nObs,1) ];                        INST_NoContract = [ones(nObs,1)];                        MktINSTmeas= [ones(nMkts,1)];                                            end;                                        if useNoCostINST                        NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                        NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                        Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                        MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                        ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                    end;                    nInst = size(INST,2);                    nInstNoContract = size(INST_NoContract,2);                                             %==========================================================================                            %ERROR CALCULATIONS========================================================                            %==========================================================================                            useTotalTransfers = 1;                            %Calculate distribution of errors using total transfers (need to account                            %for Njk/N2jk issue                            if useTotalTransfers                                NNjk=Njk+N2jk;                                NNj2k=NNjk;                                NNjk2=NNjk;                                NN2jk=NNjk;                                NN2j2k=NNjk;                                NN2jk2=NNjk;                                for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        NNj2k(idx,1) = NNjk(idx+2,1);                                    else                                        NNj2k(idx,1) = NNjk(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        NNjk2(idx,1) = NNjk(idx+1,1);                                    else                                        NNjk2(idx,1) = NNjk(idx-1,1);                                    end;                                    end;                                X = [NNjk ALLINST_NoNjk];                                Beta_0 = TrueBeta0;                                Beta = TrueBeta;                                                                Tjk_NEW = (NNjk.*Tjk - X*TrueBeta + NNjk*TrueBeta0)./NNjk;                                Tj2k_NEW = Tjk_NEW;                                Tjk2_NEW = Tjk_NEW;                                 Tjk_Residual = Tjk - Tjk_NEW;                                Tj2k_Residual = Tjk_Residual;                                Tjk2_Residual = Tjk_Residual;                                    for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx+2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx+2,1);                                    else                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx-2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx+1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx+1,1);                                    else                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx-1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx-1,1);                                    end;                                    end;                                  Ejk = Njk.* Tjk_NEW - Njk * Beta_0;                                    Ej2k = Nj2k.*Tj2k_NEW - Nj2k * Beta_0;                                    Ejk2 = Njk2.*Tjk2_NEW - Njk2 * Beta_0;                                EjkALL = NNjk.* Tjk_NEW - NNjk * Beta_0;                                                                    E2jk = N2jk.*Tjk_NEW - N2jk * Beta_0;                                E2j2k = N2j2k.*Tj2k_NEW - N2j2k * Beta_0;                                    E2jk2 = N2jk2.*Tjk2_NEW - N2jk2 * Beta_0;                                   Delta_Ejk = Ejk - E2jk;                                Delta_Ej2k = Ej2k - E2j2k;                                Delta_Ejk2 = Ejk2 - E2jk2;                            else                                cons = ones(nObs,1);                                Beta_0 = (inv(cons'*cons)*(cons'*(Tjk)));                                        Ejk = Tjk - Beta_0;                                  Ej2k = Tj2k - Beta_0;                                Ejk2 = Tjk2 - Beta_0;                            end;                            Err2=zeros(nMkts,4);                % Residuals in nMkts x 4 form. Reshaped Err.                            for i=0:nMkts-1                                for j=1:4                                    Err2(i+1,j) = EjkALL(i*4+j);                                end;                            end;                            ErrMean = mean(Err2)';                            VarErr=zeros(4,4);                            for n=1:nMkts                                SSample = Err2(n,:)';                                VarErr = VarErr + ((SSample-ErrMean)*(SSample-ErrMean)');                            end;                            VarErr = VarErr / (nMkts);                            CholVarErr = chol(VarErr);                                    %display(Beta_0);                            Beta_Start = [Beta_Start Beta_0];                            NumBetaStart = size(Beta_Start,2);                                           %==========================================================================                    %==========================================================================                    %==========================================================================                    % PROBABILITIES                    %==========================================================================                    %==========================================================================                    %==========================================================================                    if doProbabilities                        %x2 = importdata ('data_AllNetworkStructures.txt');                                              ISCONT_All = zeros(nObs,16);                        Njk_All = zeros(nObs,16);                        Njk2_All = zeros(nObs,16);                        Nj2k_All = zeros(nObs,16);                        N2jk_All = zeros(nObs,16);                        N2jk2_All = zeros(nObs,16);                        N2j2k2_All = zeros(nObs,16);                        Prem_All = zeros(nObs,16);                        Prem2_All = zeros(nObs,16);                        HospCost_All = zeros(nObs,16);                        HospCost2_All = zeros(nObs,16);                        SigmaM_k_All = zeros(nObs,16);                            SigmaM_k2_All = zeros(nObs,16);                             SigmaM2_k_All = zeros(nObs,16);                        SigmaM2_k2_All = zeros(nObs,16);                            HospCost_j_All =  zeros(nObs,16);                            HospCost_j2_All =  zeros(nObs,16);                                RealHospProf_All = zeros(nObs,16);                            RealHospProf2_All = zeros(nObs,16);                        RealHospCost_All = zeros(nObs,16);                        RealHospCost2_All = zeros(nObs,16);                        RealHMOProf_all = zeros(nObs,16);                        RealHMOProf2_all = zeros(nObs,16);                                            DeltaNjk_All = zeros(nObs,16);                            DeltaNj2k_All = zeros(nObs,16);                            DeltaNjk2_All = zeros(nObs,16);                                DeltaNjkInv_All = zeros(nObs,16);                                                        ISCONTj2_All = zeros(nObs,16);                        ISCONTk2_All = zeros(nObs,16);                        DeltaISCONT_All = zeros(nObs,16);                        DeltaISCONTj2_All = zeros(nObs,16);                        DeltaISCONTk2_All = zeros(nObs,16);                                                SigmaH_jk_All = zeros(nObs,16);                        SigmaH_j2k_All = zeros(nObs,16);                        SigmaH_jk2_All = zeros(nObs,16);                        Sigma2H_jk_All = zeros(nObs,16);                        Sigma2H_j2k_All = zeros(nObs,16);                        Sigma2H_jk2_All = zeros(nObs,16);                                                EqNetwork = x2(:,4);                        x2Idx=9; %where alternative network structure data begins                        for i = 1:16                            ISCONT_All(:,i) = x2(:,x2Idx);                            Njk_All(:,i) = x2(:,x2Idx+1);                            Njk2_All(:,i) = x2(:,x2Idx+2);                            Nj2k_All(:,i) = x2(:,x2Idx+3);                                    N2jk_All(:,i) = x2(:,x2Idx+4);                            N2jk2_All(:,i) = x2(:,x2Idx+5);                            N2j2k_All(:,i) = x2(:,x2Idx+6);                                            Prem_All(:,i) = x2(:,x2Idx+7);                            Prem2_All(:,i) = x2(:,x2Idx+8);                            SigmaM_k_All(:,i) = x2(:,x2Idx+9);                            SigmaM_k2_All(:,i) = x2(:,x2Idx+10);                            SigmaM2_k_All(:,i) = x2(:,x2Idx+11);                            SigmaM2_k2_All(:,i) = x2(:,x2Idx+12);                            HospCost_j_All(:,i) = x2(:,x2Idx+13);                            HospCost_j2_All(:,i) = x2(:,x2Idx+14);                                    RealHospProf_All(:,i) = x2(:,x2Idx+15);                            RealHospProf2_All(:,i) = x2(:,x2Idx+16);                            RealHospCost_All(:,i) = x2(:,x2Idx+17);                            RealHospCost2_All(:,i) = x2(:,x2Idx+18);                            RealHMOProf_All(:,i) = x2(:,x2Idx+19);                            RealHMOProf_All(:,i) = x2(:,x2Idx+20);                                    x2Idx = x2Idx + 22;                                                DeltaNjk_All(:,i) = Njk_All(:,i)-N2jk_All(:,i);                            DeltaNj2k_All(:,i) = Nj2k_All(:,i)-N2j2k_All(:,i);                            DeltaNjk2_All(:,i) = Njk2_All(:,i)-N2jk2_All(:,i);                            AbsDeltaNjkInv_All(:,i) = abs(ones(nObs,1) ./ DeltaNjk_All(:,i));                                                        ISCONTj2_All(:,i) = ISCONT_All(:,i);                            ISCONTk2_All(:,i) = ISCONT_All(:,i);                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2_All(idx,i) = ISCONT_All(idx+2,i);                                else                                    ISCONTj2_All(idx,i) = ISCONT_All(idx-2,i);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2_All(idx,i) = ISCONT_All(idx+1,i);                                else                                    ISCONTk2_All(idx,i) = ISCONT_All(idx-1,i);                                end;                            end;                            DeltaISCONT_All(:,i) = zeros(nObs,1);                            for idx=1:nObs                                DeltaISCONT_All(idx,i) = (-1)^(ISCONT_All(idx,i)+1);                                DeltaISCONTj2_All(idx,i) = (-1)^(ISCONTj2_All(idx,i)+1);                                DeltaISCONTk2_All(idx,i) = (-1)^(ISCONTk2_All(idx,i)+1);                                                    SigmaH_jk_All(idx,i) = Njk_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_j2k_All(idx,i) = Nj2k_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_jk2_All(idx,i) = Njk2_All(idx,i)/(SigmaM_k2_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk_All(idx,i) = N2jk_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_j2k_All(idx,i) = N2j2k_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk2_All(idx,i) = N2jk2_All(idx,i)/(SigmaM2_k2_All(idx,i)*NBar(idx,1)*gamma);                            end;                        DeltaHMOPremTemp_All = zeros(nObs,16);                        HospCostPerPatient_All = zeros(nObs,16);                        HospCostPerPatient2_All = zeros(nObs,16);                        for idxStruct=1:16                            for idxObs=1:nObs                                if ( (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient_All(idxObs,idxStruct) = RealHospCost_All(idxObs,idxStruct) / (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct));                                end;                                if ( (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient2_All(idxObs,idxStruct) = RealHospCost2_All(idxObs,idxStruct) / (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct));                                end;                            end;                        end;                                                            DeltaHospCosts = HospRealCosts - HospNewRealCosts;                            DeltaHMOPremTemp_All(:,i) = ( SigmaM_k_All(:,i).*(Prem_All(:,i)-HMOCost) - SigmaM2_k_All(:,i).*(Prem2_All(:,i)-HMOCost) ).*NBar;                        end; %for i=1:16                                                               A_Hosp_All = DeltaNjk_All + DeltaNjk2_All;                        A_HMO_All = (-1) * (DeltaNjk_All + DeltaNj2k_All);                        C_Hosp_All = RealHospCost_All - RealHospCost2_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                        C_HMO_All = (-1)*(DeltaHMOPremTemp_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                % 10 Cases to consider: 1-NoContracts; 2 LHosp(1),S(0); 3 L(2),S(0);                        % 4-L(0),S(1); 5-L(0),S(2); 6-L1S1 Same; 7-L1S1Diff; 8-L1S2; 9-L2S1;                        % 10-AllContract                        Struct_Indicator = zeros(nMkts,10);                        for idxMkt = 1:nMkts                            idxObs = (idxMkt-1)*4+1;                            if ( EqNetwork(idxObs,1) == 0 ) Struct_Indicator(idxMkt,1) = 1; end;                            if ( (EqNetwork(idxObs,1) == 1)||(EqNetwork(idxObs,1) == 4) ) Struct_Indicator(idxMkt,2) = 1; end;                            if ( EqNetwork(idxObs,1) == 5 ) Struct_Indicator(idxMkt,3) = 1; end;                            if ( (EqNetwork(idxObs,1) == 2)||(EqNetwork(idxObs,1) == 8) ) Struct_Indicator(idxMkt,4) = 1; end;                                    if ( EqNetwork(idxObs,1) == 10 ) Struct_Indicator(idxMkt,5) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 3)||(EqNetwork(idxObs,1) == 12) ) Struct_Indicator(idxMkt,6) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 6)||(EqNetwork(idxObs,1) == 9) ) Struct_Indicator(idxMkt,7) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 11)||(EqNetwork(idxObs,1) == 14) ) Struct_Indicator(idxMkt,8) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 7)||(EqNetwork(idxObs,1) == 13) ) Struct_Indicator(idxMkt,9) = 1; end;                                            if ( EqNetwork(idxObs,1) == 15 ) Struct_Indicator(idxMkt,10) = 1; end;                                        end;                                            % Form what Structures look like in ALL NETWORK STRUCTURS                        ISCONT_AllNetworks = zeros(nObs,16);                        DeltaISCONT_AllNetworks = zeros(nObs,16);                        for idxObs = 1:nObs                            if (mod(idxObs,4)==1)                                ISCONT_AllNetworks(idxObs,5) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                            if (mod(idxObs,4)==2)                                ISCONT_AllNetworks(idxObs,2) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                            end;                                if (mod(idxObs,4)==3)                                ISCONT_AllNetworks(idxObs,9) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                if (mod(idxObs,4)==0)                                ISCONT_AllNetworks(idxObs,3) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                for idxStruct = 1:16                                        DeltaISCONT_AllNetworks(idxObs,idxStruct) = (-1)^(ISCONT_AllNetworks(idxObs,idxStruct)+1);                            end;                        end;                                             Struct_Indicator_Sum = zeros(1,10);                        for iCase=1:10                            Struct_Indicator_Sum(1,iCase) = sum(Struct_Indicator(:,iCase));                        end;                                                                         nBetas = (Max-Min)*Grid+1;                                              %======================================================================                        %BEGIN PROBABILITY TESTING                        %======================================================================                        BetaPredictionAll = zeros(nBetaProbIterations,2);                        BetaPredictionAllMeas = zeros(nBetaProbIterations,2);                      if (~doProbMeasErrors)                                                for idxIter=1:nBetaProbIterations                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                            MomentsPerNetworkStructure = size(MktINST,2);                            ZMoments_AllNetworks = zeros(MomentsPerNetworkStructure,10,nBetas);                            SMoments_AllNetworks = zeros(MomentsPerNetworkStructure,nMkts,10,nBetas);                            [BetaPredictionAll(idxIter,:), ZMoments_AllNetworks, SMomentsAll_AllNetworks, fvalProb]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All,C_HMO_All,A_Hosp_All,C_Hosp_All,MktINST,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                            TJTestStatisticProb = fvalProb * nMkts^.5;                            display(BetaPredictionAll);                        end;                        BetaPredMins = sortrows(BetaPredictionAll(:,1));                        BetaPredMaxs = sortrows(BetaPredictionAll(:,2));                                 end;                                                if doProbMeasErrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                            MeasErrorSinglePoints=0;                                                for idxMeasError=1:nMeasErrorIterProb                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                    if SDMultipleCost>0                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                else                                    HospMeasurementErrors = zeros(nObs/2,1);                                end;                                if SDMultiplePop > 0                                    NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                else                                    NBarMeasurementErrors = zeros(nObs/4, 1);                                end;                                Etaj = kron(HospMeasurementErrors,ones(2,16));                                Omega = kron(NBarMeasurementErrors,ones(4,16));                                                                    Psijk_A_All = gamma * (SigmaM_k_All.*SigmaH_jk_All);                                Psijk_B_All = gamma * (SigmaM2_k_All.*Sigma2H_jk_All);                                Psijk_All = Psijk_A_All-Psijk_B_All;                                Psij2k_A_All = gamma * (SigmaM_k_All.*SigmaH_j2k_All);                                Psij2k_B_All = gamma * (SigmaM2_k_All.*Sigma2H_j2k_All);                                Psij2k_All = Psij2k_A_All-Psij2k_B_All;                                        Psijk2_A_All = gamma * (SigmaM_k2_All.*SigmaH_jk2_All);                                Psijk2_B_All = gamma * (SigmaM2_k2_All.*Sigma2H_jk2_All);                                Psijk2_All = Psijk2_A_All-Psijk2_B_All;                                                                        PsiHosp_A_All = Psijk_A_All + Psijk2_A_All;                                PsiHosp_B_All = Psijk_B_All + Psijk2_B_All;                                                                DeltaNjkErr_All = DeltaNjk_All + Omega.*Psijk_All;                                AbsDeltaNjkErrInv_All = abs(ones(nObs,16) ./ DeltaNjkErr_All);                                DeltaNjk2Err_All = DeltaNjk2_All + Omega.*Psijk2_All;                                DeltaNj2kErr_All = DeltaNj2k_All + Omega.*Psij2k_All;                                                                                                        A_Hosp_All_Meas = DeltaNjkErr_All + DeltaNjk2Err_All;                                A_HMO_All_Meas = (-1) * (DeltaNjkErr_All + DeltaNj2kErr_All);                                C_Hosp_All_Meas = (Njk_All+Njk2_All+Omega.*PsiHosp_A_All).*(HospCostPerPatient_All+Etaj) - (N2jk_All+N2jk2_All+Omega.*PsiHosp_B_All).*(HospCostPerPatient2_All+Etaj) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                                C_HMO_All_Meas = (-1)*( ( SigmaM_k_All.*(Prem_All-kron(HMOCost,ones(1,16)))-SigmaM2_k_All.*(Prem2_All-kron(HMOCost,ones(1,16))) ).*(  kron(NBar,ones(1,16)) + Omega) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                                MomentsPerNetworkStructureMeas= size(MktINSTmeas,2);                                ZMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,10,nBetas);                                SMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,nMkts,10,nBetas);                                [BetaPredictionAllMeas(idxMeasError,:), ZMoments_AllNetworksMeas, SMomentsAll_AllNetworksMeas, fvalProbMeas]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All_Meas,C_HMO_All_Meas,A_Hosp_All_Meas,C_Hosp_All_Meas,MktINSTmeas,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                                TJTestStatisticProbMeas = fvalProbMeas * nMkts^.5;                                display(BetaPredictionAllMeas);                            end; %foridxMeas                                end; %ifUseMeasures                    end; %Do Probabilities                        BETA(9).B = [BETA(9).B; BetaPredictionAllMeas];                                             end;                                                                                            if doPart10                    %===========================================================                    %PART 10                    %============================================================                    %Flags                    RobustIneq=0;                    IgnoreStructErrors = 1;         %Mis-specifies error by not subtracting it out                    doVar = 0;                      %Calculate 95 conf interval                    doTestStatistic=0;                    DimBeta=1;                    nConfInterval_Iterations=200;                    ConfInterval = .95;                                        %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                    useConstINST = 0;                    usemeaserrorsINST = 0;                    useNoCostINST = 0;                                        %MEASUREMENT ERROR                    usemeaserrors = 1;              %Add Measurement Noise to Moments                    nMeasErrorIter = 0;                    SDMultipleCost = .25^.5;                    SDMultiplePop = .05^.5;                                                        %Probability Parameters                    doProbabilities=1;                    doProbBootstrap=0;                    doProbVar=1;                    doProbMeasErrors=1;                    doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                    nBetaProbIterations=1;                    nMeasErrorIterProb=1;                                        %Measurement Errors                    SD1 = 9;                    SD2 = 300;                    SD_HospMeasurementErrors = SDMultipleCost*SD1;                    SD_NBarMeasurementErrors = SDMultiplePop*SD2;                                        if ~RobustIneq                        NumMoments = 3;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                    else                        NumMoments = 2;                    end;                                        lb_temp=-100;                    ub_temp=10000;                    lb=lb_temp*ones(DimBeta,1);                    ub=ub_temp*ones(DimBeta,1);                                        options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                                                 x1 = XALL(iMonteDraw).x1;                            x2 = XALL(iMonteDraw).x2;                                                        NumHosp = 2;                            NumHMO = 2;                            gamma=.075;                            % Import Data %                            x = [x1];                            nObs = size(x,[1]);                            x = [zeros(nObs,1) x];                            % Prepare Data Matrices %                            ID_RunID = x(:,1);                            ID_Iter = x(:,2);                            ID_HMO = x(:,3);                            ID_Hosp = x(:,4);                            NBar = x(:,5);                            ISCONT = x(:,6);                            HospCost_j = x(:,7);                            HospCost_j2 = x(:,8);                            ISCAP_j = x(:,9);                            ISCAP_j2 = x(:,10);                            HospCap_j = x(:,11);                            HospCap_j2 = x(:,12);                            HospChar = x(:,13);                            Tjk = x(:,14);                            Tjk2 = x(:,15);                            Tj2k = x(:,16);                            Njk = x(:,17);                            Njk2 = x(:,18);                            Nj2k = x(:,19);                            HospRealProf = x(:,20);                            HospRealCosts = x(:,21);                            HospNewRealProf = x(:,22);                            HospNewRealCosts = x(:,23);                            HMONewPrem = x(:,24);                            N2jk = x(:,25);                            N2jk2 = x(:,26);                            HMOChar = x(:,27);                            HMOPrem = x(:,28);                            HMOCost = x(:,29);                            HMORealProf = x(:,30);                            SigmaM_k = x(:,31);                            SigmaM_k2 = x(:,32);                            HMONewProf = x(:,33);                            Sigma2M_k = x(:,34);                            Sigma2M_k2 = x(:,35);                            N2jk_temp = x(:,36);                            N2j2k = x(:,37);                            MktStd_k = x(:,38);                            MktStd_k2 = x(:,39);                            HospCap_Mkt = HospCap_j+ HospCap_j2;                            HospCost_j_Wtd = HospCost_j.*(HospCap_j./HospCap_Mkt);                            HospCost_j2_Wtd = HospCost_j2.*(HospCap_j2./HospCap_Mkt);                            HospCost_MktAvg_Wtd = (HospCost_j_Wtd +HospCost_j2_Wtd)/2;                            HospCost_MktAvg = (HospCost_j + HospCost_j2)/2;                            HospCost_DiffAvg = HospCost_j - HospCost_MktAvg;                            HospCost_DiffAvgWts = HospCost_j - HospCost_MktAvg_Wtd;                            HospCost_DiffAvgWts_j2 = HospCost_j2 - HospCost_MktAvg_Wtd;                            %PopPerBed = NBar./(HospCap_j + HospCap_j2);                            SigmaH_jk = zeros(nObs,1);                            SigmaH_j2k = zeros(nObs,1);                            SigmaH_jk2 = zeros(nObs,1);                            Sigma2H_jk = zeros(nObs,1);                            Sigma2H_j2k = zeros(nObs,1);                            Sigma2H_jk2 = zeros(nObs,1);                            for idx=1:nObs                                SigmaH_jk(idx,1) = Njk(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_j2k(idx,1) = Nj2k(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_jk2(idx,1) = Njk2(idx,1)/(SigmaM_k2(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk(idx,1) = N2jk(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_j2k(idx,1) = N2j2k(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk2(idx,1) = N2jk2(idx,1)/(Sigma2M_k2(idx,1)*NBar(idx,1)*gamma);                            end;                            DeltaNjk = Njk-N2jk;                            DeltaNj2k = Nj2k-N2j2k;                            DeltaNjk2 = Njk2-N2jk2;                            nMkts = nObs / 4;                            nContracts = 0;                            for i=1:size(ISCONT,[1])                                if ISCONT(i,1)==1                                    nContracts = nContracts+1;                                end;                            end;                            HClassTemp = [1;1;2;2;];                            HospClass = kron(nMkts,HClassTemp);                            ISCONTj2 = ISCONT;                            ISCONTk2 = ISCONT;                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2(idx,1) = ISCONT(idx+2,1);                                else                                    ISCONTj2(idx,1) = ISCONT(idx-2,1);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2(idx,1) = ISCONT(idx+1,1);                                else                                    ISCONTk2(idx,1) = ISCONT(idx-1,1);                                end;                                end;                            DeltaISCONT = zeros(nObs,1);                            for i=1:nObs                                DeltaISCONT(i,1) = (-1)^(ISCONT(i,1)+1);                                DeltaISCONTj2(i,1) = (-1)^(ISCONTj2(i,1)+1);                                DeltaISCONTk2(i,1) = (-1)^(ISCONTk2(i,1)+1);                            end;                            HospCostPerPatient = zeros(nObs,1);                            HospCostPerPatient2 = zeros(nObs,1);                            for i=1:nObs                                if (Njk(i,1) + Njk2(i,1))>0                                    HospCostPerPatient(i,1) = HospRealCosts(i,1) / (Njk(i,1) + Njk2(i,1));                                end;                                if (N2jk(i,1) + N2jk2(i,1))>0                                        HospCostPerPatient2(i,1) = HospNewRealCosts(i,1) / (N2jk(i,1) + N2jk2(i,1));                                end;                            end;                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                            %==========================================================================                            %INSTRUMENTS =========================                            %==========================================================================                            NormInst = [ones(nObs,1) Njk NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                            NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*HospCost_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                            Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*HospCost_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                            MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*HospCost_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                            ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCap_j ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                            CostInteraction = [HospCost_j.*NBar HospCost_j.*HospCap_j HospCost_j.*HospCost_j HospCost_j.*(HospCap_j+HospCap_j2) HospCost_j.*HMOChar HospCost_j.*HospChar];                            SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                            CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                            HospCostsWtd = [HospCost_j_Wtd HospCost_j2_Wtd HospCost_MktAvg HospCost_MktAvg_Wtd];                    INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                    INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                                           ALLINST_NoNjk = INST;                    ALLINST_NoNjk(:,2) = [];                                        NBarMkt = zeros(nMkts,1);                    SumCapMkt = zeros(nMkts,1);                    SumCostMkt = zeros(nMkts,1);                    SumISCAPMkt = zeros(nMkts,1);                    for iMkt=1:nMkts                        idx = (iMkt-1)*4+1;                        NBarMkt(iMkt,1) = NBar(idx,1);                        SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                        SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                        SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                        end;                                        MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                    MktINSTmeas = MktINST;                    if ~(SDMultiplePop + SDMultipleCost == 0)                        if (SDMultiplePop>0) && (SDMultipleCost>0)                            %pop and cost measurement error                            MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                        else                            %Cost only measurement error                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                        end;                    end;                                                                 if usemeaserrorsINST                        PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                        ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                    end;                                        if useConstINST                        INST = [ones(nObs,1) ];                        INST_NoContract = [ones(nObs,1)];                        MktINSTmeas= [ones(nMkts,1)];                    end;                                        if useNoCostINST                        NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                        NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                        Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                        MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                        ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                    end;                                                            nInst = size(INST,2);                    nInstNoContract = size(INST_NoContract,2);                                             %==========================================================================                            %ERROR CALCULATIONS========================================================                            %==========================================================================                            useTotalTransfers = 1;                            %Calculate distribution of errors using total transfers (need to account                            %for Njk/N2jk issue                            if useTotalTransfers                                NNjk=Njk+N2jk;                                NNj2k=NNjk;                                NNjk2=NNjk;                                NN2jk=NNjk;                                NN2j2k=NNjk;                                NN2jk2=NNjk;                                for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        NNj2k(idx,1) = NNjk(idx+2,1);                                    else                                        NNj2k(idx,1) = NNjk(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        NNjk2(idx,1) = NNjk(idx+1,1);                                    else                                        NNjk2(idx,1) = NNjk(idx-1,1);                                    end;                                    end;                                X = [NNjk ALLINST_NoNjk];                                                              Beta_0 = TrueBeta0;                                Beta = TrueBeta;                                                                Tjk_NEW = (NNjk.*Tjk - X*TrueBeta + NNjk*TrueBeta0)./NNjk;                                Tj2k_NEW = Tjk_NEW;                                Tjk2_NEW = Tjk_NEW;                                 Tjk_Residual = Tjk - Tjk_NEW;                                Tj2k_Residual = Tjk_Residual;                                Tjk2_Residual = Tjk_Residual;                                    for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx+2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx+2,1);                                    else                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx-2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx+1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx+1,1);                                    else                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx-1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx-1,1);                                    end;                                    end;                                  Ejk = Njk.* Tjk_NEW - Njk * Beta_0;                                    Ej2k = Nj2k.*Tj2k_NEW - Nj2k * Beta_0;                                    Ejk2 = Njk2.*Tjk2_NEW - Njk2 * Beta_0;                                EjkALL = NNjk.* Tjk_NEW - NNjk * Beta_0;                                                                    E2jk = N2jk.*Tjk_NEW - N2jk * Beta_0;                                E2j2k = N2j2k.*Tj2k_NEW - N2j2k * Beta_0;                                    E2jk2 = N2jk2.*Tjk2_NEW - N2jk2 * Beta_0;                                   Delta_Ejk = Ejk - E2jk;                                Delta_Ej2k = Ej2k - E2j2k;                                Delta_Ejk2 = Ejk2 - E2jk2;                            else                                cons = ones(nObs,1);                                Beta_0 = (inv(cons'*cons)*(cons'*(Tjk)));                                        Ejk = Tjk - Beta_0;                                  Ej2k = Tj2k - Beta_0;                                Ejk2 = Tjk2 - Beta_0;                            end;                            Err2=zeros(nMkts,4);                % Residuals in nMkts x 4 form. Reshaped Err.                            for i=0:nMkts-1                                for j=1:4                                    Err2(i+1,j) = EjkALL(i*4+j);                                end;                            end;                            ErrMean = mean(Err2)';                            VarErr=zeros(4,4);                            for n=1:nMkts                                SSample = Err2(n,:)';                                VarErr = VarErr + ((SSample-ErrMean)*(SSample-ErrMean)');                            end;                            VarErr = VarErr / (nMkts);                            CholVarErr = chol(VarErr);                                    %display(Beta_0);                            Beta_Start = [Beta_Start Beta_0];                            NumBetaStart = size(Beta_Start,2);                                           %==========================================================================                    %==========================================================================                    %==========================================================================                    % PROBABILITIES                    %==========================================================================                    %==========================================================================                    %==========================================================================                    if doProbabilities                                              ISCONT_All = zeros(nObs,16);                        Njk_All = zeros(nObs,16);                        Njk2_All = zeros(nObs,16);                        Nj2k_All = zeros(nObs,16);                        N2jk_All = zeros(nObs,16);                        N2jk2_All = zeros(nObs,16);                        N2j2k2_All = zeros(nObs,16);                        Prem_All = zeros(nObs,16);                        Prem2_All = zeros(nObs,16);                        HospCost_All = zeros(nObs,16);                        HospCost2_All = zeros(nObs,16);                        SigmaM_k_All = zeros(nObs,16);                            SigmaM_k2_All = zeros(nObs,16);                             SigmaM2_k_All = zeros(nObs,16);                        SigmaM2_k2_All = zeros(nObs,16);                            HospCost_j_All =  zeros(nObs,16);                            HospCost_j2_All =  zeros(nObs,16);                                RealHospProf_All = zeros(nObs,16);                            RealHospProf2_All = zeros(nObs,16);                        RealHospCost_All = zeros(nObs,16);                        RealHospCost2_All = zeros(nObs,16);                        RealHMOProf_all = zeros(nObs,16);                        RealHMOProf2_all = zeros(nObs,16);                                            DeltaNjk_All = zeros(nObs,16);                            DeltaNj2k_All = zeros(nObs,16);                            DeltaNjk2_All = zeros(nObs,16);                                DeltaNjkInv_All = zeros(nObs,16);                                                        ISCONTj2_All = zeros(nObs,16);                        ISCONTk2_All = zeros(nObs,16);                        DeltaISCONT_All = zeros(nObs,16);                        DeltaISCONTj2_All = zeros(nObs,16);                        DeltaISCONTk2_All = zeros(nObs,16);                                                SigmaH_jk_All = zeros(nObs,16);                        SigmaH_j2k_All = zeros(nObs,16);                        SigmaH_jk2_All = zeros(nObs,16);                        Sigma2H_jk_All = zeros(nObs,16);                        Sigma2H_j2k_All = zeros(nObs,16);                        Sigma2H_jk2_All = zeros(nObs,16);                                                DeltaHMOPremTemp_All = zeros(nObs,16);                        EqNetwork = x2(:,4);                        x2Idx=9; %where alternative network structure data begins                        for i = 1:16                            ISCONT_All(:,i) = x2(:,x2Idx);                            Njk_All(:,i) = x2(:,x2Idx+1);                            Njk2_All(:,i) = x2(:,x2Idx+2);                            Nj2k_All(:,i) = x2(:,x2Idx+3);                                    N2jk_All(:,i) = x2(:,x2Idx+4);                            N2jk2_All(:,i) = x2(:,x2Idx+5);                            N2j2k_All(:,i) = x2(:,x2Idx+6);                                            Prem_All(:,i) = x2(:,x2Idx+7);                            Prem2_All(:,i) = x2(:,x2Idx+8);                            SigmaM_k_All(:,i) = x2(:,x2Idx+9);                            SigmaM_k2_All(:,i) = x2(:,x2Idx+10);                            SigmaM2_k_All(:,i) = x2(:,x2Idx+11);                            SigmaM2_k2_All(:,i) = x2(:,x2Idx+12);                            HospCost_j_All(:,i) = x2(:,x2Idx+13);                            HospCost_j2_All(:,i) = x2(:,x2Idx+14);                                    RealHospProf_All(:,i) = x2(:,x2Idx+15);                            RealHospProf2_All(:,i) = x2(:,x2Idx+16);                            RealHospCost_All(:,i) = x2(:,x2Idx+17);                            RealHospCost2_All(:,i) = x2(:,x2Idx+18);                            RealHMOProf_All(:,i) = x2(:,x2Idx+19);                            RealHMOProf_All(:,i) = x2(:,x2Idx+20);                                    x2Idx = x2Idx + 22;                                                DeltaNjk_All(:,i) = Njk_All(:,i)-N2jk_All(:,i);                            DeltaNj2k_All(:,i) = Nj2k_All(:,i)-N2j2k_All(:,i);                            DeltaNjk2_All(:,i) = Njk2_All(:,i)-N2jk2_All(:,i);                            AbsDeltaNjkInv_All(:,i) = abs(ones(nObs,1) ./ DeltaNjk_All(:,i));                                                        ISCONTj2_All(:,i) = ISCONT_All(:,i);                            ISCONTk2_All(:,i) = ISCONT_All(:,i);                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2_All(idx,i) = ISCONT_All(idx+2,i);                                else                                    ISCONTj2_All(idx,i) = ISCONT_All(idx-2,i);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2_All(idx,i) = ISCONT_All(idx+1,i);                                else                                    ISCONTk2_All(idx,i) = ISCONT_All(idx-1,i);                                end;                            end;                            DeltaISCONT_All(:,i) = zeros(nObs,1);                            for idx=1:nObs                                DeltaISCONT_All(idx,i) = (-1)^(ISCONT_All(idx,i)+1);                                DeltaISCONTj2_All(idx,i) = (-1)^(ISCONTj2_All(idx,i)+1);                                DeltaISCONTk2_All(idx,i) = (-1)^(ISCONTk2_All(idx,i)+1);                                                    SigmaH_jk_All(idx,i) = Njk_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_j2k_All(idx,i) = Nj2k_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_jk2_All(idx,i) = Njk2_All(idx,i)/(SigmaM_k2_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk_All(idx,i) = N2jk_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_j2k_All(idx,i) = N2j2k_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk2_All(idx,i) = N2jk2_All(idx,i)/(SigmaM2_k2_All(idx,i)*NBar(idx,1)*gamma);                            end;                        HospCostPerPatient_All = zeros(nObs,16);                        HospCostPerPatient2_All = zeros(nObs,16);                        for idxStruct=1:16                            for idxObs=1:nObs                                if ( (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient_All(idxObs,idxStruct) = RealHospCost_All(idxObs,idxStruct) / (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct));                                end;                                if ( (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient2_All(idxObs,idxStruct) = RealHospCost2_All(idxObs,idxStruct) / (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct));                                end;                            end;                        end;                                                            DeltaHospCosts = HospRealCosts - HospNewRealCosts;                            DeltaHMOPremTemp_All(:,i) = ( SigmaM_k_All(:,i).*(Prem_All(:,i)-HMOCost) - SigmaM2_k_All(:,i).*(Prem2_All(:,i)-HMOCost) ).*NBar;                                                           end; %for i=1:16                                                                        A_Hosp_All = DeltaNjk_All + DeltaNjk2_All;                        A_HMO_All = (-1) * (DeltaNjk_All + DeltaNj2k_All);                        C_Hosp_All = RealHospCost_All - RealHospCost2_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                        C_HMO_All = (-1)*(DeltaHMOPremTemp_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                % 10 Cases to consider: 1-NoContracts; 2 LHosp(1),S(0); 3 L(2),S(0);                        % 4-L(0),S(1); 5-L(0),S(2); 6-L1S1 Same; 7-L1S1Diff; 8-L1S2; 9-L2S1;                        % 10-AllContract                        Struct_Indicator = zeros(nMkts,10);                        for idxMkt = 1:nMkts                            idxObs = (idxMkt-1)*4+1;                            if ( EqNetwork(idxObs,1) == 0 ) Struct_Indicator(idxMkt,1) = 1; end;                            if ( (EqNetwork(idxObs,1) == 1)||(EqNetwork(idxObs,1) == 4) ) Struct_Indicator(idxMkt,2) = 1; end;                            if ( EqNetwork(idxObs,1) == 5 ) Struct_Indicator(idxMkt,3) = 1; end;                            if ( (EqNetwork(idxObs,1) == 2)||(EqNetwork(idxObs,1) == 8) ) Struct_Indicator(idxMkt,4) = 1; end;                                    if ( EqNetwork(idxObs,1) == 10 ) Struct_Indicator(idxMkt,5) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 3)||(EqNetwork(idxObs,1) == 12) ) Struct_Indicator(idxMkt,6) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 6)||(EqNetwork(idxObs,1) == 9) ) Struct_Indicator(idxMkt,7) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 11)||(EqNetwork(idxObs,1) == 14) ) Struct_Indicator(idxMkt,8) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 7)||(EqNetwork(idxObs,1) == 13) ) Struct_Indicator(idxMkt,9) = 1; end;                                            if ( EqNetwork(idxObs,1) == 15 ) Struct_Indicator(idxMkt,10) = 1; end;                                        end;                                            % Form what Structures look like in ALL NETWORK STRUCTURS                        ISCONT_AllNetworks = zeros(nObs,16);                        DeltaISCONT_AllNetworks = zeros(nObs,16);                        for idxObs = 1:nObs                            if (mod(idxObs,4)==1)                                ISCONT_AllNetworks(idxObs,5) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                            if (mod(idxObs,4)==2)                                ISCONT_AllNetworks(idxObs,2) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                            end;                                if (mod(idxObs,4)==3)                                ISCONT_AllNetworks(idxObs,9) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                if (mod(idxObs,4)==0)                                ISCONT_AllNetworks(idxObs,3) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                for idxStruct = 1:16                                        DeltaISCONT_AllNetworks(idxObs,idxStruct) = (-1)^(ISCONT_AllNetworks(idxObs,idxStruct)+1);                            end;                        end;                        Struct_Indicator_Sum = zeros(1,10);                        for iCase=1:10                            Struct_Indicator_Sum(1,iCase) = sum(Struct_Indicator(:,iCase));                        end;                                                                         nBetas = (Max-Min)*Grid+1;                                              %======================================================================                        %BEGIN PROBABILITY TESTING                        %======================================================================                        BetaPredictionAll = zeros(nBetaProbIterations,2);                        BetaPredictionAllMeas = zeros(nBetaProbIterations,2);                      if (~doProbMeasErrors)                                                for idxIter=1:nBetaProbIterations                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                            MomentsPerNetworkStructure = size(MktINST,2);                            ZMoments_AllNetworks = zeros(MomentsPerNetworkStructure,10,nBetas);                            SMoments_AllNetworks = zeros(MomentsPerNetworkStructure,nMkts,10,nBetas);                            [BetaPredictionAll(idxIter,:), ZMoments_AllNetworks, SMomentsAll_AllNetworks, fvalProb]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All,C_HMO_All,A_Hosp_All,C_Hosp_All,MktINST,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                            TJTestStatisticProb = fvalProb * nMkts^.5;                            display(BetaPredictionAll);                        end;                        BetaPredMins = sortrows(BetaPredictionAll(:,1));                        BetaPredMaxs = sortrows(BetaPredictionAll(:,2));                                                   end;                                                if doProbMeasErrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                            MeasErrorSinglePoints=0;                                                for idxMeasError=1:nMeasErrorIterProb                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                    if SDMultipleCost>0                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                else                                    HospMeasurementErrors = zeros(nObs/2,1);                                end;                                if SDMultiplePop > 0                                    NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                else                                    NBarMeasurementErrors = zeros(nObs/4, 1);                                end;                                Etaj = kron(HospMeasurementErrors,ones(2,16));                                Omega = kron(NBarMeasurementErrors,ones(4,16));                                                                    Psijk_A_All = gamma * (SigmaM_k_All.*SigmaH_jk_All);                                Psijk_B_All = gamma * (SigmaM2_k_All.*Sigma2H_jk_All);                                Psijk_All = Psijk_A_All-Psijk_B_All;                                Psij2k_A_All = gamma * (SigmaM_k_All.*SigmaH_j2k_All);                                Psij2k_B_All = gamma * (SigmaM2_k_All.*Sigma2H_j2k_All);                                Psij2k_All = Psij2k_A_All-Psij2k_B_All;                                        Psijk2_A_All = gamma * (SigmaM_k2_All.*SigmaH_jk2_All);                                Psijk2_B_All = gamma * (SigmaM2_k2_All.*Sigma2H_jk2_All);                                Psijk2_All = Psijk2_A_All-Psijk2_B_All;                                                                        PsiHosp_A_All = Psijk_A_All + Psijk2_A_All;                                PsiHosp_B_All = Psijk_B_All + Psijk2_B_All;                                                                DeltaNjkErr_All = DeltaNjk_All + Omega.*Psijk_All;                                AbsDeltaNjkErrInv_All = abs(ones(nObs,16) ./ DeltaNjkErr_All);                                DeltaNjk2Err_All = DeltaNjk2_All + Omega.*Psijk2_All;                                DeltaNj2kErr_All = DeltaNj2k_All + Omega.*Psij2k_All;                                                                        %             C_Hosp_All_Meas = AbsDeltaNjkErrInv_All .* ( (Njk_All+Njk2_All+Omega.*PsiHosp_A_All).*(HospCostPerPatient_All+Etaj) - (N2jk_All+N2jk2_All+Omega.*PsiHosp_B_All).*(HospCostPerPatient2_All+Etaj) - DeltaNjk2Err_All.*kron(Ejk2,ones(1,16))  );                                %             C_HMO_All_Meas = (-1) * AbsDeltaNjkErrInv_All .* (  ( SigmaM_k_All.*(Prem_All-kron(HMOCost,ones(1,16)))-SigmaM2_k_All.*(Prem2_All-kron(HMOCost,ones(1,16))) ).*( kron(NBar,ones(1,16)) +Omega) - DeltaNj2kErr_All.*kron(Ej2k,ones(1,16))    );                                %             A_Hosp_All_Meas = DeltaISCONT_All + AbsDeltaNjkErrInv_All.*DeltaNjk2Err_All;                                %             A_HMO_All_Meas = (-1) * (DeltaISCONT_All + AbsDeltaNjkErrInv_All.*DeltaNj2kErr_All);                                                    A_Hosp_All_Meas = DeltaNjkErr_All + DeltaNjk2Err_All;                                A_HMO_All_Meas = (-1) * (DeltaNjkErr_All + DeltaNj2kErr_All);                                C_Hosp_All_Meas = (Njk_All+Njk2_All+Omega.*PsiHosp_A_All).*(HospCostPerPatient_All+Etaj) - (N2jk_All+N2jk2_All+Omega.*PsiHosp_B_All).*(HospCostPerPatient2_All+Etaj) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                                C_HMO_All_Meas = (-1)*( ( SigmaM_k_All.*(Prem_All-kron(HMOCost,ones(1,16)))-SigmaM2_k_All.*(Prem2_All-kron(HMOCost,ones(1,16))) ).*(  kron(NBar,ones(1,16)) + Omega) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                                MomentsPerNetworkStructureMeas= size(MktINSTmeas,2);                                ZMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,10,nBetas);                                SMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,nMkts,10,nBetas);                                [BetaPredictionAllMeas(idxMeasError,:), ZMoments_AllNetworksMeas, SMomentsAll_AllNetworksMeas, fvalProbMeas]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All_Meas,C_HMO_All_Meas,A_Hosp_All_Meas,C_Hosp_All_Meas,MktINSTmeas,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                                TJTestStatisticProbMeas = fvalProbMeas * nMkts^.5;                                display(BetaPredictionAllMeas);                            end; %foridxMeas                                end; %ifUseMeasures                    end; %Do Probabilities                        BETA(10).B = [BETA(10).B; BetaPredictionAllMeas];                end;                                                                            if doPart11                        %============================================================                    %PART11                    %============================================================                    %Flags                    RobustIneq=0;                    IgnoreStructErrors = 1;         %Mis-specifies error by not subtracting it out                    doVar = 0;                      %Calculate 95 conf interval                    doTestStatistic=0;                    DimBeta=1;                    nConfInterval_Iterations=200;                    ConfInterval = .95;                                        %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                    useConstINST = 0;                    usemeaserrorsINST = 0;                    useNoCostINST = 0;                                        %MEASUREMENT ERROR                    usemeaserrors = 0;              %Add Measurement Noise to Moments                    nMeasErrorIter = 0;                    SDMultipleCost = .25^.5;                    SDMultiplePop = .05^.5;                    SDMultiplePop = 0;                                        %Probability Parameters                    doProbabilities=1;                    doProbBootstrap=0;                    doProbVar=1;                    doProbMeasErrors=1;                    doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                    nBetaProbIterations=1;                    nMeasErrorIterProb=1;                                        %Measurement Errors                    SD1 = 9;                    SD2 = 300;                    SD_HospMeasurementErrors = SDMultipleCost*SD1;                    SD_NBarMeasurementErrors = SDMultiplePop*SD2;                                        if ~RobustIneq                        NumMoments = 3;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                    else                        NumMoments = 2;                    end;                                        lb_temp=-100;                    ub_temp=10000;                    lb=lb_temp*ones(DimBeta,1);                    ub=ub_temp*ones(DimBeta,1);                                        options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                                                 x1 = XALL(iMonteDraw).x1;                            x2 = XALL(iMonteDraw).x2;                                                        NumHosp = 2;                            NumHMO = 2;                            gamma=.075;                            % Import Data %                            x = [x1];                            nObs = size(x,[1]);                            x = [zeros(nObs,1) x];                            % Prepare Data Matrices %                            ID_RunID = x(:,1);                            ID_Iter = x(:,2);                            ID_HMO = x(:,3);                            ID_Hosp = x(:,4);                            NBar = x(:,5);                            ISCONT = x(:,6);                            HospCost_j = x(:,7);                            HospCost_j2 = x(:,8);                            ISCAP_j = x(:,9);                            ISCAP_j2 = x(:,10);                            HospCap_j = x(:,11);                            HospCap_j2 = x(:,12);                            HospChar = x(:,13);                            Tjk = x(:,14);                            Tjk2 = x(:,15);                            Tj2k = x(:,16);                            Njk = x(:,17);                            Njk2 = x(:,18);                            Nj2k = x(:,19);                            HospRealProf = x(:,20);                            HospRealCosts = x(:,21);                            HospNewRealProf = x(:,22);                            HospNewRealCosts = x(:,23);                            HMONewPrem = x(:,24);                            N2jk = x(:,25);                            N2jk2 = x(:,26);                            HMOChar = x(:,27);                            HMOPrem = x(:,28);                            HMOCost = x(:,29);                            HMORealProf = x(:,30);                            SigmaM_k = x(:,31);                            SigmaM_k2 = x(:,32);                            HMONewProf = x(:,33);                            Sigma2M_k = x(:,34);                            Sigma2M_k2 = x(:,35);                            N2jk_temp = x(:,36);                            N2j2k = x(:,37);                            MktStd_k = x(:,38);                            MktStd_k2 = x(:,39);                            HospCap_Mkt = HospCap_j+ HospCap_j2;                            HospCost_j_Wtd = HospCost_j.*(HospCap_j./HospCap_Mkt);                            HospCost_j2_Wtd = HospCost_j2.*(HospCap_j2./HospCap_Mkt);                            HospCost_MktAvg_Wtd = (HospCost_j_Wtd +HospCost_j2_Wtd)/2;                            HospCost_MktAvg = (HospCost_j + HospCost_j2)/2;                            HospCost_DiffAvg = HospCost_j - HospCost_MktAvg;                            HospCost_DiffAvgWts = HospCost_j - HospCost_MktAvg_Wtd;                            HospCost_DiffAvgWts_j2 = HospCost_j2 - HospCost_MktAvg_Wtd;                            %PopPerBed = NBar./(HospCap_j + HospCap_j2);                            SigmaH_jk = zeros(nObs,1);                            SigmaH_j2k = zeros(nObs,1);                            SigmaH_jk2 = zeros(nObs,1);                            Sigma2H_jk = zeros(nObs,1);                            Sigma2H_j2k = zeros(nObs,1);                            Sigma2H_jk2 = zeros(nObs,1);                            for idx=1:nObs                                SigmaH_jk(idx,1) = Njk(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_j2k(idx,1) = Nj2k(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_jk2(idx,1) = Njk2(idx,1)/(SigmaM_k2(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk(idx,1) = N2jk(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_j2k(idx,1) = N2j2k(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk2(idx,1) = N2jk2(idx,1)/(Sigma2M_k2(idx,1)*NBar(idx,1)*gamma);                            end;                            DeltaNjk = Njk-N2jk;                            DeltaNj2k = Nj2k-N2j2k;                            DeltaNjk2 = Njk2-N2jk2;                            nMkts = nObs / 4;                            nContracts = 0;                            for i=1:size(ISCONT,[1])                                if ISCONT(i,1)==1                                    nContracts = nContracts+1;                                end;                            end;                            HClassTemp = [1;1;2;2;];                            HospClass = kron(nMkts,HClassTemp);                            ISCONTj2 = ISCONT;                            ISCONTk2 = ISCONT;                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2(idx,1) = ISCONT(idx+2,1);                                else                                    ISCONTj2(idx,1) = ISCONT(idx-2,1);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2(idx,1) = ISCONT(idx+1,1);                                else                                    ISCONTk2(idx,1) = ISCONT(idx-1,1);                                end;                                end;                            DeltaISCONT = zeros(nObs,1);                            for i=1:nObs                                DeltaISCONT(i,1) = (-1)^(ISCONT(i,1)+1);                                DeltaISCONTj2(i,1) = (-1)^(ISCONTj2(i,1)+1);                                DeltaISCONTk2(i,1) = (-1)^(ISCONTk2(i,1)+1);                            end;                            HospCostPerPatient = zeros(nObs,1);                            HospCostPerPatient2 = zeros(nObs,1);                            for i=1:nObs                                if (Njk(i,1) + Njk2(i,1))>0                                    HospCostPerPatient(i,1) = HospRealCosts(i,1) / (Njk(i,1) + Njk2(i,1));                                end;                                if (N2jk(i,1) + N2jk2(i,1))>0                                        HospCostPerPatient2(i,1) = HospNewRealCosts(i,1) / (N2jk(i,1) + N2jk2(i,1));                                end;                            end;                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                            %==========================================================================                            %INSTRUMENTS =========================                            %==========================================================================                            NormInst = [ones(nObs,1) Njk NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                            NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*HospCost_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                            Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*HospCost_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                            MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*HospCost_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                            ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCap_j ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                            CostInteraction = [HospCost_j.*NBar HospCost_j.*HospCap_j HospCost_j.*HospCost_j HospCost_j.*(HospCap_j+HospCap_j2) HospCost_j.*HMOChar HospCost_j.*HospChar];                            SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                            CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                            HospCostsWtd = [HospCost_j_Wtd HospCost_j2_Wtd HospCost_MktAvg HospCost_MktAvg_Wtd];                    INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                    INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                                           ALLINST_NoNjk = INST;                    ALLINST_NoNjk(:,2) = [];                                        NBarMkt = zeros(nMkts,1);                    SumCapMkt = zeros(nMkts,1);                    SumCostMkt = zeros(nMkts,1);                    SumISCAPMkt = zeros(nMkts,1);                    for iMkt=1:nMkts                        idx = (iMkt-1)*4+1;                        NBarMkt(iMkt,1) = NBar(idx,1);                        SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                        SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                        SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                        end;                    MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                    MktINSTmeas = MktINST;                    if ~(SDMultiplePop + SDMultipleCost == 0)                        if (SDMultiplePop>0) && (SDMultipleCost>0)                            MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                        else                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                        end;                    end;                                             if usemeaserrorsINST                        PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                        ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                    end;                                        if useConstINST                        INST = [ones(nObs,1) ];                        INST_NoContract = [ones(nObs,1)];                        MktINSTmeas= [ones(nMkts,1)];                                            end;                                        if useNoCostINST                        NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                        NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                        Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                        MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                        ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                        MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                                                                    end;                    nInst = size(INST,2);                    nInstNoContract = size(INST_NoContract,2);                                             %==========================================================================                            %ERROR CALCULATIONS========================================================                            %==========================================================================                            useTotalTransfers = 1;                            %Calculate distribution of errors using total transfers (need to account                            %for Njk/N2jk issue                            if useTotalTransfers                                NNjk=Njk+N2jk;                                NNj2k=NNjk;                                NNjk2=NNjk;                                NN2jk=NNjk;                                NN2j2k=NNjk;                                NN2jk2=NNjk;                                for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        NNj2k(idx,1) = NNjk(idx+2,1);                                    else                                        NNj2k(idx,1) = NNjk(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        NNjk2(idx,1) = NNjk(idx+1,1);                                    else                                        NNjk2(idx,1) = NNjk(idx-1,1);                                    end;                                    end;                                X = [NNjk ALLINST_NoNjk];                                                 Beta_0 = TrueBeta0;                                Beta = TrueBeta;                                                                Tjk_NEW = (NNjk.*Tjk - X*TrueBeta + NNjk*TrueBeta0)./NNjk;                                Tj2k_NEW = Tjk_NEW;                                Tjk2_NEW = Tjk_NEW;                                 Tjk_Residual = Tjk - Tjk_NEW;                                Tj2k_Residual = Tjk_Residual;                                Tjk2_Residual = Tjk_Residual;                                    for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx+2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx+2,1);                                    else                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx-2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx+1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx+1,1);                                    else                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx-1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx-1,1);                                    end;                                    end;                                  Ejk = Njk.* Tjk_NEW - Njk * Beta_0;                                    Ej2k = Nj2k.*Tj2k_NEW - Nj2k * Beta_0;                                    Ejk2 = Njk2.*Tjk2_NEW - Njk2 * Beta_0;                                EjkALL = NNjk.* Tjk_NEW - NNjk * Beta_0;                                    E2jk = N2jk.*Tjk_NEW - N2jk * Beta_0;                                E2j2k = N2j2k.*Tj2k_NEW - N2j2k * Beta_0;                                    E2jk2 = N2jk2.*Tjk2_NEW - N2jk2 * Beta_0;                                   Delta_Ejk = Ejk - E2jk;                                Delta_Ej2k = Ej2k - E2j2k;                                Delta_Ejk2 = Ejk2 - E2jk2;                            else                                cons = ones(nObs,1);                                Beta_0 = (inv(cons'*cons)*(cons'*(Tjk)));                                        Ejk = Tjk - Beta_0;                                  Ej2k = Tj2k - Beta_0;                                Ejk2 = Tjk2 - Beta_0;                            end;                            Err2=zeros(nMkts,4);                % Residuals in nMkts x 4 form. Reshaped Err.                            for i=0:nMkts-1                                for j=1:4                                    Err2(i+1,j) = EjkALL(i*4+j);                                end;                            end;                            ErrMean = mean(Err2)';                            VarErr=zeros(4,4);                            for n=1:nMkts                                SSample = Err2(n,:)';                                VarErr = VarErr + ((SSample-ErrMean)*(SSample-ErrMean)');                            end;                            VarErr = VarErr / (nMkts);                            CholVarErr = chol(VarErr);                                    %display(Beta_0);                            Beta_Start = [Beta_Start Beta_0];                            NumBetaStart = size(Beta_Start,2);                                           %==========================================================================                    %==========================================================================                    %==========================================================================                    % PROBABILITIES                    %==========================================================================                    %==========================================================================                    %==========================================================================                    if doProbabilities                                              ISCONT_All = zeros(nObs,16);                        Njk_All = zeros(nObs,16);                        Njk2_All = zeros(nObs,16);                        Nj2k_All = zeros(nObs,16);                        N2jk_All = zeros(nObs,16);                        N2jk2_All = zeros(nObs,16);                        N2j2k2_All = zeros(nObs,16);                        Prem_All = zeros(nObs,16);                        Prem2_All = zeros(nObs,16);                        HospCost_All = zeros(nObs,16);                        HospCost2_All = zeros(nObs,16);                        SigmaM_k_All = zeros(nObs,16);                            SigmaM_k2_All = zeros(nObs,16);                             SigmaM2_k_All = zeros(nObs,16);                        SigmaM2_k2_All = zeros(nObs,16);                            HospCost_j_All =  zeros(nObs,16);                            HospCost_j2_All =  zeros(nObs,16);                                RealHospProf_All = zeros(nObs,16);                            RealHospProf2_All = zeros(nObs,16);                        RealHospCost_All = zeros(nObs,16);                        RealHospCost2_All = zeros(nObs,16);                        RealHMOProf_all = zeros(nObs,16);                        RealHMOProf2_all = zeros(nObs,16);                                            DeltaNjk_All = zeros(nObs,16);                            DeltaNj2k_All = zeros(nObs,16);                            DeltaNjk2_All = zeros(nObs,16);                                DeltaNjkInv_All = zeros(nObs,16);                                                        ISCONTj2_All = zeros(nObs,16);                        ISCONTk2_All = zeros(nObs,16);                        DeltaISCONT_All = zeros(nObs,16);                        DeltaISCONTj2_All = zeros(nObs,16);                        DeltaISCONTk2_All = zeros(nObs,16);                                                SigmaH_jk_All = zeros(nObs,16);                        SigmaH_j2k_All = zeros(nObs,16);                        SigmaH_jk2_All = zeros(nObs,16);                        Sigma2H_jk_All = zeros(nObs,16);                        Sigma2H_j2k_All = zeros(nObs,16);                        Sigma2H_jk2_All = zeros(nObs,16);                                                DeltaHMOPremTemp_All = zeros(nObs,16);                        EqNetwork = x2(:,4);                        x2Idx=9; %where alternative network structure data begins                        for i = 1:16                            ISCONT_All(:,i) = x2(:,x2Idx);                            Njk_All(:,i) = x2(:,x2Idx+1);                            Njk2_All(:,i) = x2(:,x2Idx+2);                            Nj2k_All(:,i) = x2(:,x2Idx+3);                                    N2jk_All(:,i) = x2(:,x2Idx+4);                            N2jk2_All(:,i) = x2(:,x2Idx+5);                            N2j2k_All(:,i) = x2(:,x2Idx+6);                                            Prem_All(:,i) = x2(:,x2Idx+7);                            Prem2_All(:,i) = x2(:,x2Idx+8);                            SigmaM_k_All(:,i) = x2(:,x2Idx+9);                            SigmaM_k2_All(:,i) = x2(:,x2Idx+10);                            SigmaM2_k_All(:,i) = x2(:,x2Idx+11);                            SigmaM2_k2_All(:,i) = x2(:,x2Idx+12);                            HospCost_j_All(:,i) = x2(:,x2Idx+13);                            HospCost_j2_All(:,i) = x2(:,x2Idx+14);                                    RealHospProf_All(:,i) = x2(:,x2Idx+15);                            RealHospProf2_All(:,i) = x2(:,x2Idx+16);                            RealHospCost_All(:,i) = x2(:,x2Idx+17);                            RealHospCost2_All(:,i) = x2(:,x2Idx+18);                            RealHMOProf_All(:,i) = x2(:,x2Idx+19);                            RealHMOProf_All(:,i) = x2(:,x2Idx+20);                                    x2Idx = x2Idx + 22;                                                DeltaNjk_All(:,i) = Njk_All(:,i)-N2jk_All(:,i);                            DeltaNj2k_All(:,i) = Nj2k_All(:,i)-N2j2k_All(:,i);                            DeltaNjk2_All(:,i) = Njk2_All(:,i)-N2jk2_All(:,i);                            AbsDeltaNjkInv_All(:,i) = abs(ones(nObs,1) ./ DeltaNjk_All(:,i));                                                        ISCONTj2_All(:,i) = ISCONT_All(:,i);                            ISCONTk2_All(:,i) = ISCONT_All(:,i);                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2_All(idx,i) = ISCONT_All(idx+2,i);                                else                                    ISCONTj2_All(idx,i) = ISCONT_All(idx-2,i);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2_All(idx,i) = ISCONT_All(idx+1,i);                                else                                    ISCONTk2_All(idx,i) = ISCONT_All(idx-1,i);                                end;                            end;                            DeltaISCONT_All(:,i) = zeros(nObs,1);                            for idx=1:nObs                                DeltaISCONT_All(idx,i) = (-1)^(ISCONT_All(idx,i)+1);                                DeltaISCONTj2_All(idx,i) = (-1)^(ISCONTj2_All(idx,i)+1);                                DeltaISCONTk2_All(idx,i) = (-1)^(ISCONTk2_All(idx,i)+1);                                                    SigmaH_jk_All(idx,i) = Njk_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_j2k_All(idx,i) = Nj2k_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_jk2_All(idx,i) = Njk2_All(idx,i)/(SigmaM_k2_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk_All(idx,i) = N2jk_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_j2k_All(idx,i) = N2j2k_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk2_All(idx,i) = N2jk2_All(idx,i)/(SigmaM2_k2_All(idx,i)*NBar(idx,1)*gamma);                            end;                        HospCostPerPatient_All = zeros(nObs,16);                        HospCostPerPatient2_All = zeros(nObs,16);                        for idxStruct=1:16                            for idxObs=1:nObs                                if ( (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient_All(idxObs,idxStruct) = RealHospCost_All(idxObs,idxStruct) / (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct));                                end;                                if ( (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient2_All(idxObs,idxStruct) = RealHospCost2_All(idxObs,idxStruct) / (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct));                                end;                            end;                        end;                                                            DeltaHospCosts = HospRealCosts - HospNewRealCosts;                            DeltaHMOPremTemp_All(:,i) = ( SigmaM_k_All(:,i).*(Prem_All(:,i)-HMOCost) - SigmaM2_k_All(:,i).*(Prem2_All(:,i)-HMOCost) ).*NBar;                                                                 end; %for i=1:16                                                                    %     A_Hosp_All = DeltaISCONT_All + AbsDeltaNjkInv_All .* DeltaNjk2_All;                    %     A_HMO_All = (-1) * (DeltaISCONT_All + AbsDeltaNjkInv_All .* DeltaNj2k_All) ;                    %     C_Hosp_All = AbsDeltaNjkInv_All .* (RealHospCost_All - RealHospCost2_All - DeltaNjk2_All .* kron(Ejk2,ones(1,16)));                    %     C_HMO_All = (-1) * AbsDeltaNjkInv_All .* (DeltaHMOPremTemp_All - DeltaNj2k_All .* kron(Ej2k,ones(1,16)));                                                A_Hosp_All = DeltaNjk_All + DeltaNjk2_All;                        A_HMO_All = (-1) * (DeltaNjk_All + DeltaNj2k_All);                        C_Hosp_All = RealHospCost_All - RealHospCost2_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                        C_HMO_All = (-1)*(DeltaHMOPremTemp_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                % 10 Cases to consider: 1-NoContracts; 2 LHosp(1),S(0); 3 L(2),S(0);                        % 4-L(0),S(1); 5-L(0),S(2); 6-L1S1 Same; 7-L1S1Diff; 8-L1S2; 9-L2S1;                        % 10-AllContract                        Struct_Indicator = zeros(nMkts,10);                        for idxMkt = 1:nMkts                            idxObs = (idxMkt-1)*4+1;                            if ( EqNetwork(idxObs,1) == 0 ) Struct_Indicator(idxMkt,1) = 1; end;                            if ( (EqNetwork(idxObs,1) == 1)||(EqNetwork(idxObs,1) == 4) ) Struct_Indicator(idxMkt,2) = 1; end;                            if ( EqNetwork(idxObs,1) == 5 ) Struct_Indicator(idxMkt,3) = 1; end;                            if ( (EqNetwork(idxObs,1) == 2)||(EqNetwork(idxObs,1) == 8) ) Struct_Indicator(idxMkt,4) = 1; end;                                    if ( EqNetwork(idxObs,1) == 10 ) Struct_Indicator(idxMkt,5) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 3)||(EqNetwork(idxObs,1) == 12) ) Struct_Indicator(idxMkt,6) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 6)||(EqNetwork(idxObs,1) == 9) ) Struct_Indicator(idxMkt,7) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 11)||(EqNetwork(idxObs,1) == 14) ) Struct_Indicator(idxMkt,8) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 7)||(EqNetwork(idxObs,1) == 13) ) Struct_Indicator(idxMkt,9) = 1; end;                                            if ( EqNetwork(idxObs,1) == 15 ) Struct_Indicator(idxMkt,10) = 1; end;                                        end;                                            % Form what Structures look like in ALL NETWORK STRUCTURS                        ISCONT_AllNetworks = zeros(nObs,16);                        DeltaISCONT_AllNetworks = zeros(nObs,16);                        for idxObs = 1:nObs                            if (mod(idxObs,4)==1)                                ISCONT_AllNetworks(idxObs,5) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                            if (mod(idxObs,4)==2)                                ISCONT_AllNetworks(idxObs,2) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                            end;                                if (mod(idxObs,4)==3)                                ISCONT_AllNetworks(idxObs,9) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                if (mod(idxObs,4)==0)                                ISCONT_AllNetworks(idxObs,3) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                for idxStruct = 1:16                                        DeltaISCONT_AllNetworks(idxObs,idxStruct) = (-1)^(ISCONT_AllNetworks(idxObs,idxStruct)+1);                            end;                        end;                                            Struct_Indicator_Sum = zeros(1,10);                        for iCase=1:10                            Struct_Indicator_Sum(1,iCase) = sum(Struct_Indicator(:,iCase));                        end;                                                                         nBetas = (Max-Min)*Grid+1;                                              %======================================================================                        %BEGIN PROBABILITY TESTING                        %======================================================================                        BetaPredictionAll = zeros(nBetaProbIterations,2);                        BetaPredictionAllMeas = zeros(nBetaProbIterations,2);                      if (~doProbMeasErrors)                                                for idxIter=1:nBetaProbIterations                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                            MomentsPerNetworkStructure = size(MktINST,2);                            ZMoments_AllNetworks = zeros(MomentsPerNetworkStructure,10,nBetas);                            SMoments_AllNetworks = zeros(MomentsPerNetworkStructure,nMkts,10,nBetas);                            [BetaPredictionAll(idxIter,:), ZMoments_AllNetworks, SMomentsAll_AllNetworks, fvalProb]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All,C_HMO_All,A_Hosp_All,C_Hosp_All,MktINST,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                            TJTestStatisticProb = fvalProb * nMkts^.5;                            display(BetaPredictionAll);                        end;                        BetaPredMins = sortrows(BetaPredictionAll(:,1));                        BetaPredMaxs = sortrows(BetaPredictionAll(:,2));                                 end;                                                if doProbMeasErrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                            MeasErrorSinglePoints=0;                                                for idxMeasError=1:nMeasErrorIterProb                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                    if SDMultipleCost>0                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                else                                    HospMeasurementErrors = zeros(nObs/2,1);                                end;                                if SDMultiplePop > 0                                    NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                else                                    NBarMeasurementErrors = zeros(nObs/4, 1);                                end;                                Etaj = kron(HospMeasurementErrors,ones(2,16));                                Omega = kron(NBarMeasurementErrors,ones(4,16));                                                                    Psijk_A_All = gamma * (SigmaM_k_All.*SigmaH_jk_All);                                Psijk_B_All = gamma * (SigmaM2_k_All.*Sigma2H_jk_All);                                Psijk_All = Psijk_A_All-Psijk_B_All;                                Psij2k_A_All = gamma * (SigmaM_k_All.*SigmaH_j2k_All);                                Psij2k_B_All = gamma * (SigmaM2_k_All.*Sigma2H_j2k_All);                                Psij2k_All = Psij2k_A_All-Psij2k_B_All;                                        Psijk2_A_All = gamma * (SigmaM_k2_All.*SigmaH_jk2_All);                                Psijk2_B_All = gamma * (SigmaM2_k2_All.*Sigma2H_jk2_All);                                Psijk2_All = Psijk2_A_All-Psijk2_B_All;                                                                        PsiHosp_A_All = Psijk_A_All + Psijk2_A_All;                                PsiHosp_B_All = Psijk_B_All + Psijk2_B_All;                                                                DeltaNjkErr_All = DeltaNjk_All + Omega.*Psijk_All;                                AbsDeltaNjkErrInv_All = abs(ones(nObs,16) ./ DeltaNjkErr_All);                                DeltaNjk2Err_All = DeltaNjk2_All + Omega.*Psijk2_All;                                DeltaNj2kErr_All = DeltaNj2k_All + Omega.*Psij2k_All;                                                                        %             C_Hosp_All_Meas = AbsDeltaNjkErrInv_All .* ( (Njk_All+Njk2_All+Omega.*PsiHosp_A_All).*(HospCostPerPatient_All+Etaj) - (N2jk_All+N2jk2_All+Omega.*PsiHosp_B_All).*(HospCostPerPatient2_All+Etaj) - DeltaNjk2Err_All.*kron(Ejk2,ones(1,16))  );                                %             C_HMO_All_Meas = (-1) * AbsDeltaNjkErrInv_All .* (  ( SigmaM_k_All.*(Prem_All-kron(HMOCost,ones(1,16)))-SigmaM2_k_All.*(Prem2_All-kron(HMOCost,ones(1,16))) ).*( kron(NBar,ones(1,16)) +Omega) - DeltaNj2kErr_All.*kron(Ej2k,ones(1,16))    );                                %             A_Hosp_All_Meas = DeltaISCONT_All + AbsDeltaNjkErrInv_All.*DeltaNjk2Err_All;                                %             A_HMO_All_Meas = (-1) * (DeltaISCONT_All + AbsDeltaNjkErrInv_All.*DeltaNj2kErr_All);                                                    A_Hosp_All_Meas = DeltaNjkErr_All + DeltaNjk2Err_All;                                A_HMO_All_Meas = (-1) * (DeltaNjkErr_All + DeltaNj2kErr_All);                                C_Hosp_All_Meas = (Njk_All+Njk2_All+Omega.*PsiHosp_A_All).*(HospCostPerPatient_All+Etaj) - (N2jk_All+N2jk2_All+Omega.*PsiHosp_B_All).*(HospCostPerPatient2_All+Etaj) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                                C_HMO_All_Meas = (-1)*( ( SigmaM_k_All.*(Prem_All-kron(HMOCost,ones(1,16)))-SigmaM2_k_All.*(Prem2_All-kron(HMOCost,ones(1,16))) ).*(  kron(NBar,ones(1,16)) + Omega) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                                MomentsPerNetworkStructureMeas= size(MktINSTmeas,2);                                ZMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,10,nBetas);                                SMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,nMkts,10,nBetas);                                [BetaPredictionAllMeas(idxMeasError,:), ZMoments_AllNetworksMeas, SMomentsAll_AllNetworksMeas, fvalProbMeas]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All_Meas,C_HMO_All_Meas,A_Hosp_All_Meas,C_Hosp_All_Meas,MktINSTmeas,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                                TJTestStatisticProbMeas = fvalProbMeas * nMkts^.5;                                display(BetaPredictionAllMeas);                            end; %foridxMeas                                end; %ifUseMeasures                    end; %Do Probabilities                        BETA(11).B = [BETA(11).B; BetaPredictionAllMeas];                                          end;                               if doPart12                                        %============================================================                    %PART 12                    %============================================================                    %Flags                    RobustIneq=0;                    IgnoreStructErrors = 1;         %Mis-specifies error by not subtracting it out                    doVar = 0;                      %Calculate 95 conf interval                    doTestStatistic=0;                    DimBeta=1;                    nConfInterval_Iterations=200;                    ConfInterval = .95;                                        %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                    useConstINST = 1;                    usemeaserrorsINST = 0;                    useNoCostINST = 0;                                        %MEASUREMENT ERROR                    usemeaserrors = 0;              %Add Measurement Noise to Moments                    nMeasErrorIter = 0;                    SDMultipleCost = .25^.5;                    SDMultiplePop = .05^.5;                                SDMultipleCost = 0;                    SDMultiplePop =0;                                                    %Probability Parameters                    doProbabilities=1;                    doProbBootstrap=1;                    doProbVar=1;                    doProbMeasErrors=1;                    doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                    nBetaProbIterations=1;                    nMeasErrorIterProb=1;                                        %Measurement Errors                    SD1 = 9;                    SD2 = 300;                    SD_HospMeasurementErrors = SDMultipleCost*SD1;                    SD_NBarMeasurementErrors = SDMultiplePop*SD2;                                        if ~RobustIneq                        NumMoments = 3;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                    else                        NumMoments = 2;                    end;                                        lb_temp=-100;                    ub_temp=10000;                    lb=lb_temp*ones(DimBeta,1);                    ub=ub_temp*ones(DimBeta,1);                                        options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                                                 x1 = XALL(iMonteDraw).x1;                            x2 = XALL(iMonteDraw).x2;                                                        NumHosp = 2;                            NumHMO = 2;                            gamma=.075;                            % Import Data %                            x = [x1];                            nObs = size(x,[1]);                            x = [zeros(nObs,1) x];                            % Prepare Data Matrices %                            ID_RunID = x(:,1);                            ID_Iter = x(:,2);                            ID_HMO = x(:,3);                            ID_Hosp = x(:,4);                            NBar = x(:,5);                            ISCONT = x(:,6);                            HospCost_j = x(:,7);                            HospCost_j2 = x(:,8);                            ISCAP_j = x(:,9);                            ISCAP_j2 = x(:,10);                            HospCap_j = x(:,11);                            HospCap_j2 = x(:,12);                            HospChar = x(:,13);                            Tjk = x(:,14);                            Tjk2 = x(:,15);                            Tj2k = x(:,16);                            Njk = x(:,17);                            Njk2 = x(:,18);                            Nj2k = x(:,19);                            HospRealProf = x(:,20);                            HospRealCosts = x(:,21);                            HospNewRealProf = x(:,22);                            HospNewRealCosts = x(:,23);                            HMONewPrem = x(:,24);                            N2jk = x(:,25);                            N2jk2 = x(:,26);                            HMOChar = x(:,27);                            HMOPrem = x(:,28);                            HMOCost = x(:,29);                            HMORealProf = x(:,30);                            SigmaM_k = x(:,31);                            SigmaM_k2 = x(:,32);                            HMONewProf = x(:,33);                            Sigma2M_k = x(:,34);                            Sigma2M_k2 = x(:,35);                            N2jk_temp = x(:,36);                            N2j2k = x(:,37);                            MktStd_k = x(:,38);                            MktStd_k2 = x(:,39);                            HospCap_Mkt = HospCap_j+ HospCap_j2;                            HospCost_j_Wtd = HospCost_j.*(HospCap_j./HospCap_Mkt);                            HospCost_j2_Wtd = HospCost_j2.*(HospCap_j2./HospCap_Mkt);                            HospCost_MktAvg_Wtd = (HospCost_j_Wtd +HospCost_j2_Wtd)/2;                            HospCost_MktAvg = (HospCost_j + HospCost_j2)/2;                            HospCost_DiffAvg = HospCost_j - HospCost_MktAvg;                            HospCost_DiffAvgWts = HospCost_j - HospCost_MktAvg_Wtd;                            HospCost_DiffAvgWts_j2 = HospCost_j2 - HospCost_MktAvg_Wtd;                            %PopPerBed = NBar./(HospCap_j + HospCap_j2);                            SigmaH_jk = zeros(nObs,1);                            SigmaH_j2k = zeros(nObs,1);                            SigmaH_jk2 = zeros(nObs,1);                            Sigma2H_jk = zeros(nObs,1);                            Sigma2H_j2k = zeros(nObs,1);                            Sigma2H_jk2 = zeros(nObs,1);                            for idx=1:nObs                                SigmaH_jk(idx,1) = Njk(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_j2k(idx,1) = Nj2k(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_jk2(idx,1) = Njk2(idx,1)/(SigmaM_k2(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk(idx,1) = N2jk(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_j2k(idx,1) = N2j2k(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk2(idx,1) = N2jk2(idx,1)/(Sigma2M_k2(idx,1)*NBar(idx,1)*gamma);                            end;                            DeltaNjk = Njk-N2jk;                            DeltaNj2k = Nj2k-N2j2k;                            DeltaNjk2 = Njk2-N2jk2;                            nMkts = nObs / 4;                            nContracts = 0;                            for i=1:size(ISCONT,[1])                                if ISCONT(i,1)==1                                    nContracts = nContracts+1;                                end;                            end;                            HClassTemp = [1;1;2;2;];                            HospClass = kron(nMkts,HClassTemp);                            ISCONTj2 = ISCONT;                            ISCONTk2 = ISCONT;                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2(idx,1) = ISCONT(idx+2,1);                                else                                    ISCONTj2(idx,1) = ISCONT(idx-2,1);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2(idx,1) = ISCONT(idx+1,1);                                else                                    ISCONTk2(idx,1) = ISCONT(idx-1,1);                                end;                                end;                            DeltaISCONT = zeros(nObs,1);                            for i=1:nObs                                DeltaISCONT(i,1) = (-1)^(ISCONT(i,1)+1);                                DeltaISCONTj2(i,1) = (-1)^(ISCONTj2(i,1)+1);                                DeltaISCONTk2(i,1) = (-1)^(ISCONTk2(i,1)+1);                            end;                            HospCostPerPatient = zeros(nObs,1);                            HospCostPerPatient2 = zeros(nObs,1);                            for i=1:nObs                                if (Njk(i,1) + Njk2(i,1))>0                                    HospCostPerPatient(i,1) = HospRealCosts(i,1) / (Njk(i,1) + Njk2(i,1));                                end;                                if (N2jk(i,1) + N2jk2(i,1))>0                                        HospCostPerPatient2(i,1) = HospNewRealCosts(i,1) / (N2jk(i,1) + N2jk2(i,1));                                end;                            end;                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                            %==========================================================================                            %INSTRUMENTS =========================                            %==========================================================================                            NormInst = [ones(nObs,1) Njk NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                            NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*HospCost_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                            Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*HospCost_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                            MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*HospCost_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                            ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCap_j ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                            CostInteraction = [HospCost_j.*NBar HospCost_j.*HospCap_j HospCost_j.*HospCost_j HospCost_j.*(HospCap_j+HospCap_j2) HospCost_j.*HMOChar HospCost_j.*HospChar];                            SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                            CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                            HospCostsWtd = [HospCost_j_Wtd HospCost_j2_Wtd HospCost_MktAvg HospCost_MktAvg_Wtd];                    INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                    INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                                           ALLINST_NoNjk = INST;                    ALLINST_NoNjk(:,2) = [];                                        NBarMkt = zeros(nMkts,1);                    SumCapMkt = zeros(nMkts,1);                    SumCostMkt = zeros(nMkts,1);                    SumISCAPMkt = zeros(nMkts,1);                    for iMkt=1:nMkts                        idx = (iMkt-1)*4+1;                        NBarMkt(iMkt,1) = NBar(idx,1);                        SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                        SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                        SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                        end;                                        MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                    MktINSTmeas = MktINST;                    if ~(SDMultiplePop + SDMultipleCost == 0)                        if (SDMultiplePop>0) && (SDMultipleCost>0)                            MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                        else                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                        end;                    end;                                             MktINST = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                    MktINSTmeas = MktINST;                                        if usemeaserrorsINST                        PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                        ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                    end;                                        if useConstINST                        INST = [ones(nObs,1) ];                        INST_NoContract = [ones(nObs,1)];                        MktINSTmeas= [ones(nMkts,1)];                                            end;                                        if useNoCostINST                        NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                        NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                        Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                        MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                        ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                    end;                                                                                                                                            nInst = size(INST,2);                    nInstNoContract = size(INST_NoContract,2);                                             %==========================================================================                            %ERROR CALCULATIONS========================================================                            %==========================================================================                            useTotalTransfers = 1;                            %Calculate distribution of errors using total transfers (need to account                            %for Njk/N2jk issue                            if useTotalTransfers                                NNjk=Njk+N2jk;                                NNj2k=NNjk;                                NNjk2=NNjk;                                NN2jk=NNjk;                                NN2j2k=NNjk;                                NN2jk2=NNjk;                                for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        NNj2k(idx,1) = NNjk(idx+2,1);                                    else                                        NNj2k(idx,1) = NNjk(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        NNjk2(idx,1) = NNjk(idx+1,1);                                    else                                        NNjk2(idx,1) = NNjk(idx-1,1);                                    end;                                    end;                                X = [NNjk ALLINST_NoNjk];                                Beta_0 = TrueBeta0;                                Beta = TrueBeta;                                                                Tjk_NEW = (NNjk.*Tjk - X*TrueBeta + NNjk*TrueBeta0)./NNjk;                                Tj2k_NEW = Tjk_NEW;                                Tjk2_NEW = Tjk_NEW;                                 Tjk_Residual = Tjk - Tjk_NEW;                                Tj2k_Residual = Tjk_Residual;                                Tjk2_Residual = Tjk_Residual;                                    for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx+2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx+2,1);                                    else                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx-2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx+1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx+1,1);                                    else                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx-1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx-1,1);                                    end;                                    end;                                  Ejk = Njk.* Tjk_NEW - Njk * Beta_0;                                    Ej2k = Nj2k.*Tj2k_NEW - Nj2k * Beta_0;                                    Ejk2 = Njk2.*Tjk2_NEW - Njk2 * Beta_0;                                EjkALL = NNjk.* Tjk_NEW - NNjk * Beta_0;                                                                    E2jk = N2jk.*Tjk_NEW - N2jk * Beta_0;                                E2j2k = N2j2k.*Tj2k_NEW - N2j2k * Beta_0;                                    E2jk2 = N2jk2.*Tjk2_NEW - N2jk2 * Beta_0;                                   Delta_Ejk = Ejk - E2jk;                                Delta_Ej2k = Ej2k - E2j2k;                                Delta_Ejk2 = Ejk2 - E2jk2;                            else                                cons = ones(nObs,1);                                Beta_0 = (inv(cons'*cons)*(cons'*(Tjk)));                                        Ejk = Tjk - Beta_0;                                  Ej2k = Tj2k - Beta_0;                                Ejk2 = Tjk2 - Beta_0;                            end;                            Err2=zeros(nMkts,4);                % Residuals in nMkts x 4 form. Reshaped Err.                            for i=0:nMkts-1                                for j=1:4                                    Err2(i+1,j) = EjkALL(i*4+j);                                end;                            end;                            ErrMean = mean(Err2)';                            VarErr=zeros(4,4);                            for n=1:nMkts                                SSample = Err2(n,:)';                                VarErr = VarErr + ((SSample-ErrMean)*(SSample-ErrMean)');                            end;                            VarErr = VarErr / (nMkts);                            CholVarErr = chol(VarErr);                                    %display(Beta_0);                            Beta_Start = [Beta_Start Beta_0];                            NumBetaStart = size(Beta_Start,2);                                           %==========================================================================                    %==========================================================================                    %==========================================================================                    % PROBABILITIES                    %==========================================================================                    %==========================================================================                    %==========================================================================                    if doProbabilities                        %x2 = importdata ('data_AllNetworkStructures.txt');                                              ISCONT_All = zeros(nObs,16);                        Njk_All = zeros(nObs,16);                        Njk2_All = zeros(nObs,16);                        Nj2k_All = zeros(nObs,16);                        N2jk_All = zeros(nObs,16);                        N2jk2_All = zeros(nObs,16);                        N2j2k2_All = zeros(nObs,16);                        Prem_All = zeros(nObs,16);                        Prem2_All = zeros(nObs,16);                        HospCost_All = zeros(nObs,16);                        HospCost2_All = zeros(nObs,16);                        SigmaM_k_All = zeros(nObs,16);                            SigmaM_k2_All = zeros(nObs,16);                             SigmaM2_k_All = zeros(nObs,16);                        SigmaM2_k2_All = zeros(nObs,16);                            HospCost_j_All =  zeros(nObs,16);                            HospCost_j2_All =  zeros(nObs,16);                                RealHospProf_All = zeros(nObs,16);                            RealHospProf2_All = zeros(nObs,16);                        RealHospCost_All = zeros(nObs,16);                        RealHospCost2_All = zeros(nObs,16);                        RealHMOProf_all = zeros(nObs,16);                        RealHMOProf2_all = zeros(nObs,16);                                            DeltaNjk_All = zeros(nObs,16);                            DeltaNj2k_All = zeros(nObs,16);                            DeltaNjk2_All = zeros(nObs,16);                                DeltaNjkInv_All = zeros(nObs,16);                                                        ISCONTj2_All = zeros(nObs,16);                        ISCONTk2_All = zeros(nObs,16);                        DeltaISCONT_All = zeros(nObs,16);                        DeltaISCONTj2_All = zeros(nObs,16);                        DeltaISCONTk2_All = zeros(nObs,16);                                                SigmaH_jk_All = zeros(nObs,16);                        SigmaH_j2k_All = zeros(nObs,16);                        SigmaH_jk2_All = zeros(nObs,16);                        Sigma2H_jk_All = zeros(nObs,16);                        Sigma2H_j2k_All = zeros(nObs,16);                        Sigma2H_jk2_All = zeros(nObs,16);                                                DeltaHMOPremTemp_All = zeros(nObs,16);                        EqNetwork = x2(:,4);                        x2Idx=9; %where alternative network structure data begins                        for i = 1:16                            ISCONT_All(:,i) = x2(:,x2Idx);                            Njk_All(:,i) = x2(:,x2Idx+1);                            Njk2_All(:,i) = x2(:,x2Idx+2);                            Nj2k_All(:,i) = x2(:,x2Idx+3);                                    N2jk_All(:,i) = x2(:,x2Idx+4);                            N2jk2_All(:,i) = x2(:,x2Idx+5);                            N2j2k_All(:,i) = x2(:,x2Idx+6);                                            Prem_All(:,i) = x2(:,x2Idx+7);                            Prem2_All(:,i) = x2(:,x2Idx+8);                            SigmaM_k_All(:,i) = x2(:,x2Idx+9);                            SigmaM_k2_All(:,i) = x2(:,x2Idx+10);                            SigmaM2_k_All(:,i) = x2(:,x2Idx+11);                            SigmaM2_k2_All(:,i) = x2(:,x2Idx+12);                            HospCost_j_All(:,i) = x2(:,x2Idx+13);                            HospCost_j2_All(:,i) = x2(:,x2Idx+14);                                    RealHospProf_All(:,i) = x2(:,x2Idx+15);                            RealHospProf2_All(:,i) = x2(:,x2Idx+16);                            RealHospCost_All(:,i) = x2(:,x2Idx+17);                            RealHospCost2_All(:,i) = x2(:,x2Idx+18);                            RealHMOProf_All(:,i) = x2(:,x2Idx+19);                            RealHMOProf_All(:,i) = x2(:,x2Idx+20);                                    x2Idx = x2Idx + 22;                                                DeltaNjk_All(:,i) = Njk_All(:,i)-N2jk_All(:,i);                            DeltaNj2k_All(:,i) = Nj2k_All(:,i)-N2j2k_All(:,i);                            DeltaNjk2_All(:,i) = Njk2_All(:,i)-N2jk2_All(:,i);                            AbsDeltaNjkInv_All(:,i) = abs(ones(nObs,1) ./ DeltaNjk_All(:,i));                                                        ISCONTj2_All(:,i) = ISCONT_All(:,i);                            ISCONTk2_All(:,i) = ISCONT_All(:,i);                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2_All(idx,i) = ISCONT_All(idx+2,i);                                else                                    ISCONTj2_All(idx,i) = ISCONT_All(idx-2,i);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2_All(idx,i) = ISCONT_All(idx+1,i);                                else                                    ISCONTk2_All(idx,i) = ISCONT_All(idx-1,i);                                end;                            end;                            DeltaISCONT_All(:,i) = zeros(nObs,1);                            for idx=1:nObs                                DeltaISCONT_All(idx,i) = (-1)^(ISCONT_All(idx,i)+1);                                DeltaISCONTj2_All(idx,i) = (-1)^(ISCONTj2_All(idx,i)+1);                                DeltaISCONTk2_All(idx,i) = (-1)^(ISCONTk2_All(idx,i)+1);                                                    SigmaH_jk_All(idx,i) = Njk_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_j2k_All(idx,i) = Nj2k_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_jk2_All(idx,i) = Njk2_All(idx,i)/(SigmaM_k2_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk_All(idx,i) = N2jk_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_j2k_All(idx,i) = N2j2k_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk2_All(idx,i) = N2jk2_All(idx,i)/(SigmaM2_k2_All(idx,i)*NBar(idx,1)*gamma);                            end;                        HospCostPerPatient_All = zeros(nObs,16);                        HospCostPerPatient2_All = zeros(nObs,16);                        for idxStruct=1:16                            for idxObs=1:nObs                                if ( (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient_All(idxObs,idxStruct) = RealHospCost_All(idxObs,idxStruct) / (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct));                                end;                                if ( (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient2_All(idxObs,idxStruct) = RealHospCost2_All(idxObs,idxStruct) / (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct));                                end;                            end;                        end;                                                            DeltaHospCosts = HospRealCosts - HospNewRealCosts;                            DeltaHMOPremTemp_All(:,i) = ( SigmaM_k_All(:,i).*(Prem_All(:,i)-HMOCost) - SigmaM2_k_All(:,i).*(Prem2_All(:,i)-HMOCost) ).*NBar;                                                            end; %for i=1:16                                                                       A_Hosp_All = DeltaNjk_All + DeltaNjk2_All;                        A_HMO_All = (-1) * (DeltaNjk_All + DeltaNj2k_All);                        C_Hosp_All = RealHospCost_All - RealHospCost2_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                        C_HMO_All = (-1)*(DeltaHMOPremTemp_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                % 10 Cases to consider: 1-NoContracts; 2 LHosp(1),S(0); 3 L(2),S(0);                        % 4-L(0),S(1); 5-L(0),S(2); 6-L1S1 Same; 7-L1S1Diff; 8-L1S2; 9-L2S1;                        % 10-AllContract                        Struct_Indicator = zeros(nMkts,10);                        for idxMkt = 1:nMkts                            idxObs = (idxMkt-1)*4+1;                            if ( EqNetwork(idxObs,1) == 0 ) Struct_Indicator(idxMkt,1) = 1; end;                            if ( (EqNetwork(idxObs,1) == 1)||(EqNetwork(idxObs,1) == 4) ) Struct_Indicator(idxMkt,2) = 1; end;                            if ( EqNetwork(idxObs,1) == 5 ) Struct_Indicator(idxMkt,3) = 1; end;                            if ( (EqNetwork(idxObs,1) == 2)||(EqNetwork(idxObs,1) == 8) ) Struct_Indicator(idxMkt,4) = 1; end;                                    if ( EqNetwork(idxObs,1) == 10 ) Struct_Indicator(idxMkt,5) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 3)||(EqNetwork(idxObs,1) == 12) ) Struct_Indicator(idxMkt,6) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 6)||(EqNetwork(idxObs,1) == 9) ) Struct_Indicator(idxMkt,7) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 11)||(EqNetwork(idxObs,1) == 14) ) Struct_Indicator(idxMkt,8) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 7)||(EqNetwork(idxObs,1) == 13) ) Struct_Indicator(idxMkt,9) = 1; end;                                            if ( EqNetwork(idxObs,1) == 15 ) Struct_Indicator(idxMkt,10) = 1; end;                                        end;                                            % Form what Structures look like in ALL NETWORK STRUCTURS                        ISCONT_AllNetworks = zeros(nObs,16);                        DeltaISCONT_AllNetworks = zeros(nObs,16);                        for idxObs = 1:nObs                            if (mod(idxObs,4)==1)                                ISCONT_AllNetworks(idxObs,5) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                            if (mod(idxObs,4)==2)                                ISCONT_AllNetworks(idxObs,2) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                            end;                                if (mod(idxObs,4)==3)                                ISCONT_AllNetworks(idxObs,9) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                if (mod(idxObs,4)==0)                                ISCONT_AllNetworks(idxObs,3) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                for idxStruct = 1:16                                        DeltaISCONT_AllNetworks(idxObs,idxStruct) = (-1)^(ISCONT_AllNetworks(idxObs,idxStruct)+1);                            end;                        end;                                                           Struct_Indicator_Sum = zeros(1,10);                        for iCase=1:10                            Struct_Indicator_Sum(1,iCase) = sum(Struct_Indicator(:,iCase));                        end;                                                                         nBetas = (Max-Min)*Grid+1;                                              %======================================================================                        %BEGIN PROBABILITY TESTING                        %======================================================================                        BetaPredictionAll = zeros(nBetaProbIterations,2);                        BetaPredictionAllMeas = zeros(nBetaProbIterations,2);                      if (~doProbMeasErrors)                                                for idxIter=1:nBetaProbIterations                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                            MomentsPerNetworkStructure = size(MktINST,2);                            ZMoments_AllNetworks = zeros(MomentsPerNetworkStructure,10,nBetas);                            SMoments_AllNetworks = zeros(MomentsPerNetworkStructure,nMkts,10,nBetas);                            [BetaPredictionAll(idxIter,:), ZMoments_AllNetworks, SMomentsAll_AllNetworks, fvalProb]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All,C_HMO_All,A_Hosp_All,C_Hosp_All,MktINST,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                            TJTestStatisticProb = fvalProb * nMkts^.5;                            display(BetaPredictionAll);                        end;                        BetaPredMins = sortrows(BetaPredictionAll(:,1));                        BetaPredMaxs = sortrows(BetaPredictionAll(:,2));                                                   end;                                                if doProbMeasErrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                            MeasErrorSinglePoints=0;                                                for idxMeasError=1:nMeasErrorIterProb                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                    if SDMultipleCost>0                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                else                                    HospMeasurementErrors = zeros(nObs/2,1);                                end;                                if SDMultiplePop > 0                                    NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                else                                    NBarMeasurementErrors = zeros(nObs/4, 1);                                end;                                Etaj = kron(HospMeasurementErrors,ones(2,16));                                Omega = kron(NBarMeasurementErrors,ones(4,16));                                                                    Psijk_A_All = gamma * (SigmaM_k_All.*SigmaH_jk_All);                                Psijk_B_All = gamma * (SigmaM2_k_All.*Sigma2H_jk_All);                                Psijk_All = Psijk_A_All-Psijk_B_All;                                Psij2k_A_All = gamma * (SigmaM_k_All.*SigmaH_j2k_All);                                Psij2k_B_All = gamma * (SigmaM2_k_All.*Sigma2H_j2k_All);                                Psij2k_All = Psij2k_A_All-Psij2k_B_All;                                        Psijk2_A_All = gamma * (SigmaM_k2_All.*SigmaH_jk2_All);                                Psijk2_B_All = gamma * (SigmaM2_k2_All.*Sigma2H_jk2_All);                                Psijk2_All = Psijk2_A_All-Psijk2_B_All;                                                                        PsiHosp_A_All = Psijk_A_All + Psijk2_A_All;                                PsiHosp_B_All = Psijk_B_All + Psijk2_B_All;                                                                DeltaNjkErr_All = DeltaNjk_All + Omega.*Psijk_All;                                AbsDeltaNjkErrInv_All = abs(ones(nObs,16) ./ DeltaNjkErr_All);                                DeltaNjk2Err_All = DeltaNjk2_All + Omega.*Psijk2_All;                                DeltaNj2kErr_All = DeltaNj2k_All + Omega.*Psij2k_All;                                                                        %             C_Hosp_All_Meas = AbsDeltaNjkErrInv_All .* ( (Njk_All+Njk2_All+Omega.*PsiHosp_A_All).*(HospCostPerPatient_All+Etaj) - (N2jk_All+N2jk2_All+Omega.*PsiHosp_B_All).*(HospCostPerPatient2_All+Etaj) - DeltaNjk2Err_All.*kron(Ejk2,ones(1,16))  );                                %             C_HMO_All_Meas = (-1) * AbsDeltaNjkErrInv_All .* (  ( SigmaM_k_All.*(Prem_All-kron(HMOCost,ones(1,16)))-SigmaM2_k_All.*(Prem2_All-kron(HMOCost,ones(1,16))) ).*( kron(NBar,ones(1,16)) +Omega) - DeltaNj2kErr_All.*kron(Ej2k,ones(1,16))    );                                %             A_Hosp_All_Meas = DeltaISCONT_All + AbsDeltaNjkErrInv_All.*DeltaNjk2Err_All;                                %             A_HMO_All_Meas = (-1) * (DeltaISCONT_All + AbsDeltaNjkErrInv_All.*DeltaNj2kErr_All);                                                    A_Hosp_All_Meas = DeltaNjkErr_All + DeltaNjk2Err_All;                                A_HMO_All_Meas = (-1) * (DeltaNjkErr_All + DeltaNj2kErr_All);                                C_Hosp_All_Meas = (Njk_All+Njk2_All+Omega.*PsiHosp_A_All).*(HospCostPerPatient_All+Etaj) - (N2jk_All+N2jk2_All+Omega.*PsiHosp_B_All).*(HospCostPerPatient2_All+Etaj) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                                C_HMO_All_Meas = (-1)*( ( SigmaM_k_All.*(Prem_All-kron(HMOCost,ones(1,16)))-SigmaM2_k_All.*(Prem2_All-kron(HMOCost,ones(1,16))) ).*(  kron(NBar,ones(1,16)) + Omega) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                                MomentsPerNetworkStructureMeas= size(MktINSTmeas,2);                                ZMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,10,nBetas);                                SMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,nMkts,10,nBetas);                                [BetaPredictionAllMeas(idxMeasError,:), ZMoments_AllNetworksMeas, SMomentsAll_AllNetworksMeas, fvalProbMeas]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All_Meas,C_HMO_All_Meas,A_Hosp_All_Meas,C_Hosp_All_Meas,MktINSTmeas,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                                TJTestStatisticProbMeas = fvalProbMeas * nMkts^.5;                                display(BetaPredictionAllMeas);                            end; %foridxMeas                                end; %ifUseMeasures                    end; %Do Probabilities                        BETA(12).B = [BETA(12).B; BetaPredictionAllMeas];                end;                                if doPart13                    %============================================================                    %PART 13                    %============================================================                    %Flags                    RobustIneq=0;                    IgnoreStructErrors = 1;         %Mis-specifies error by not subtracting it out                    doVar = 0;                      %Calculate 95 conf interval                    doTestStatistic=0;                    DimBeta=1;                    nConfInterval_Iterations=200;                    ConfInterval = .95;                                        %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                    useConstINST = 1;                    usemeaserrorsINST = 0;                    useNoCostINST = 0;                                        %MEASUREMENT ERROR                    usemeaserrors = 0;              %Add Measurement Noise to Moments                    nMeasErrorIter = 0;                    SDMultipleCost = .25^.5;                    SDMultiplePop = .05^.5;                    SDMultiplePop = 0;                    SDMultipleCost = 0;                                        %Probability Parameters                    doProbabilities=1;                    doProbBootstrap=0;                    doProbVar=1;                    doProbMeasErrors=1;                    doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                    nBetaProbIterations=1;                    nMeasErrorIterProb=1;                                        %Measurement Errors                    SD1 = 9;                    SD2 = 300;                    SD_HospMeasurementErrors = SDMultipleCost*SD1;                    SD_NBarMeasurementErrors = SDMultiplePop*SD2;                                        if ~RobustIneq                        NumMoments = 3;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                    else                        NumMoments = 2;                    end;                                        lb_temp=-100;                    ub_temp=10000;                    lb=lb_temp*ones(DimBeta,1);                    ub=ub_temp*ones(DimBeta,1);                                        options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                                                 x1 = XALL(iMonteDraw).x1;                            x2 = XALL(iMonteDraw).x2;                                                        NumHosp = 2;                            NumHMO = 2;                            gamma=.075;                            % Import Data %                            x = [x1];                            nObs = size(x,[1]);                            x = [zeros(nObs,1) x];                            % Prepare Data Matrices %                            ID_RunID = x(:,1);                            ID_Iter = x(:,2);                            ID_HMO = x(:,3);                            ID_Hosp = x(:,4);                            NBar = x(:,5);                            ISCONT = x(:,6);                            HospCost_j = x(:,7);                            HospCost_j2 = x(:,8);                            ISCAP_j = x(:,9);                            ISCAP_j2 = x(:,10);                            HospCap_j = x(:,11);                            HospCap_j2 = x(:,12);                            HospChar = x(:,13);                            Tjk = x(:,14);                            Tjk2 = x(:,15);                            Tj2k = x(:,16);                            Njk = x(:,17);                            Njk2 = x(:,18);                            Nj2k = x(:,19);                            HospRealProf = x(:,20);                            HospRealCosts = x(:,21);                            HospNewRealProf = x(:,22);                            HospNewRealCosts = x(:,23);                            HMONewPrem = x(:,24);                            N2jk = x(:,25);                            N2jk2 = x(:,26);                            HMOChar = x(:,27);                            HMOPrem = x(:,28);                            HMOCost = x(:,29);                            HMORealProf = x(:,30);                            SigmaM_k = x(:,31);                            SigmaM_k2 = x(:,32);                            HMONewProf = x(:,33);                            Sigma2M_k = x(:,34);                            Sigma2M_k2 = x(:,35);                            N2jk_temp = x(:,36);                            N2j2k = x(:,37);                            MktStd_k = x(:,38);                            MktStd_k2 = x(:,39);                            HospCap_Mkt = HospCap_j+ HospCap_j2;                            HospCost_j_Wtd = HospCost_j.*(HospCap_j./HospCap_Mkt);                            HospCost_j2_Wtd = HospCost_j2.*(HospCap_j2./HospCap_Mkt);                            HospCost_MktAvg_Wtd = (HospCost_j_Wtd +HospCost_j2_Wtd)/2;                            HospCost_MktAvg = (HospCost_j + HospCost_j2)/2;                            HospCost_DiffAvg = HospCost_j - HospCost_MktAvg;                            HospCost_DiffAvgWts = HospCost_j - HospCost_MktAvg_Wtd;                            HospCost_DiffAvgWts_j2 = HospCost_j2 - HospCost_MktAvg_Wtd;                            %PopPerBed = NBar./(HospCap_j + HospCap_j2);                            SigmaH_jk = zeros(nObs,1);                            SigmaH_j2k = zeros(nObs,1);                            SigmaH_jk2 = zeros(nObs,1);                            Sigma2H_jk = zeros(nObs,1);                            Sigma2H_j2k = zeros(nObs,1);                            Sigma2H_jk2 = zeros(nObs,1);                            for idx=1:nObs                                SigmaH_jk(idx,1) = Njk(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_j2k(idx,1) = Nj2k(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_jk2(idx,1) = Njk2(idx,1)/(SigmaM_k2(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk(idx,1) = N2jk(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_j2k(idx,1) = N2j2k(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk2(idx,1) = N2jk2(idx,1)/(Sigma2M_k2(idx,1)*NBar(idx,1)*gamma);                            end;                            DeltaNjk = Njk-N2jk;                            DeltaNj2k = Nj2k-N2j2k;                            DeltaNjk2 = Njk2-N2jk2;                            nMkts = nObs / 4;                            nContracts = 0;                            for i=1:size(ISCONT,[1])                                if ISCONT(i,1)==1                                    nContracts = nContracts+1;                                end;                            end;                            HClassTemp = [1;1;2;2;];                            HospClass = kron(nMkts,HClassTemp);                            ISCONTj2 = ISCONT;                            ISCONTk2 = ISCONT;                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2(idx,1) = ISCONT(idx+2,1);                                else                                    ISCONTj2(idx,1) = ISCONT(idx-2,1);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2(idx,1) = ISCONT(idx+1,1);                                else                                    ISCONTk2(idx,1) = ISCONT(idx-1,1);                                end;                                end;                            DeltaISCONT = zeros(nObs,1);                            for i=1:nObs                                DeltaISCONT(i,1) = (-1)^(ISCONT(i,1)+1);                                DeltaISCONTj2(i,1) = (-1)^(ISCONTj2(i,1)+1);                                DeltaISCONTk2(i,1) = (-1)^(ISCONTk2(i,1)+1);                            end;                            HospCostPerPatient = zeros(nObs,1);                            HospCostPerPatient2 = zeros(nObs,1);                            for i=1:nObs                                if (Njk(i,1) + Njk2(i,1))>0                                    HospCostPerPatient(i,1) = HospRealCosts(i,1) / (Njk(i,1) + Njk2(i,1));                                end;                                if (N2jk(i,1) + N2jk2(i,1))>0                                        HospCostPerPatient2(i,1) = HospNewRealCosts(i,1) / (N2jk(i,1) + N2jk2(i,1));                                end;                            end;                            %TEMP = (Njk+Njk2).*HospCostsPerPatient - (N2jk+N2jk2) .* HospCostsPerPatient2;                            %AAA=  TEMP-DeltaHospCosts;                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                            %==========================================================================                            %INSTRUMENTS =========================                            %==========================================================================                            NormInst = [ones(nObs,1) Njk NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                            NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*HospCost_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                            Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*HospCost_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                            MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*HospCost_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                            ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCap_j ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                            CostInteraction = [HospCost_j.*NBar HospCost_j.*HospCap_j HospCost_j.*HospCost_j HospCost_j.*(HospCap_j+HospCap_j2) HospCost_j.*HMOChar HospCost_j.*HospChar];                            SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                            CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                            HospCostsWtd = [HospCost_j_Wtd HospCost_j2_Wtd HospCost_MktAvg HospCost_MktAvg_Wtd];                    INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                    INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                                           ALLINST_NoNjk = INST;                    ALLINST_NoNjk(:,2) = [];                                        NBarMkt = zeros(nMkts,1);                    SumCapMkt = zeros(nMkts,1);                    SumCostMkt = zeros(nMkts,1);                    SumISCAPMkt = zeros(nMkts,1);                    for iMkt=1:nMkts                        idx = (iMkt-1)*4+1;                        NBarMkt(iMkt,1) = NBar(idx,1);                        SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                        SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                        SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                        end;                                        MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                    MktINSTmeas = MktINST;                    if ~(SDMultiplePop + SDMultipleCost == 0)                        if (SDMultiplePop>0) && (SDMultipleCost>0)                            MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                        else                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                        end;                    end;                                         MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                                        if usemeaserrorsINST                        PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                        ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                    end;                                        if useConstINST                        INST = [ones(nObs,1) ];                        INST_NoContract = [ones(nObs,1)];                        MktINSTmeas= [ones(nMkts,1)];                                            end;                                        if useNoCostINST                        NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                        NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                        Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                        MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                        ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                    end;                    nInst = size(INST,2);                    nInstNoContract = size(INST_NoContract,2);                                             %==========================================================================                            %ERROR CALCULATIONS========================================================                            %==========================================================================                            useTotalTransfers = 1;                            %Calculate distribution of errors using total transfers (need to account                            %for Njk/N2jk issue                            if useTotalTransfers                                NNjk=Njk+N2jk;                                NNj2k=NNjk;                                NNjk2=NNjk;                                NN2jk=NNjk;                                NN2j2k=NNjk;                                NN2jk2=NNjk;                                for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        NNj2k(idx,1) = NNjk(idx+2,1);                                    else                                        NNj2k(idx,1) = NNjk(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        NNjk2(idx,1) = NNjk(idx+1,1);                                    else                                        NNjk2(idx,1) = NNjk(idx-1,1);                                    end;                                    end;                                X = [NNjk ALLINST_NoNjk];                                                        Beta_0 = TrueBeta0;                                Beta = TrueBeta;                                                                Tjk_NEW = (NNjk.*Tjk - X*TrueBeta + NNjk*TrueBeta0)./NNjk;                                Tj2k_NEW = Tjk_NEW;                                Tjk2_NEW = Tjk_NEW;                                 Tjk_Residual = Tjk - Tjk_NEW;                                Tj2k_Residual = Tjk_Residual;                                Tjk2_Residual = Tjk_Residual;                                    for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx+2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx+2,1);                                    else                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx-2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx+1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx+1,1);                                    else                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx-1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx-1,1);                                    end;                                    end;                                  Ejk = Njk.* Tjk_NEW - Njk * Beta_0;                                    Ej2k = Nj2k.*Tj2k_NEW - Nj2k * Beta_0;                                    Ejk2 = Njk2.*Tjk2_NEW - Njk2 * Beta_0;                                EjkALL = NNjk.* Tjk_NEW - NNjk * Beta_0;                                                                    E2jk = N2jk.*Tjk_NEW - N2jk * Beta_0;                                E2j2k = N2j2k.*Tj2k_NEW - N2j2k * Beta_0;                                    E2jk2 = N2jk2.*Tjk2_NEW - N2jk2 * Beta_0;                                   Delta_Ejk = Ejk - E2jk;                                Delta_Ej2k = Ej2k - E2j2k;                                Delta_Ejk2 = Ejk2 - E2jk2;                            else                                cons = ones(nObs,1);                                Beta_0 = (inv(cons'*cons)*(cons'*(Tjk)));                                        Ejk = Tjk - Beta_0;                                  Ej2k = Tj2k - Beta_0;                                Ejk2 = Tjk2 - Beta_0;                            end;                            Err2=zeros(nMkts,4);                % Residuals in nMkts x 4 form. Reshaped Err.                            for i=0:nMkts-1                                for j=1:4                                    Err2(i+1,j) = EjkALL(i*4+j);                                end;                            end;                            ErrMean = mean(Err2)';                            VarErr=zeros(4,4);                            for n=1:nMkts                                SSample = Err2(n,:)';                                VarErr = VarErr + ((SSample-ErrMean)*(SSample-ErrMean)');                            end;                            VarErr = VarErr / (nMkts);                            CholVarErr = chol(VarErr);                                    %display(Beta_0);                            Beta_Start = [Beta_Start Beta_0];                            NumBetaStart = size(Beta_Start,2);                                           %==========================================================================                    %==========================================================================                    %==========================================================================                    % PROBABILITIES                    %==========================================================================                    %==========================================================================                    %==========================================================================                    if doProbabilities                        %x2 = importdata ('data_AllNetworkStructures.txt');                                              ISCONT_All = zeros(nObs,16);                        Njk_All = zeros(nObs,16);                        Njk2_All = zeros(nObs,16);                        Nj2k_All = zeros(nObs,16);                        N2jk_All = zeros(nObs,16);                        N2jk2_All = zeros(nObs,16);                        N2j2k2_All = zeros(nObs,16);                        Prem_All = zeros(nObs,16);                        Prem2_All = zeros(nObs,16);                        HospCost_All = zeros(nObs,16);                        HospCost2_All = zeros(nObs,16);                        SigmaM_k_All = zeros(nObs,16);                            SigmaM_k2_All = zeros(nObs,16);                             SigmaM2_k_All = zeros(nObs,16);                        SigmaM2_k2_All = zeros(nObs,16);                            HospCost_j_All =  zeros(nObs,16);                            HospCost_j2_All =  zeros(nObs,16);                                RealHospProf_All = zeros(nObs,16);                            RealHospProf2_All = zeros(nObs,16);                        RealHospCost_All = zeros(nObs,16);                        RealHospCost2_All = zeros(nObs,16);                        RealHMOProf_all = zeros(nObs,16);                        RealHMOProf2_all = zeros(nObs,16);                                            DeltaNjk_All = zeros(nObs,16);                            DeltaNj2k_All = zeros(nObs,16);                            DeltaNjk2_All = zeros(nObs,16);                                DeltaNjkInv_All = zeros(nObs,16);                                                        ISCONTj2_All = zeros(nObs,16);                        ISCONTk2_All = zeros(nObs,16);                        DeltaISCONT_All = zeros(nObs,16);                        DeltaISCONTj2_All = zeros(nObs,16);                        DeltaISCONTk2_All = zeros(nObs,16);                                                SigmaH_jk_All = zeros(nObs,16);                        SigmaH_j2k_All = zeros(nObs,16);                        SigmaH_jk2_All = zeros(nObs,16);                        Sigma2H_jk_All = zeros(nObs,16);                        Sigma2H_j2k_All = zeros(nObs,16);                        Sigma2H_jk2_All = zeros(nObs,16);                                                DeltaHMOPremTemp_All = zeros(nObs,16);                        EqNetwork = x2(:,4);                        x2Idx=9; %where alternative network structure data begins                        for i = 1:16                            ISCONT_All(:,i) = x2(:,x2Idx);                            Njk_All(:,i) = x2(:,x2Idx+1);                            Njk2_All(:,i) = x2(:,x2Idx+2);                            Nj2k_All(:,i) = x2(:,x2Idx+3);                                    N2jk_All(:,i) = x2(:,x2Idx+4);                            N2jk2_All(:,i) = x2(:,x2Idx+5);                            N2j2k_All(:,i) = x2(:,x2Idx+6);                                            Prem_All(:,i) = x2(:,x2Idx+7);                            Prem2_All(:,i) = x2(:,x2Idx+8);                            SigmaM_k_All(:,i) = x2(:,x2Idx+9);                            SigmaM_k2_All(:,i) = x2(:,x2Idx+10);                            SigmaM2_k_All(:,i) = x2(:,x2Idx+11);                            SigmaM2_k2_All(:,i) = x2(:,x2Idx+12);                            HospCost_j_All(:,i) = x2(:,x2Idx+13);                            HospCost_j2_All(:,i) = x2(:,x2Idx+14);                                    RealHospProf_All(:,i) = x2(:,x2Idx+15);                            RealHospProf2_All(:,i) = x2(:,x2Idx+16);                            RealHospCost_All(:,i) = x2(:,x2Idx+17);                            RealHospCost2_All(:,i) = x2(:,x2Idx+18);                            RealHMOProf_All(:,i) = x2(:,x2Idx+19);                            RealHMOProf_All(:,i) = x2(:,x2Idx+20);                                    x2Idx = x2Idx + 22;                                                DeltaNjk_All(:,i) = Njk_All(:,i)-N2jk_All(:,i);                            DeltaNj2k_All(:,i) = Nj2k_All(:,i)-N2j2k_All(:,i);                            DeltaNjk2_All(:,i) = Njk2_All(:,i)-N2jk2_All(:,i);                            AbsDeltaNjkInv_All(:,i) = abs(ones(nObs,1) ./ DeltaNjk_All(:,i));                                                        ISCONTj2_All(:,i) = ISCONT_All(:,i);                            ISCONTk2_All(:,i) = ISCONT_All(:,i);                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2_All(idx,i) = ISCONT_All(idx+2,i);                                else                                    ISCONTj2_All(idx,i) = ISCONT_All(idx-2,i);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2_All(idx,i) = ISCONT_All(idx+1,i);                                else                                    ISCONTk2_All(idx,i) = ISCONT_All(idx-1,i);                                end;                            end;                            DeltaISCONT_All(:,i) = zeros(nObs,1);                            for idx=1:nObs                                DeltaISCONT_All(idx,i) = (-1)^(ISCONT_All(idx,i)+1);                                DeltaISCONTj2_All(idx,i) = (-1)^(ISCONTj2_All(idx,i)+1);                                DeltaISCONTk2_All(idx,i) = (-1)^(ISCONTk2_All(idx,i)+1);                                                    SigmaH_jk_All(idx,i) = Njk_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_j2k_All(idx,i) = Nj2k_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_jk2_All(idx,i) = Njk2_All(idx,i)/(SigmaM_k2_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk_All(idx,i) = N2jk_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_j2k_All(idx,i) = N2j2k_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk2_All(idx,i) = N2jk2_All(idx,i)/(SigmaM2_k2_All(idx,i)*NBar(idx,1)*gamma);                            end;                        HospCostPerPatient_All = zeros(nObs,16);                        HospCostPerPatient2_All = zeros(nObs,16);                        for idxStruct=1:16                            for idxObs=1:nObs                                if ( (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient_All(idxObs,idxStruct) = RealHospCost_All(idxObs,idxStruct) / (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct));                                end;                                if ( (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient2_All(idxObs,idxStruct) = RealHospCost2_All(idxObs,idxStruct) / (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct));                                end;                            end;                        end;                                                            DeltaHospCosts = HospRealCosts - HospNewRealCosts;                            DeltaHMOPremTemp_All(:,i) = ( SigmaM_k_All(:,i).*(Prem_All(:,i)-HMOCost) - SigmaM2_k_All(:,i).*(Prem2_All(:,i)-HMOCost) ).*NBar;                                                           end; %for i=1:16                                            A_Hosp_All = DeltaNjk_All + DeltaNjk2_All;                        A_HMO_All = (-1) * (DeltaNjk_All + DeltaNj2k_All);                        C_Hosp_All = RealHospCost_All - RealHospCost2_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                        C_HMO_All = (-1)*(DeltaHMOPremTemp_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                % 10 Cases to consider: 1-NoContracts; 2 LHosp(1),S(0); 3 L(2),S(0);                        % 4-L(0),S(1); 5-L(0),S(2); 6-L1S1 Same; 7-L1S1Diff; 8-L1S2; 9-L2S1;                        % 10-AllContract                        Struct_Indicator = zeros(nMkts,10);                        for idxMkt = 1:nMkts                            idxObs = (idxMkt-1)*4+1;                            if ( EqNetwork(idxObs,1) == 0 ) Struct_Indicator(idxMkt,1) = 1; end;                            if ( (EqNetwork(idxObs,1) == 1)||(EqNetwork(idxObs,1) == 4) ) Struct_Indicator(idxMkt,2) = 1; end;                            if ( EqNetwork(idxObs,1) == 5 ) Struct_Indicator(idxMkt,3) = 1; end;                            if ( (EqNetwork(idxObs,1) == 2)||(EqNetwork(idxObs,1) == 8) ) Struct_Indicator(idxMkt,4) = 1; end;                                    if ( EqNetwork(idxObs,1) == 10 ) Struct_Indicator(idxMkt,5) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 3)||(EqNetwork(idxObs,1) == 12) ) Struct_Indicator(idxMkt,6) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 6)||(EqNetwork(idxObs,1) == 9) ) Struct_Indicator(idxMkt,7) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 11)||(EqNetwork(idxObs,1) == 14) ) Struct_Indicator(idxMkt,8) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 7)||(EqNetwork(idxObs,1) == 13) ) Struct_Indicator(idxMkt,9) = 1; end;                                            if ( EqNetwork(idxObs,1) == 15 ) Struct_Indicator(idxMkt,10) = 1; end;                                        end;                                            % Form what Structures look like in ALL NETWORK STRUCTURS                        ISCONT_AllNetworks = zeros(nObs,16);                        DeltaISCONT_AllNetworks = zeros(nObs,16);                        for idxObs = 1:nObs                            if (mod(idxObs,4)==1)                                ISCONT_AllNetworks(idxObs,5) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                            if (mod(idxObs,4)==2)                                ISCONT_AllNetworks(idxObs,2) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                            end;                                if (mod(idxObs,4)==3)                                ISCONT_AllNetworks(idxObs,9) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                if (mod(idxObs,4)==0)                                ISCONT_AllNetworks(idxObs,3) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                for idxStruct = 1:16                                        DeltaISCONT_AllNetworks(idxObs,idxStruct) = (-1)^(ISCONT_AllNetworks(idxObs,idxStruct)+1);                            end;                        end;                                            Struct_Indicator_Sum = zeros(1,10);                        for iCase=1:10                            Struct_Indicator_Sum(1,iCase) = sum(Struct_Indicator(:,iCase));                        end;                                                                         nBetas = (Max-Min)*Grid+1;                                              %======================================================================                        %BEGIN PROBABILITY TESTING                        %======================================================================                        BetaPredictionAll = zeros(nBetaProbIterations,2);                        BetaPredictionAllMeas = zeros(nBetaProbIterations,2);                      if (~doProbMeasErrors)                                                for idxIter=1:nBetaProbIterations                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                            MomentsPerNetworkStructure = size(MktINST,2);                            ZMoments_AllNetworks = zeros(MomentsPerNetworkStructure,10,nBetas);                            SMoments_AllNetworks = zeros(MomentsPerNetworkStructure,nMkts,10,nBetas);                            [BetaPredictionAll(idxIter,:), ZMoments_AllNetworks, SMomentsAll_AllNetworks, fvalProb]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All,C_HMO_All,A_Hosp_All,C_Hosp_All,MktINST,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                            TJTestStatisticProb = fvalProb * nMkts^.5;                            display(BetaPredictionAll);                        end;                        BetaPredMins = sortrows(BetaPredictionAll(:,1));                        BetaPredMaxs = sortrows(BetaPredictionAll(:,2));                                 end;                        if doProbMeasErrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                            MeasErrorSinglePoints=0;                                                for idxMeasError=1:nMeasErrorIterProb                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                    if SDMultipleCost>0                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                else                                    HospMeasurementErrors = zeros(nObs/2,1);                                end;                                if SDMultiplePop > 0                                    NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                else                                    NBarMeasurementErrors = zeros(nObs/4, 1);                                end;                                Etaj = kron(HospMeasurementErrors,ones(2,16));                                Omega = kron(NBarMeasurementErrors,ones(4,16));                                                                    Psijk_A_All = gamma * (SigmaM_k_All.*SigmaH_jk_All);                                Psijk_B_All = gamma * (SigmaM2_k_All.*Sigma2H_jk_All);                                Psijk_All = Psijk_A_All-Psijk_B_All;                                Psij2k_A_All = gamma * (SigmaM_k_All.*SigmaH_j2k_All);                                Psij2k_B_All = gamma * (SigmaM2_k_All.*Sigma2H_j2k_All);                                Psij2k_All = Psij2k_A_All-Psij2k_B_All;                                        Psijk2_A_All = gamma * (SigmaM_k2_All.*SigmaH_jk2_All);                                Psijk2_B_All = gamma * (SigmaM2_k2_All.*Sigma2H_jk2_All);                                Psijk2_All = Psijk2_A_All-Psijk2_B_All;                                                                        PsiHosp_A_All = Psijk_A_All + Psijk2_A_All;                                PsiHosp_B_All = Psijk_B_All + Psijk2_B_All;                                                                DeltaNjkErr_All = DeltaNjk_All + Omega.*Psijk_All;                                AbsDeltaNjkErrInv_All = abs(ones(nObs,16) ./ DeltaNjkErr_All);                                DeltaNjk2Err_All = DeltaNjk2_All + Omega.*Psijk2_All;                                DeltaNj2kErr_All = DeltaNj2k_All + Omega.*Psij2k_All;                                                                        A_Hosp_All_Meas = DeltaNjkErr_All + DeltaNjk2Err_All;                                A_HMO_All_Meas = (-1) * (DeltaNjkErr_All + DeltaNj2kErr_All);                                C_Hosp_All_Meas = (Njk_All+Njk2_All+Omega.*PsiHosp_A_All).*(HospCostPerPatient_All+Etaj) - (N2jk_All+N2jk2_All+Omega.*PsiHosp_B_All).*(HospCostPerPatient2_All+Etaj) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                                C_HMO_All_Meas = (-1)*( ( SigmaM_k_All.*(Prem_All-kron(HMOCost,ones(1,16)))-SigmaM2_k_All.*(Prem2_All-kron(HMOCost,ones(1,16))) ).*(  kron(NBar,ones(1,16)) + Omega) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                                MomentsPerNetworkStructureMeas= size(MktINSTmeas,2);                                ZMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,10,nBetas);                                SMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,nMkts,10,nBetas);                                [BetaPredictionAllMeas(idxMeasError,:), ZMoments_AllNetworksMeas, SMomentsAll_AllNetworksMeas, fvalProbMeas]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All_Meas,C_HMO_All_Meas,A_Hosp_All_Meas,C_Hosp_All_Meas,MktINSTmeas,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                                TJTestStatisticProbMeas = fvalProbMeas * nMkts^.5;                                display(BetaPredictionAllMeas);                            end; %foridxMeas                                end; %ifUseMeasures                    end; %Do Probabilities                        BETA(13).B = [BETA(13).B; BetaPredictionAllMeas];                          end;                                                     if doPart14                    %============================================================                    %PART 14                    %============================================================                    %Flags                    RobustIneq=0;                    IgnoreStructErrors = 1;         %Mis-specifies error by not subtracting it out                    doVar = 0;                      %Calculate 95 conf interval                    doTestStatistic=0;                    DimBeta=1;                    nConfInterval_Iterations=200;                    ConfInterval = .95;                                        %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                    useConstINST = 1;                    usemeaserrorsINST = 0;                    useNoCostINST = 0;                                        %MEASUREMENT ERROR                    usemeaserrors = 0;              %Add Measurement Noise to Moments                    nMeasErrorIter = 0;                    SDMultipleCost = .25^.5;                    SDMultiplePop = .05^.5;                                        %Probability Parameters                    doProbabilities=1;                    doProbBootstrap=0;                    doProbVar=1;                    doProbMeasErrors=1;                    doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                    nBetaProbIterations=1;                    nMeasErrorIterProb=1;                                        %Measurement Errors                    SD1 = 9;                    SD2 = 300;                    SD_HospMeasurementErrors = SDMultipleCost*SD1;                    SD_NBarMeasurementErrors = SDMultiplePop*SD2;                                        if ~RobustIneq                        NumMoments = 3;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                    else                        NumMoments = 2;                    end;                                        lb_temp=-100;                    ub_temp=10000;                    lb=lb_temp*ones(DimBeta,1);                    ub=ub_temp*ones(DimBeta,1);                                        options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                                                 x1 = XALL(iMonteDraw).x1;                            x2 = XALL(iMonteDraw).x2;                                                        NumHosp = 2;                            NumHMO = 2;                            gamma=.075;                            % Import Data %                            x = [x1];                            nObs = size(x,[1]);                            x = [zeros(nObs,1) x];                            % Prepare Data Matrices %                            ID_RunID = x(:,1);                            ID_Iter = x(:,2);                            ID_HMO = x(:,3);                            ID_Hosp = x(:,4);                            NBar = x(:,5);                            ISCONT = x(:,6);                            HospCost_j = x(:,7);                            HospCost_j2 = x(:,8);                            ISCAP_j = x(:,9);                            ISCAP_j2 = x(:,10);                            HospCap_j = x(:,11);                            HospCap_j2 = x(:,12);                            HospChar = x(:,13);                            Tjk = x(:,14);                            Tjk2 = x(:,15);                            Tj2k = x(:,16);                            Njk = x(:,17);                            Njk2 = x(:,18);                            Nj2k = x(:,19);                            HospRealProf = x(:,20);                            HospRealCosts = x(:,21);                            HospNewRealProf = x(:,22);                            HospNewRealCosts = x(:,23);                            HMONewPrem = x(:,24);                            N2jk = x(:,25);                            N2jk2 = x(:,26);                            HMOChar = x(:,27);                            HMOPrem = x(:,28);                            HMOCost = x(:,29);                            HMORealProf = x(:,30);                            SigmaM_k = x(:,31);                            SigmaM_k2 = x(:,32);                            HMONewProf = x(:,33);                            Sigma2M_k = x(:,34);                            Sigma2M_k2 = x(:,35);                            N2jk_temp = x(:,36);                            N2j2k = x(:,37);                            MktStd_k = x(:,38);                            MktStd_k2 = x(:,39);                            HospCap_Mkt = HospCap_j+ HospCap_j2;                            HospCost_j_Wtd = HospCost_j.*(HospCap_j./HospCap_Mkt);                            HospCost_j2_Wtd = HospCost_j2.*(HospCap_j2./HospCap_Mkt);                            HospCost_MktAvg_Wtd = (HospCost_j_Wtd +HospCost_j2_Wtd)/2;                            HospCost_MktAvg = (HospCost_j + HospCost_j2)/2;                            HospCost_DiffAvg = HospCost_j - HospCost_MktAvg;                            HospCost_DiffAvgWts = HospCost_j - HospCost_MktAvg_Wtd;                            HospCost_DiffAvgWts_j2 = HospCost_j2 - HospCost_MktAvg_Wtd;                            %PopPerBed = NBar./(HospCap_j + HospCap_j2);                            SigmaH_jk = zeros(nObs,1);                            SigmaH_j2k = zeros(nObs,1);                            SigmaH_jk2 = zeros(nObs,1);                            Sigma2H_jk = zeros(nObs,1);                            Sigma2H_j2k = zeros(nObs,1);                            Sigma2H_jk2 = zeros(nObs,1);                            for idx=1:nObs                                SigmaH_jk(idx,1) = Njk(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_j2k(idx,1) = Nj2k(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_jk2(idx,1) = Njk2(idx,1)/(SigmaM_k2(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk(idx,1) = N2jk(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_j2k(idx,1) = N2j2k(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk2(idx,1) = N2jk2(idx,1)/(Sigma2M_k2(idx,1)*NBar(idx,1)*gamma);                            end;                            DeltaNjk = Njk-N2jk;                            DeltaNj2k = Nj2k-N2j2k;                            DeltaNjk2 = Njk2-N2jk2;                            nMkts = nObs / 4;                            nContracts = 0;                            for i=1:size(ISCONT,[1])                                if ISCONT(i,1)==1                                    nContracts = nContracts+1;                                end;                            end;                            HClassTemp = [1;1;2;2;];                            HospClass = kron(nMkts,HClassTemp);                            ISCONTj2 = ISCONT;                            ISCONTk2 = ISCONT;                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2(idx,1) = ISCONT(idx+2,1);                                else                                    ISCONTj2(idx,1) = ISCONT(idx-2,1);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2(idx,1) = ISCONT(idx+1,1);                                else                                    ISCONTk2(idx,1) = ISCONT(idx-1,1);                                end;                                end;                            DeltaISCONT = zeros(nObs,1);                            for i=1:nObs                                DeltaISCONT(i,1) = (-1)^(ISCONT(i,1)+1);                                DeltaISCONTj2(i,1) = (-1)^(ISCONTj2(i,1)+1);                                DeltaISCONTk2(i,1) = (-1)^(ISCONTk2(i,1)+1);                            end;                            HospCostPerPatient = zeros(nObs,1);                            HospCostPerPatient2 = zeros(nObs,1);                            for i=1:nObs                                if (Njk(i,1) + Njk2(i,1))>0                                    HospCostPerPatient(i,1) = HospRealCosts(i,1) / (Njk(i,1) + Njk2(i,1));                                end;                                if (N2jk(i,1) + N2jk2(i,1))>0                                        HospCostPerPatient2(i,1) = HospNewRealCosts(i,1) / (N2jk(i,1) + N2jk2(i,1));                                end;                            end;                            %TEMP = (Njk+Njk2).*HospCostsPerPatient - (N2jk+N2jk2) .* HospCostsPerPatient2;                            %AAA=  TEMP-DeltaHospCosts;                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                            %==========================================================================                            %INSTRUMENTS =========================                            %==========================================================================                            NormInst = [ones(nObs,1) Njk NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                            NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*HospCost_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                            Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*HospCost_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                            MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*HospCost_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                            ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCap_j ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                            CostInteraction = [HospCost_j.*NBar HospCost_j.*HospCap_j HospCost_j.*HospCost_j HospCost_j.*(HospCap_j+HospCap_j2) HospCost_j.*HMOChar HospCost_j.*HospChar];                            SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                            CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                            HospCostsWtd = [HospCost_j_Wtd HospCost_j2_Wtd HospCost_MktAvg HospCost_MktAvg_Wtd];                    INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                    INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                                           ALLINST_NoNjk = INST;                    ALLINST_NoNjk(:,2) = [];                                        NBarMkt = zeros(nMkts,1);                    SumCapMkt = zeros(nMkts,1);                    SumCostMkt = zeros(nMkts,1);                    SumISCAPMkt = zeros(nMkts,1);                    for iMkt=1:nMkts                        idx = (iMkt-1)*4+1;                        NBarMkt(iMkt,1) = NBar(idx,1);                        SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                        SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                        SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                        end;                                        MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                    MktINSTmeas = MktINST;                    if ~(SDMultiplePop + SDMultipleCost == 0)                        if (SDMultiplePop>0) && (SDMultipleCost>0)                            MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                        else                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                        end;                    end;                                         MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                                        if usemeaserrorsINST                        PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                        ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                    end;                                        if useConstINST                        INST = [ones(nObs,1) ];                        INST_NoContract = [ones(nObs,1)];                        MktINSTmeas= [ones(nMkts,1)];                                            end;                                        if useNoCostINST                        NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                        NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                        Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                        MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                        ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                    end;                    nInst = size(INST,2);                    nInstNoContract = size(INST_NoContract,2);                                             %==========================================================================                            %ERROR CALCULATIONS========================================================                            %==========================================================================                            useTotalTransfers = 1;                            %Calculate distribution of errors using total transfers (need to account                            %for Njk/N2jk issue                            if useTotalTransfers                                NNjk=Njk+N2jk;                                NNj2k=NNjk;                                NNjk2=NNjk;                                NN2jk=NNjk;                                NN2j2k=NNjk;                                NN2jk2=NNjk;                                for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        NNj2k(idx,1) = NNjk(idx+2,1);                                    else                                        NNj2k(idx,1) = NNjk(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        NNjk2(idx,1) = NNjk(idx+1,1);                                    else                                        NNjk2(idx,1) = NNjk(idx-1,1);                                    end;                                    end;                                X = [NNjk ALLINST_NoNjk];                                            Beta_0 = TrueBeta0;                                Beta = TrueBeta;                                                                Tjk_NEW = (NNjk.*Tjk - X*TrueBeta + NNjk*TrueBeta0)./NNjk;                                Tj2k_NEW = Tjk_NEW;                                Tjk2_NEW = Tjk_NEW;                                 Tjk_Residual = Tjk - Tjk_NEW;                                Tj2k_Residual = Tjk_Residual;                                Tjk2_Residual = Tjk_Residual;                                    for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx+2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx+2,1);                                    else                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx-2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx+1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx+1,1);                                    else                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx-1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx-1,1);                                    end;                                    end;                                  Ejk = Njk.* Tjk_NEW - Njk * Beta_0;                                    Ej2k = Nj2k.*Tj2k_NEW - Nj2k * Beta_0;                                    Ejk2 = Njk2.*Tjk2_NEW - Njk2 * Beta_0;                                EjkALL = NNjk.* Tjk_NEW - NNjk * Beta_0;                                                                    E2jk = N2jk.*Tjk_NEW - N2jk * Beta_0;                                E2j2k = N2j2k.*Tj2k_NEW - N2j2k * Beta_0;                                    E2jk2 = N2jk2.*Tjk2_NEW - N2jk2 * Beta_0;                                   Delta_Ejk = Ejk - E2jk;                                Delta_Ej2k = Ej2k - E2j2k;                                Delta_Ejk2 = Ejk2 - E2jk2;                            else                                cons = ones(nObs,1);                                Beta_0 = (inv(cons'*cons)*(cons'*(Tjk)));                                        Ejk = Tjk - Beta_0;                                  Ej2k = Tj2k - Beta_0;                                Ejk2 = Tjk2 - Beta_0;                            end;                            Err2=zeros(nMkts,4);                % Residuals in nMkts x 4 form. Reshaped Err.                            for i=0:nMkts-1                                for j=1:4                                    Err2(i+1,j) = EjkALL(i*4+j);                                end;                            end;                            ErrMean = mean(Err2)';                            VarErr=zeros(4,4);                            for n=1:nMkts                                SSample = Err2(n,:)';                                VarErr = VarErr + ((SSample-ErrMean)*(SSample-ErrMean)');                            end;                            VarErr = VarErr / (nMkts);                            CholVarErr = chol(VarErr);                                    %display(Beta_0);                            Beta_Start = [Beta_Start Beta_0];                            NumBetaStart = size(Beta_Start,2);                                           %==========================================================================                    %==========================================================================                    %==========================================================================                    % PROBABILITIES                    %==========================================================================                    %==========================================================================                    %==========================================================================                    if doProbabilities                        %x2 = importdata ('data_AllNetworkStructures.txt');                                              ISCONT_All = zeros(nObs,16);                        Njk_All = zeros(nObs,16);                        Njk2_All = zeros(nObs,16);                        Nj2k_All = zeros(nObs,16);                        N2jk_All = zeros(nObs,16);                        N2jk2_All = zeros(nObs,16);                        N2j2k2_All = zeros(nObs,16);                        Prem_All = zeros(nObs,16);                        Prem2_All = zeros(nObs,16);                        HospCost_All = zeros(nObs,16);                        HospCost2_All = zeros(nObs,16);                        SigmaM_k_All = zeros(nObs,16);                            SigmaM_k2_All = zeros(nObs,16);                             SigmaM2_k_All = zeros(nObs,16);                        SigmaM2_k2_All = zeros(nObs,16);                            HospCost_j_All =  zeros(nObs,16);                            HospCost_j2_All =  zeros(nObs,16);                                RealHospProf_All = zeros(nObs,16);                            RealHospProf2_All = zeros(nObs,16);                        RealHospCost_All = zeros(nObs,16);                        RealHospCost2_All = zeros(nObs,16);                        RealHMOProf_all = zeros(nObs,16);                        RealHMOProf2_all = zeros(nObs,16);                                            DeltaNjk_All = zeros(nObs,16);                            DeltaNj2k_All = zeros(nObs,16);                            DeltaNjk2_All = zeros(nObs,16);                                DeltaNjkInv_All = zeros(nObs,16);                                                        ISCONTj2_All = zeros(nObs,16);                        ISCONTk2_All = zeros(nObs,16);                        DeltaISCONT_All = zeros(nObs,16);                        DeltaISCONTj2_All = zeros(nObs,16);                        DeltaISCONTk2_All = zeros(nObs,16);                                                SigmaH_jk_All = zeros(nObs,16);                        SigmaH_j2k_All = zeros(nObs,16);                        SigmaH_jk2_All = zeros(nObs,16);                        Sigma2H_jk_All = zeros(nObs,16);                        Sigma2H_j2k_All = zeros(nObs,16);                        Sigma2H_jk2_All = zeros(nObs,16);                                                DeltaHMOPremTemp_All = zeros(nObs,16);                        EqNetwork = x2(:,4);                        x2Idx=9; %where alternative network structure data begins                        for i = 1:16                            ISCONT_All(:,i) = x2(:,x2Idx);                            Njk_All(:,i) = x2(:,x2Idx+1);                            Njk2_All(:,i) = x2(:,x2Idx+2);                            Nj2k_All(:,i) = x2(:,x2Idx+3);                                    N2jk_All(:,i) = x2(:,x2Idx+4);                            N2jk2_All(:,i) = x2(:,x2Idx+5);                            N2j2k_All(:,i) = x2(:,x2Idx+6);                                            Prem_All(:,i) = x2(:,x2Idx+7);                            Prem2_All(:,i) = x2(:,x2Idx+8);                            SigmaM_k_All(:,i) = x2(:,x2Idx+9);                            SigmaM_k2_All(:,i) = x2(:,x2Idx+10);                            SigmaM2_k_All(:,i) = x2(:,x2Idx+11);                            SigmaM2_k2_All(:,i) = x2(:,x2Idx+12);                            HospCost_j_All(:,i) = x2(:,x2Idx+13);                            HospCost_j2_All(:,i) = x2(:,x2Idx+14);                                    RealHospProf_All(:,i) = x2(:,x2Idx+15);                            RealHospProf2_All(:,i) = x2(:,x2Idx+16);                            RealHospCost_All(:,i) = x2(:,x2Idx+17);                            RealHospCost2_All(:,i) = x2(:,x2Idx+18);                            RealHMOProf_All(:,i) = x2(:,x2Idx+19);                            RealHMOProf_All(:,i) = x2(:,x2Idx+20);                                    x2Idx = x2Idx + 22;                                                DeltaNjk_All(:,i) = Njk_All(:,i)-N2jk_All(:,i);                            DeltaNj2k_All(:,i) = Nj2k_All(:,i)-N2j2k_All(:,i);                            DeltaNjk2_All(:,i) = Njk2_All(:,i)-N2jk2_All(:,i);                            AbsDeltaNjkInv_All(:,i) = abs(ones(nObs,1) ./ DeltaNjk_All(:,i));                                                        ISCONTj2_All(:,i) = ISCONT_All(:,i);                            ISCONTk2_All(:,i) = ISCONT_All(:,i);                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2_All(idx,i) = ISCONT_All(idx+2,i);                                else                                    ISCONTj2_All(idx,i) = ISCONT_All(idx-2,i);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2_All(idx,i) = ISCONT_All(idx+1,i);                                else                                    ISCONTk2_All(idx,i) = ISCONT_All(idx-1,i);                                end;                            end;                            DeltaISCONT_All(:,i) = zeros(nObs,1);                            for idx=1:nObs                                DeltaISCONT_All(idx,i) = (-1)^(ISCONT_All(idx,i)+1);                                DeltaISCONTj2_All(idx,i) = (-1)^(ISCONTj2_All(idx,i)+1);                                DeltaISCONTk2_All(idx,i) = (-1)^(ISCONTk2_All(idx,i)+1);                                                    SigmaH_jk_All(idx,i) = Njk_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_j2k_All(idx,i) = Nj2k_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_jk2_All(idx,i) = Njk2_All(idx,i)/(SigmaM_k2_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk_All(idx,i) = N2jk_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_j2k_All(idx,i) = N2j2k_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk2_All(idx,i) = N2jk2_All(idx,i)/(SigmaM2_k2_All(idx,i)*NBar(idx,1)*gamma);                            end;                        HospCostPerPatient_All = zeros(nObs,16);                        HospCostPerPatient2_All = zeros(nObs,16);                        for idxStruct=1:16                            for idxObs=1:nObs                                if ( (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient_All(idxObs,idxStruct) = RealHospCost_All(idxObs,idxStruct) / (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct));                                end;                                if ( (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient2_All(idxObs,idxStruct) = RealHospCost2_All(idxObs,idxStruct) / (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct));                                end;                            end;                        end;                                                            DeltaHospCosts = HospRealCosts - HospNewRealCosts;                            DeltaHMOPremTemp_All(:,i) = ( SigmaM_k_All(:,i).*(Prem_All(:,i)-HMOCost) - SigmaM2_k_All(:,i).*(Prem2_All(:,i)-HMOCost) ).*NBar;                                                                               end; %for i=1:16                                                                        A_Hosp_All = DeltaNjk_All + DeltaNjk2_All;                        A_HMO_All = (-1) * (DeltaNjk_All + DeltaNj2k_All);                        C_Hosp_All = RealHospCost_All - RealHospCost2_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                        C_HMO_All = (-1)*(DeltaHMOPremTemp_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                % 10 Cases to consider: 1-NoContracts; 2 LHosp(1),S(0); 3 L(2),S(0);                        % 4-L(0),S(1); 5-L(0),S(2); 6-L1S1 Same; 7-L1S1Diff; 8-L1S2; 9-L2S1;                        % 10-AllContract                        Struct_Indicator = zeros(nMkts,10);                        for idxMkt = 1:nMkts                            idxObs = (idxMkt-1)*4+1;                            if ( EqNetwork(idxObs,1) == 0 ) Struct_Indicator(idxMkt,1) = 1; end;                            if ( (EqNetwork(idxObs,1) == 1)||(EqNetwork(idxObs,1) == 4) ) Struct_Indicator(idxMkt,2) = 1; end;                            if ( EqNetwork(idxObs,1) == 5 ) Struct_Indicator(idxMkt,3) = 1; end;                            if ( (EqNetwork(idxObs,1) == 2)||(EqNetwork(idxObs,1) == 8) ) Struct_Indicator(idxMkt,4) = 1; end;                                    if ( EqNetwork(idxObs,1) == 10 ) Struct_Indicator(idxMkt,5) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 3)||(EqNetwork(idxObs,1) == 12) ) Struct_Indicator(idxMkt,6) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 6)||(EqNetwork(idxObs,1) == 9) ) Struct_Indicator(idxMkt,7) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 11)||(EqNetwork(idxObs,1) == 14) ) Struct_Indicator(idxMkt,8) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 7)||(EqNetwork(idxObs,1) == 13) ) Struct_Indicator(idxMkt,9) = 1; end;                                            if ( EqNetwork(idxObs,1) == 15 ) Struct_Indicator(idxMkt,10) = 1; end;                                        end;                                            % Form what Structures look like in ALL NETWORK STRUCTURS                        ISCONT_AllNetworks = zeros(nObs,16);                        DeltaISCONT_AllNetworks = zeros(nObs,16);                        for idxObs = 1:nObs                            if (mod(idxObs,4)==1)                                ISCONT_AllNetworks(idxObs,5) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                            if (mod(idxObs,4)==2)                                ISCONT_AllNetworks(idxObs,2) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                            end;                                if (mod(idxObs,4)==3)                                ISCONT_AllNetworks(idxObs,9) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                if (mod(idxObs,4)==0)                                ISCONT_AllNetworks(idxObs,3) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                for idxStruct = 1:16                                        DeltaISCONT_AllNetworks(idxObs,idxStruct) = (-1)^(ISCONT_AllNetworks(idxObs,idxStruct)+1);                            end;                        end;                                            Struct_Indicator_Sum = zeros(1,10);                        for iCase=1:10                            Struct_Indicator_Sum(1,iCase) = sum(Struct_Indicator(:,iCase));                        end;                                                                         nBetas = (Max-Min)*Grid+1;                                              %======================================================================                        %BEGIN PROBABILITY TESTING                        %======================================================================                        BetaPredictionAll = zeros(nBetaProbIterations,2);                        BetaPredictionAllMeas = zeros(nBetaProbIterations,2);                      if (~doProbMeasErrors)                                                for idxIter=1:nBetaProbIterations                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                            MomentsPerNetworkStructure = size(MktINST,2);                            ZMoments_AllNetworks = zeros(MomentsPerNetworkStructure,10,nBetas);                            SMoments_AllNetworks = zeros(MomentsPerNetworkStructure,nMkts,10,nBetas);                            [BetaPredictionAll(idxIter,:), ZMoments_AllNetworks, SMomentsAll_AllNetworks, fvalProb]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All,C_HMO_All,A_Hosp_All,C_Hosp_All,MktINST,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                            TJTestStatisticProb = fvalProb * nMkts^.5;                            display(BetaPredictionAll);                        end;                        BetaPredMins = sortrows(BetaPredictionAll(:,1));                        BetaPredMaxs = sortrows(BetaPredictionAll(:,2));                                 end;                        if doProbMeasErrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                            MeasErrorSinglePoints=0;                                                for idxMeasError=1:nMeasErrorIterProb                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                    if SDMultipleCost>0                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                else                                    HospMeasurementErrors = zeros(nObs/2,1);                                end;                                if SDMultiplePop > 0                                    NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                else                                    NBarMeasurementErrors = zeros(nObs/4, 1);                                end;                                Etaj = kron(HospMeasurementErrors,ones(2,16));                                Omega = kron(NBarMeasurementErrors,ones(4,16));                                                                    Psijk_A_All = gamma * (SigmaM_k_All.*SigmaH_jk_All);                                Psijk_B_All = gamma * (SigmaM2_k_All.*Sigma2H_jk_All);                                Psijk_All = Psijk_A_All-Psijk_B_All;                                Psij2k_A_All = gamma * (SigmaM_k_All.*SigmaH_j2k_All);                                Psij2k_B_All = gamma * (SigmaM2_k_All.*Sigma2H_j2k_All);                                Psij2k_All = Psij2k_A_All-Psij2k_B_All;                                        Psijk2_A_All = gamma * (SigmaM_k2_All.*SigmaH_jk2_All);                                Psijk2_B_All = gamma * (SigmaM2_k2_All.*Sigma2H_jk2_All);                                Psijk2_All = Psijk2_A_All-Psijk2_B_All;                                                                        PsiHosp_A_All = Psijk_A_All + Psijk2_A_All;                                PsiHosp_B_All = Psijk_B_All + Psijk2_B_All;                                                                DeltaNjkErr_All = DeltaNjk_All + Omega.*Psijk_All;                                AbsDeltaNjkErrInv_All = abs(ones(nObs,16) ./ DeltaNjkErr_All);                                DeltaNjk2Err_All = DeltaNjk2_All + Omega.*Psijk2_All;                                DeltaNj2kErr_All = DeltaNj2k_All + Omega.*Psij2k_All;                                                                        %             C_Hosp_All_Meas = AbsDeltaNjkErrInv_All .* ( (Njk_All+Njk2_All+Omega.*PsiHosp_A_All).*(HospCostPerPatient_All+Etaj) - (N2jk_All+N2jk2_All+Omega.*PsiHosp_B_All).*(HospCostPerPatient2_All+Etaj) - DeltaNjk2Err_All.*kron(Ejk2,ones(1,16))  );                                %             C_HMO_All_Meas = (-1) * AbsDeltaNjkErrInv_All .* (  ( SigmaM_k_All.*(Prem_All-kron(HMOCost,ones(1,16)))-SigmaM2_k_All.*(Prem2_All-kron(HMOCost,ones(1,16))) ).*( kron(NBar,ones(1,16)) +Omega) - DeltaNj2kErr_All.*kron(Ej2k,ones(1,16))    );                                %             A_Hosp_All_Meas = DeltaISCONT_All + AbsDeltaNjkErrInv_All.*DeltaNjk2Err_All;                                %             A_HMO_All_Meas = (-1) * (DeltaISCONT_All + AbsDeltaNjkErrInv_All.*DeltaNj2kErr_All);                                                    A_Hosp_All_Meas = DeltaNjkErr_All + DeltaNjk2Err_All;                                A_HMO_All_Meas = (-1) * (DeltaNjkErr_All + DeltaNj2kErr_All);                                C_Hosp_All_Meas = (Njk_All+Njk2_All+Omega.*PsiHosp_A_All).*(HospCostPerPatient_All+Etaj) - (N2jk_All+N2jk2_All+Omega.*PsiHosp_B_All).*(HospCostPerPatient2_All+Etaj) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                                C_HMO_All_Meas = (-1)*( ( SigmaM_k_All.*(Prem_All-kron(HMOCost,ones(1,16)))-SigmaM2_k_All.*(Prem2_All-kron(HMOCost,ones(1,16))) ).*(  kron(NBar,ones(1,16)) + Omega) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                                MomentsPerNetworkStructureMeas= size(MktINSTmeas,2);                                ZMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,10,nBetas);                                SMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,nMkts,10,nBetas);                                [BetaPredictionAllMeas(idxMeasError,:), ZMoments_AllNetworksMeas, SMomentsAll_AllNetworksMeas, fvalProbMeas]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All_Meas,C_HMO_All_Meas,A_Hosp_All_Meas,C_Hosp_All_Meas,MktINSTmeas,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                                TJTestStatisticProbMeas = fvalProbMeas * nMkts^.5;                                display(BetaPredictionAllMeas);                            end; %foridxMeas                                end; %ifUseMeasures                    end; %Do Probabilities                        BETA(14).B = [BETA(14).B; BetaPredictionAllMeas];                          end;                                                            if doPart15                    %============================================================                    %PART 15                    %============================================================                    %Flags                    RobustIneq=0;                    IgnoreStructErrors = 1;         %Mis-specifies error by not subtracting it out                    doVar = 0;                      %Calculate 95 conf interval                    doTestStatistic=0;                    DimBeta=1;                    nConfInterval_Iterations=200;                    ConfInterval = .95;                                        %INSTRUMENTS        DEFAULT IS FULL INSTRUMENTS                    useConstINST = 1;                    usemeaserrorsINST = 0;                    useNoCostINST = 0;                                        %MEASUREMENT ERROR                    usemeaserrors = 0;              %Add Measurement Noise to Moments                    nMeasErrorIter = 0;                    SDMultipleCost = .25^.5;                    SDMultiplePop = .05^.5;                    SDMultiplePop = 0;                                        %Probability Parameters                    doProbabilities=1;                    doProbBootstrap=0;                    doProbVar=1;                    doProbMeasErrors=1;                    doConfInterval=1;           %Conf Intervals for Prob/Meas Error case (redrawing errors, keeping data same)                    nBetaProbIterations=1;                    nMeasErrorIterProb=1;                                        %Measurement Errors                    SD1 = 9;                    SD2 = 300;                    SD_HospMeasurementErrors = SDMultipleCost*SD1;                    SD_NBarMeasurementErrors = SDMultiplePop*SD2;                                        if ~RobustIneq                        NumMoments = 3;             %A1: HMOs can reverse choice with largest hosp, A2: HMOs can reverse choice with smallest hosp, B:  Hosp can reverse choice with HMOs that acc                    else                        NumMoments = 2;                    end;                                        lb_temp=-100;                    ub_temp=10000;                    lb=lb_temp*ones(DimBeta,1);                    ub=ub_temp*ones(DimBeta,1);                                        options = optimset('MaxFunEvals',10000, 'MaxIter',10000);                                                 x1 = XALL(iMonteDraw).x1;                            x2 = XALL(iMonteDraw).x2;                                                        NumHosp = 2;                            NumHMO = 2;                            gamma=.075;                            % Import Data %                            x = [x1];                            nObs = size(x,[1]);                            x = [zeros(nObs,1) x];                            % Prepare Data Matrices %                            ID_RunID = x(:,1);                            ID_Iter = x(:,2);                            ID_HMO = x(:,3);                            ID_Hosp = x(:,4);                            NBar = x(:,5);                            ISCONT = x(:,6);                            HospCost_j = x(:,7);                            HospCost_j2 = x(:,8);                            ISCAP_j = x(:,9);                            ISCAP_j2 = x(:,10);                            HospCap_j = x(:,11);                            HospCap_j2 = x(:,12);                            HospChar = x(:,13);                            Tjk = x(:,14);                            Tjk2 = x(:,15);                            Tj2k = x(:,16);                            Njk = x(:,17);                            Njk2 = x(:,18);                            Nj2k = x(:,19);                            HospRealProf = x(:,20);                            HospRealCosts = x(:,21);                            HospNewRealProf = x(:,22);                            HospNewRealCosts = x(:,23);                            HMONewPrem = x(:,24);                            N2jk = x(:,25);                            N2jk2 = x(:,26);                            HMOChar = x(:,27);                            HMOPrem = x(:,28);                            HMOCost = x(:,29);                            HMORealProf = x(:,30);                            SigmaM_k = x(:,31);                            SigmaM_k2 = x(:,32);                            HMONewProf = x(:,33);                            Sigma2M_k = x(:,34);                            Sigma2M_k2 = x(:,35);                            N2jk_temp = x(:,36);                            N2j2k = x(:,37);                            MktStd_k = x(:,38);                            MktStd_k2 = x(:,39);                            HospCap_Mkt = HospCap_j+ HospCap_j2;                            HospCost_j_Wtd = HospCost_j.*(HospCap_j./HospCap_Mkt);                            HospCost_j2_Wtd = HospCost_j2.*(HospCap_j2./HospCap_Mkt);                            HospCost_MktAvg_Wtd = (HospCost_j_Wtd +HospCost_j2_Wtd)/2;                            HospCost_MktAvg = (HospCost_j + HospCost_j2)/2;                            HospCost_DiffAvg = HospCost_j - HospCost_MktAvg;                            HospCost_DiffAvgWts = HospCost_j - HospCost_MktAvg_Wtd;                            HospCost_DiffAvgWts_j2 = HospCost_j2 - HospCost_MktAvg_Wtd;                            %PopPerBed = NBar./(HospCap_j + HospCap_j2);                            SigmaH_jk = zeros(nObs,1);                            SigmaH_j2k = zeros(nObs,1);                            SigmaH_jk2 = zeros(nObs,1);                            Sigma2H_jk = zeros(nObs,1);                            Sigma2H_j2k = zeros(nObs,1);                            Sigma2H_jk2 = zeros(nObs,1);                            for idx=1:nObs                                SigmaH_jk(idx,1) = Njk(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_j2k(idx,1) = Nj2k(idx,1)/(SigmaM_k(idx,1)*NBar(idx,1)*gamma);                                SigmaH_jk2(idx,1) = Njk2(idx,1)/(SigmaM_k2(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk(idx,1) = N2jk(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_j2k(idx,1) = N2j2k(idx,1)/(Sigma2M_k(idx,1)*NBar(idx,1)*gamma);                                Sigma2H_jk2(idx,1) = N2jk2(idx,1)/(Sigma2M_k2(idx,1)*NBar(idx,1)*gamma);                            end;                            DeltaNjk = Njk-N2jk;                            DeltaNj2k = Nj2k-N2j2k;                            DeltaNjk2 = Njk2-N2jk2;                            nMkts = nObs / 4;                            nContracts = 0;                            for i=1:size(ISCONT,[1])                                if ISCONT(i,1)==1                                    nContracts = nContracts+1;                                end;                            end;                            HClassTemp = [1;1;2;2;];                            HospClass = kron(nMkts,HClassTemp);                            ISCONTj2 = ISCONT;                            ISCONTk2 = ISCONT;                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2(idx,1) = ISCONT(idx+2,1);                                else                                    ISCONTj2(idx,1) = ISCONT(idx-2,1);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2(idx,1) = ISCONT(idx+1,1);                                else                                    ISCONTk2(idx,1) = ISCONT(idx-1,1);                                end;                                end;                            DeltaISCONT = zeros(nObs,1);                            for i=1:nObs                                DeltaISCONT(i,1) = (-1)^(ISCONT(i,1)+1);                                DeltaISCONTj2(i,1) = (-1)^(ISCONTj2(i,1)+1);                                DeltaISCONTk2(i,1) = (-1)^(ISCONTk2(i,1)+1);                            end;                            HospCostPerPatient = zeros(nObs,1);                            HospCostPerPatient2 = zeros(nObs,1);                            for i=1:nObs                                if (Njk(i,1) + Njk2(i,1))>0                                    HospCostPerPatient(i,1) = HospRealCosts(i,1) / (Njk(i,1) + Njk2(i,1));                                end;                                if (N2jk(i,1) + N2jk2(i,1))>0                                        HospCostPerPatient2(i,1) = HospNewRealCosts(i,1) / (N2jk(i,1) + N2jk2(i,1));                                end;                            end;                            Beta_Start = [-100, 0, 10, 100, 1000, 10000];                            %==========================================================================                            %INSTRUMENTS =========================                            %==========================================================================                            NormInst = [ones(nObs,1) Njk NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                            NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*HospCost_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                            Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*HospCost_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                            MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*HospCost_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                            ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCap_j ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                            CostInteraction = [HospCost_j.*NBar HospCost_j.*HospCap_j HospCost_j.*HospCost_j HospCost_j.*(HospCap_j+HospCap_j2) HospCost_j.*HMOChar HospCost_j.*HospChar];                            SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                            CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                            HospCostsWtd = [HospCost_j_Wtd HospCost_j2_Wtd HospCost_MktAvg HospCost_MktAvg_Wtd];                    INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                    INST_NoContract = [ones(nObs,1) NBar HospCap_j HospCost_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction CostInteraction SumHospCapInteraction CharInteraction HospCostsWtd];                            UseInst_NoNjk = [NormInst NjkInteraction Njk2Interaction ISCAPInteraction CostInteraction SumHospCapInteraction];                            UseInst_NoNjk = UseInst_NoNjk(:,2);                                           ALLINST_NoNjk = INST;                    ALLINST_NoNjk(:,2) = [];                                        NBarMkt = zeros(nMkts,1);                    SumCapMkt = zeros(nMkts,1);                    SumCostMkt = zeros(nMkts,1);                    SumISCAPMkt = zeros(nMkts,1);                    for iMkt=1:nMkts                        idx = (iMkt-1)*4+1;                        NBarMkt(iMkt,1) = NBar(idx,1);                        SumCapMkt(iMkt,1) = (HospCap_j(idx,1)+HospCap_j2(idx,1));                        SumCostMkt(iMkt,1) = (HospCost_j(idx,1)+HospCost_j2(idx,1));                        SumISCAPMkt(iMkt,1) = (ISCAP_j(idx,1)+ISCAP_j2(idx,1));                        end;                                        MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumCostMkt SumISCAPMkt SumCapMkt./NBarMkt SumCostMkt./SumCapMkt];                    MktINSTmeas = MktINST;                    if ~(SDMultiplePop + SDMultipleCost == 0)                        if (SDMultiplePop>0) && (SDMultipleCost>0)                            MktINSTmeas = [ones(nMkts,1) SumCapMkt SumISCAPMkt];                        else                            MktINSTmeas = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                        end;                    end;                                         MktINST = [ones(nMkts,1) NBarMkt SumCapMkt SumISCAPMkt SumCapMkt./NBarMkt];                                        if usemeaserrorsINST                        PrimaryInst = [ones(nObs,1) HospCap_j MktStd_k ISCAP_j HMOChar HospChar (HospCap_j + HospCap_j2)];                        ISCAPInteraction = [ISCAP_j.*HospCap_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [PrimaryInst ISCAPInteraction SumHospCapInteraction CharInteraction];                    end;                                       if useConstINST                        INST = [ones(nObs,1) ];                        INST_NoContract = [ones(nObs,1)];                        MktINSTmeas= [ones(nMkts,1)];                                            end;                                        if useNoCostINST                        NormInst = [ones(nObs,1) Njk NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar];                        NjkInteraction = [Njk.*Njk Njk.*NBar Njk.*HospCap_j Njk.*ISCAP_j Njk.*MktStd_k Njk.*(HospCap_j+HospCap_j2) Njk.*HMOChar Njk.*HospChar];                        Njk2Interaction = [Njk.*Njk.*Njk Njk.*Njk.*NBar Njk.*Njk.*HospCap_j Njk.*Njk.*ISCAP_j Njk.*Njk.*MktStd_k Njk.*Njk.*(HospCap_j+HospCap_j2) Njk.*Njk.*HMOChar Njk.*Njk.*HospChar];                        MktInteraction = [MktStd_k.*NBar MktStd_k.*HospCap_j MktStd_k.*ISCAP_j MktStd_k.*MktStd_k MktStd_k.*(HospCap_j+HospCap_j2) MktStd_k.*HMOChar MktStd_k.*HospChar];                        ISCAPInteraction = [ISCAP_j.*NBar ISCAP_j.*HospCost_j ISCAP_j.*(HospCap_j+HospCap_j2) ISCAP_j.*HMOChar ISCAP_j.*HospChar];                        SumHospCapInteraction = [HospCap_j.*(HospCap_j+HospCap_j2) HMOChar.*(HospCap_j+HospCap_j2) HospChar.*(HospCap_j+HospCap_j2) (HospCap_j+HospCap_j2).*(HospCap_j+HospCap_j2) ];                        CharInteraction = [HospChar.*HospChar HospChar.*HMOChar HMOChar.*HMOChar];                        INST = [NormInst NjkInteraction Njk2Interaction MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction];                        INST_NoContract = [ones(nObs,1) NBar HospCap_j ISCAP_j MktStd_k (HospCap_j+HospCap_j2) HMOChar HospChar MktInteraction ISCAPInteraction SumHospCapInteraction CharInteraction ];                    end;                    nInst = size(INST,2);                    nInstNoContract = size(INST_NoContract,2);                                             %==========================================================================                            %ERROR CALCULATIONS========================================================                            %==========================================================================                            useTotalTransfers = 1;                            %Calculate distribution of errors using total transfers (need to account                            %for Njk/N2jk issue                            if useTotalTransfers                                NNjk=Njk+N2jk;                                NNj2k=NNjk;                                NNjk2=NNjk;                                NN2jk=NNjk;                                NN2j2k=NNjk;                                NN2jk2=NNjk;                                for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        NNj2k(idx,1) = NNjk(idx+2,1);                                    else                                        NNj2k(idx,1) = NNjk(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        NNjk2(idx,1) = NNjk(idx+1,1);                                    else                                        NNjk2(idx,1) = NNjk(idx-1,1);                                    end;                                    end;                                X = [NNjk ALLINST_NoNjk];                                                     Beta_0 = TrueBeta0;                                Beta = TrueBeta;                                                                Tjk_NEW = (NNjk.*Tjk - X*TrueBeta + NNjk*TrueBeta0)./NNjk;                                Tj2k_NEW = Tjk_NEW;                                Tjk2_NEW = Tjk_NEW;                                 Tjk_Residual = Tjk - Tjk_NEW;                                Tj2k_Residual = Tjk_Residual;                                Tjk2_Residual = Tjk_Residual;                                    for idx=1:nObs                                    if (mod(idx-1,4)<2)                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx+2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx+2,1);                                    else                                        Tj2k_NEW(idx,1) = Tjk_NEW(idx-2,1);                                        Tj2k_Residual(idx,1) = Tjk_Residual(idx-2,1);                                    end;                                    if (mod(idx,2)==1)                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx+1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx+1,1);                                    else                                        Tjk2_NEW(idx,1) = Tjk_NEW(idx-1,1);                                        Tjk2_Residual(idx,1) = Tjk_Residual(idx-1,1);                                    end;                                    end;                                  Ejk = Njk.* Tjk_NEW - Njk * Beta_0;                                    Ej2k = Nj2k.*Tj2k_NEW - Nj2k * Beta_0;                                    Ejk2 = Njk2.*Tjk2_NEW - Njk2 * Beta_0;                                EjkALL = NNjk.* Tjk_NEW - NNjk * Beta_0;                                                                    E2jk = N2jk.*Tjk_NEW - N2jk * Beta_0;                                E2j2k = N2j2k.*Tj2k_NEW - N2j2k * Beta_0;                                    E2jk2 = N2jk2.*Tjk2_NEW - N2jk2 * Beta_0;                                   Delta_Ejk = Ejk - E2jk;                                Delta_Ej2k = Ej2k - E2j2k;                                Delta_Ejk2 = Ejk2 - E2jk2;                            else                                cons = ones(nObs,1);                                Beta_0 = (inv(cons'*cons)*(cons'*(Tjk)));                                        Ejk = Tjk - Beta_0;                                  Ej2k = Tj2k - Beta_0;                                Ejk2 = Tjk2 - Beta_0;                            end;                            Err2=zeros(nMkts,4);                % Residuals in nMkts x 4 form. Reshaped Err.                            for i=0:nMkts-1                                for j=1:4                                    Err2(i+1,j) = EjkALL(i*4+j);                                end;                            end;                            ErrMean = mean(Err2)';                            VarErr=zeros(4,4);                            for n=1:nMkts                                SSample = Err2(n,:)';                                VarErr = VarErr + ((SSample-ErrMean)*(SSample-ErrMean)');                            end;                            VarErr = VarErr / (nMkts);                            CholVarErr = chol(VarErr);                                    %display(Beta_0);                            Beta_Start = [Beta_Start Beta_0];                            NumBetaStart = size(Beta_Start,2);                                           %==========================================================================                    %==========================================================================                    %==========================================================================                    % PROBABILITIES                    %==========================================================================                    %==========================================================================                    %==========================================================================                    if doProbabilities                        %x2 = importdata ('data_AllNetworkStructures.txt');                                              ISCONT_All = zeros(nObs,16);                        Njk_All = zeros(nObs,16);                        Njk2_All = zeros(nObs,16);                        Nj2k_All = zeros(nObs,16);                        N2jk_All = zeros(nObs,16);                        N2jk2_All = zeros(nObs,16);                        N2j2k2_All = zeros(nObs,16);                        Prem_All = zeros(nObs,16);                        Prem2_All = zeros(nObs,16);                        HospCost_All = zeros(nObs,16);                        HospCost2_All = zeros(nObs,16);                        SigmaM_k_All = zeros(nObs,16);                            SigmaM_k2_All = zeros(nObs,16);                             SigmaM2_k_All = zeros(nObs,16);                        SigmaM2_k2_All = zeros(nObs,16);                            HospCost_j_All =  zeros(nObs,16);                            HospCost_j2_All =  zeros(nObs,16);                                RealHospProf_All = zeros(nObs,16);                            RealHospProf2_All = zeros(nObs,16);                        RealHospCost_All = zeros(nObs,16);                        RealHospCost2_All = zeros(nObs,16);                        RealHMOProf_all = zeros(nObs,16);                        RealHMOProf2_all = zeros(nObs,16);                                            DeltaNjk_All = zeros(nObs,16);                            DeltaNj2k_All = zeros(nObs,16);                            DeltaNjk2_All = zeros(nObs,16);                                DeltaNjkInv_All = zeros(nObs,16);                                                        ISCONTj2_All = zeros(nObs,16);                        ISCONTk2_All = zeros(nObs,16);                        DeltaISCONT_All = zeros(nObs,16);                        DeltaISCONTj2_All = zeros(nObs,16);                        DeltaISCONTk2_All = zeros(nObs,16);                                                SigmaH_jk_All = zeros(nObs,16);                        SigmaH_j2k_All = zeros(nObs,16);                        SigmaH_jk2_All = zeros(nObs,16);                        Sigma2H_jk_All = zeros(nObs,16);                        Sigma2H_j2k_All = zeros(nObs,16);                        Sigma2H_jk2_All = zeros(nObs,16);                                                DeltaHMOPremTemp_All = zeros(nObs,16);                        EqNetwork = x2(:,4);                        x2Idx=9; %where alternative network structure data begins                        for i = 1:16                            ISCONT_All(:,i) = x2(:,x2Idx);                            Njk_All(:,i) = x2(:,x2Idx+1);                            Njk2_All(:,i) = x2(:,x2Idx+2);                            Nj2k_All(:,i) = x2(:,x2Idx+3);                                    N2jk_All(:,i) = x2(:,x2Idx+4);                            N2jk2_All(:,i) = x2(:,x2Idx+5);                            N2j2k_All(:,i) = x2(:,x2Idx+6);                                            Prem_All(:,i) = x2(:,x2Idx+7);                            Prem2_All(:,i) = x2(:,x2Idx+8);                            SigmaM_k_All(:,i) = x2(:,x2Idx+9);                            SigmaM_k2_All(:,i) = x2(:,x2Idx+10);                            SigmaM2_k_All(:,i) = x2(:,x2Idx+11);                            SigmaM2_k2_All(:,i) = x2(:,x2Idx+12);                            HospCost_j_All(:,i) = x2(:,x2Idx+13);                            HospCost_j2_All(:,i) = x2(:,x2Idx+14);                                    RealHospProf_All(:,i) = x2(:,x2Idx+15);                            RealHospProf2_All(:,i) = x2(:,x2Idx+16);                            RealHospCost_All(:,i) = x2(:,x2Idx+17);                            RealHospCost2_All(:,i) = x2(:,x2Idx+18);                            RealHMOProf_All(:,i) = x2(:,x2Idx+19);                            RealHMOProf_All(:,i) = x2(:,x2Idx+20);                                    x2Idx = x2Idx + 22;                                                DeltaNjk_All(:,i) = Njk_All(:,i)-N2jk_All(:,i);                            DeltaNj2k_All(:,i) = Nj2k_All(:,i)-N2j2k_All(:,i);                            DeltaNjk2_All(:,i) = Njk2_All(:,i)-N2jk2_All(:,i);                            AbsDeltaNjkInv_All(:,i) = abs(ones(nObs,1) ./ DeltaNjk_All(:,i));                                                        ISCONTj2_All(:,i) = ISCONT_All(:,i);                            ISCONTk2_All(:,i) = ISCONT_All(:,i);                            for idx=1:nObs                                if (mod(idx-1,4)<2)                                    ISCONTj2_All(idx,i) = ISCONT_All(idx+2,i);                                else                                    ISCONTj2_All(idx,i) = ISCONT_All(idx-2,i);                                end;                                if (mod(idx,2)==1)                                    ISCONTk2_All(idx,i) = ISCONT_All(idx+1,i);                                else                                    ISCONTk2_All(idx,i) = ISCONT_All(idx-1,i);                                end;                            end;                            DeltaISCONT_All(:,i) = zeros(nObs,1);                            for idx=1:nObs                                DeltaISCONT_All(idx,i) = (-1)^(ISCONT_All(idx,i)+1);                                DeltaISCONTj2_All(idx,i) = (-1)^(ISCONTj2_All(idx,i)+1);                                DeltaISCONTk2_All(idx,i) = (-1)^(ISCONTk2_All(idx,i)+1);                                                    SigmaH_jk_All(idx,i) = Njk_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_j2k_All(idx,i) = Nj2k_All(idx,i)/(SigmaM_k_All(idx,i)*NBar(idx,1)*gamma);                                SigmaH_jk2_All(idx,i) = Njk2_All(idx,i)/(SigmaM_k2_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk_All(idx,i) = N2jk_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_j2k_All(idx,i) = N2j2k_All(idx,i)/(SigmaM2_k_All(idx,i)*NBar(idx,1)*gamma);                                Sigma2H_jk2_All(idx,i) = N2jk2_All(idx,i)/(SigmaM2_k2_All(idx,i)*NBar(idx,1)*gamma);                            end;                        HospCostPerPatient_All = zeros(nObs,16);                        HospCostPerPatient2_All = zeros(nObs,16);                        for idxStruct=1:16                            for idxObs=1:nObs                                if ( (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient_All(idxObs,idxStruct) = RealHospCost_All(idxObs,idxStruct) / (Njk_All(idxObs,idxStruct) + Njk2_All(idxObs,idxStruct));                                end;                                if ( (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct))>0 )                                    HospCostPerPatient2_All(idxObs,idxStruct) = RealHospCost2_All(idxObs,idxStruct) / (N2jk_All(idxObs,idxStruct) + N2jk2_All(idxObs,idxStruct));                                end;                            end;                        end;                                                            DeltaHospCosts = HospRealCosts - HospNewRealCosts;                            DeltaHMOPremTemp_All(:,i) = ( SigmaM_k_All(:,i).*(Prem_All(:,i)-HMOCost) - SigmaM2_k_All(:,i).*(Prem2_All(:,i)-HMOCost) ).*NBar;                                                       end; %for i=1:16                                                                                            A_Hosp_All = DeltaNjk_All + DeltaNjk2_All;                        A_HMO_All = (-1) * (DeltaNjk_All + DeltaNj2k_All);                        C_Hosp_All = RealHospCost_All - RealHospCost2_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                        C_HMO_All = (-1)*(DeltaHMOPremTemp_All - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                % 10 Cases to consider: 1-NoContracts; 2 LHosp(1),S(0); 3 L(2),S(0);                        % 4-L(0),S(1); 5-L(0),S(2); 6-L1S1 Same; 7-L1S1Diff; 8-L1S2; 9-L2S1;                        % 10-AllContract                        Struct_Indicator = zeros(nMkts,10);                        for idxMkt = 1:nMkts                            idxObs = (idxMkt-1)*4+1;                            if ( EqNetwork(idxObs,1) == 0 ) Struct_Indicator(idxMkt,1) = 1; end;                            if ( (EqNetwork(idxObs,1) == 1)||(EqNetwork(idxObs,1) == 4) ) Struct_Indicator(idxMkt,2) = 1; end;                            if ( EqNetwork(idxObs,1) == 5 ) Struct_Indicator(idxMkt,3) = 1; end;                            if ( (EqNetwork(idxObs,1) == 2)||(EqNetwork(idxObs,1) == 8) ) Struct_Indicator(idxMkt,4) = 1; end;                                    if ( EqNetwork(idxObs,1) == 10 ) Struct_Indicator(idxMkt,5) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 3)||(EqNetwork(idxObs,1) == 12) ) Struct_Indicator(idxMkt,6) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 6)||(EqNetwork(idxObs,1) == 9) ) Struct_Indicator(idxMkt,7) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 11)||(EqNetwork(idxObs,1) == 14) ) Struct_Indicator(idxMkt,8) = 1; end;                                    if ( (EqNetwork(idxObs,1) == 7)||(EqNetwork(idxObs,1) == 13) ) Struct_Indicator(idxMkt,9) = 1; end;                                            if ( EqNetwork(idxObs,1) == 15 ) Struct_Indicator(idxMkt,10) = 1; end;                                        end;                                            % Form what Structures look like in ALL NETWORK STRUCTURS                        ISCONT_AllNetworks = zeros(nObs,16);                        DeltaISCONT_AllNetworks = zeros(nObs,16);                        for idxObs = 1:nObs                            if (mod(idxObs,4)==1)                                ISCONT_AllNetworks(idxObs,5) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                            if (mod(idxObs,4)==2)                                ISCONT_AllNetworks(idxObs,2) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,6) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                            end;                                if (mod(idxObs,4)==3)                                ISCONT_AllNetworks(idxObs,9) = 1;                                ISCONT_AllNetworks(idxObs,10) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,13) = 1;                                ISCONT_AllNetworks(idxObs,14) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                if (mod(idxObs,4)==0)                                ISCONT_AllNetworks(idxObs,3) = 1;                                ISCONT_AllNetworks(idxObs,4) = 1;                                ISCONT_AllNetworks(idxObs,7) = 1;                                ISCONT_AllNetworks(idxObs,8) = 1;                                ISCONT_AllNetworks(idxObs,11) = 1;                                ISCONT_AllNetworks(idxObs,12) = 1;                                ISCONT_AllNetworks(idxObs,15) = 1;                                ISCONT_AllNetworks(idxObs,16) = 1;                                        end;                                for idxStruct = 1:16                                        DeltaISCONT_AllNetworks(idxObs,idxStruct) = (-1)^(ISCONT_AllNetworks(idxObs,idxStruct)+1);                            end;                        end;                                            Struct_Indicator_Sum = zeros(1,10);                        for iCase=1:10                            Struct_Indicator_Sum(1,iCase) = sum(Struct_Indicator(:,iCase));                        end;                                                                         nBetas = (Max-Min)*Grid+1;                                              %======================================================================                        %BEGIN PROBABILITY TESTING                        %======================================================================                        BetaPredictionAll = zeros(nBetaProbIterations,2);                        BetaPredictionAllMeas = zeros(nBetaProbIterations,2);                      if (~doProbMeasErrors)                                                for idxIter=1:nBetaProbIterations                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                            MomentsPerNetworkStructure = size(MktINST,2);                            ZMoments_AllNetworks = zeros(MomentsPerNetworkStructure,10,nBetas);                            SMoments_AllNetworks = zeros(MomentsPerNetworkStructure,nMkts,10,nBetas);                            [BetaPredictionAll(idxIter,:), ZMoments_AllNetworks, SMomentsAll_AllNetworks, fvalProb]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All,C_HMO_All,A_Hosp_All,C_Hosp_All,MktINST,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                            TJTestStatisticProb = fvalProb * nMkts^.5;                            display(BetaPredictionAll);                        end;                        BetaPredMins = sortrows(BetaPredictionAll(:,1));                        BetaPredMaxs = sortrows(BetaPredictionAll(:,2));                                 end;                        if doProbMeasErrors                                MeasErrorBetas = zeros(nMeasErrorIter,2);                            MeasErrorSinglePoints=0;                                                for idxMeasError=1:nMeasErrorIterProb                                if ~doProbBootstrap                                    Nu2s = Nu2sAllDraw(:,:,iNu2ErrorUse);                                else                                    Nu2s = Nu2sAllBoot(:,:,iNu2ErrorUse);                                end;                                                    if SDMultipleCost>0                                    HospMeasurementErrors = HospMeasurementErrorsAll(:,iErrorUse);                                else                                    HospMeasurementErrors = zeros(nObs/2,1);                                end;                                if SDMultiplePop > 0                                    NBarMeasurementErrors = NBarMeasurementErrorsAll(:,iErrorUse);                                else                                    NBarMeasurementErrors = zeros(nObs/4, 1);                                end;                                Etaj = kron(HospMeasurementErrors,ones(2,16));                                Omega = kron(NBarMeasurementErrors,ones(4,16));                                                                    Psijk_A_All = gamma * (SigmaM_k_All.*SigmaH_jk_All);                                Psijk_B_All = gamma * (SigmaM2_k_All.*Sigma2H_jk_All);                                Psijk_All = Psijk_A_All-Psijk_B_All;                                Psij2k_A_All = gamma * (SigmaM_k_All.*SigmaH_j2k_All);                                Psij2k_B_All = gamma * (SigmaM2_k_All.*Sigma2H_j2k_All);                                Psij2k_All = Psij2k_A_All-Psij2k_B_All;                                        Psijk2_A_All = gamma * (SigmaM_k2_All.*SigmaH_jk2_All);                                Psijk2_B_All = gamma * (SigmaM2_k2_All.*Sigma2H_jk2_All);                                Psijk2_All = Psijk2_A_All-Psijk2_B_All;                                                                        PsiHosp_A_All = Psijk_A_All + Psijk2_A_All;                                PsiHosp_B_All = Psijk_B_All + Psijk2_B_All;                                                                DeltaNjkErr_All = DeltaNjk_All + Omega.*Psijk_All;                                AbsDeltaNjkErrInv_All = abs(ones(nObs,16) ./ DeltaNjkErr_All);                                DeltaNjk2Err_All = DeltaNjk2_All + Omega.*Psijk2_All;                                DeltaNj2kErr_All = DeltaNj2k_All + Omega.*Psij2k_All;                                                                        A_Hosp_All_Meas = DeltaNjkErr_All + DeltaNjk2Err_All;                                A_HMO_All_Meas = (-1) * (DeltaNjkErr_All + DeltaNj2kErr_All);                                C_Hosp_All_Meas = (Njk_All+Njk2_All+Omega.*PsiHosp_A_All).*(HospCostPerPatient_All+Etaj) - (N2jk_All+N2jk2_All+Omega.*PsiHosp_B_All).*(HospCostPerPatient2_All+Etaj) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNjk2_All.*kron(Tjk2_Residual,ones(1,16)) - kron(Delta_Ejk2,ones(1,16));                                C_HMO_All_Meas = (-1)*( ( SigmaM_k_All.*(Prem_All-kron(HMOCost,ones(1,16)))-SigmaM2_k_All.*(Prem2_All-kron(HMOCost,ones(1,16))) ).*(  kron(NBar,ones(1,16)) + Omega) - DeltaNjk_All.*kron(Tjk_Residual,ones(1,16)) - DeltaNj2k_All.*kron(Tj2k_Residual,ones(1,16)) - kron(Delta_Ej2k,ones(1,16)) );                                                                MomentsPerNetworkStructureMeas= size(MktINSTmeas,2);                                ZMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,10,nBetas);                                SMoments_AllNetworksMeas = zeros(MomentsPerNetworkStructureMeas,nMkts,10,nBetas);                                [BetaPredictionAllMeas(idxMeasError,:), ZMoments_AllNetworksMeas, SMomentsAll_AllNetworksMeas, fvalProbMeas]=f_Prob_CalcBeta092605(Min,Max,Grid, A_HMO_All_Meas,C_HMO_All_Meas,A_Hosp_All_Meas,C_Hosp_All_Meas,MktINSTmeas,ID_Hosp,doVar,ISCONT_AllNetworks,Struct_Indicator,Nu2s,RealNu2s);                                TJTestStatisticProbMeas = fvalProbMeas * nMkts^.5;                                display(BetaPredictionAllMeas);                            end; %foridxMeas                                end; %ifUseMeasures                    end; %Do Probabilities                        BETA(15).B = [BETA(15).B; BetaPredictionAllMeas];                          end;                                                                                   end; %doMonteDraws        end; %doPart2 code = ['save MonteResults_072709_' thisparm ' BETA']; eval(code);